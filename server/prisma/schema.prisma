generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id              String               @id @default(uuid())
  first_name           String
  last_name            String
  email                String               @unique
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  account_status       AccountStatus
  password             String
  booking_histories    BookingHistory[]
  event_bookings       EventBooking[]
  payment_info         PaymentInfo[]
  payment_transactions PaymentTransaction[]
  user_preferences     UserPreferences[]
}

model EventOrganizer {
  organizer_id    String      @id @default(uuid())
  organizer_name  String
  organizer_email String      @unique
  contact_number  String
  gst_number      String      @unique
  legal_status    LegalStatus
  approval_date   DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  password        String
  events          Event[]
}

model Location {
  location_id String   @id @default(uuid())
  address     String
  city        String
  state       String
  country     String
  zip_code    String
  timezone    String
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
}

model Event {
  event_id          String           @id @default(uuid())
  organizer_id      String
  event_name        String
  description       String
  event_type        EventType
  start_date        DateTime
  end_date          DateTime
  location_id       String
  status            EventStatus
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ticket_limit      Int
  booking_histories BookingHistory[]
  location          Location         @relation(fields: [location_id], references: [location_id])
  organizer         EventOrganizer   @relation(fields: [organizer_id], references: [organizer_id])
  event_bookings    EventBooking[]
  seats_inventory   SeatsInventory[]
}

model SeatsInventory {
  seat_id        String         @id @default(uuid())
  event_id       String
  seat_number    String
  seat_type      SeatType
  price          Float
  seat_status    SeatStatus
  event_bookings EventBooking[]
  event          Event          @relation(fields: [event_id], references: [event_id])
}

model EventBooking {
  event_booking_id    String               @id @default(uuid())
  event_id            String
  user_id             String
  seat_id             String
  booking_date        DateTime
  amount_paid         Float
  cancellation_date   DateTime?
  createdAt           DateTime             @default(now())
  payment_status      PaymentStatus
  event               Event                @relation(fields: [event_id], references: [event_id])
  seat                SeatsInventory       @relation(fields: [seat_id], references: [seat_id])
  user                User                 @relation(fields: [user_id], references: [user_id])
  payment_transaction PaymentTransaction[]
}

model BookingHistory {
  history_id      String        @id @default(uuid())
  user_id         String
  event_id        String
  booking_date    DateTime
  ticket_type     TicketType
  payment_status  PaymentStatus
  ticket_quantity Int
  amount_paid     Float
  createdAt       DateTime      @default(now())
  event           Event         @relation(fields: [event_id], references: [event_id])
  user            User          @relation(fields: [user_id], references: [user_id])
}

model PaymentInfo {
  payment_info_id      String               @id @default(uuid())
  user_id              String
  card_token           String
  expiry_date          DateTime
  billing_address      String
  payment_type         PaymentType
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  user                 User                 @relation(fields: [user_id], references: [user_id])
  payment_transactions PaymentTransaction[]
}

model PaymentTransaction {
  transaction_id   String            @id @default(uuid())
  user_id          String
  event_booking_id String
  payment_info_id  String
  amount           Float
  status           TransactionStatus
  transaction_date DateTime
  event_booking    EventBooking      @relation(fields: [event_booking_id], references: [event_booking_id])
  payment_info     PaymentInfo       @relation(fields: [payment_info_id], references: [payment_info_id])
  user             User              @relation(fields: [user_id], references: [user_id])
}

model Preferences {
  preferences_id   String            @id @default(uuid())
  preference_name  String
  description      String
  user_preferences UserPreferences[]
}

model UserPreferences {
  user_preferences_id String      @id @default(uuid())
  user_id             String
  preferences_id      String
  preference          Preferences @relation(fields: [preferences_id], references: [preferences_id])
  user                User        @relation(fields: [user_id], references: [user_id])
}

enum AccountStatus {
  active
  inactive
  suspended
}

enum PaymentType {
  credit
  debit
  paypal
  cash
  stripe
}

enum EventType {
  Workshop
  Conference
  Seminar
  Concert
  Exhibition
}

enum EventStatus {
  Completed
  Upcoming
  Cancelled
  PendingApproval
}

enum PaymentStatus {
  Pending
  Failed
  Success
}

enum SeatType {
  VIP
  General
  Student
}

enum SeatStatus {
  available
  booked
}

enum TicketType {
  VIP
  General
  Student
  EarlyBird
}

enum LegalStatus {
  Pending
  Approved
  Rejected
  Suspended
}

enum TransactionStatus {
  Completed
  Failed
  Pending
}
