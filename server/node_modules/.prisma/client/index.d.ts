
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EventOrganizer
 * 
 */
export type EventOrganizer = $Result.DefaultSelection<Prisma.$EventOrganizerPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model SeatsInventory
 * 
 */
export type SeatsInventory = $Result.DefaultSelection<Prisma.$SeatsInventoryPayload>
/**
 * Model EventBooking
 * 
 */
export type EventBooking = $Result.DefaultSelection<Prisma.$EventBookingPayload>
/**
 * Model BookingHistory
 * 
 */
export type BookingHistory = $Result.DefaultSelection<Prisma.$BookingHistoryPayload>
/**
 * Model PaymentInfo
 * 
 */
export type PaymentInfo = $Result.DefaultSelection<Prisma.$PaymentInfoPayload>
/**
 * Model PaymentTransaction
 * 
 */
export type PaymentTransaction = $Result.DefaultSelection<Prisma.$PaymentTransactionPayload>
/**
 * Model Preferences
 * 
 */
export type Preferences = $Result.DefaultSelection<Prisma.$PreferencesPayload>
/**
 * Model UserPreferences
 * 
 */
export type UserPreferences = $Result.DefaultSelection<Prisma.$UserPreferencesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AccountStatus: {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

export type AccountStatus = (typeof AccountStatus)[keyof typeof AccountStatus]


export const LegalStatus: {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Suspended: 'Suspended'
};

export type LegalStatus = (typeof LegalStatus)[keyof typeof LegalStatus]


export const EventType: {
  Workshop: 'Workshop',
  Conference: 'Conference',
  Seminar: 'Seminar',
  Concert: 'Concert',
  Exhibition: 'Exhibition'
};

export type EventType = (typeof EventType)[keyof typeof EventType]


export const EventStatus: {
  Completed: 'Completed',
  Upcoming: 'Upcoming',
  Cancelled: 'Cancelled',
  PendingApproval: 'PendingApproval'
};

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus]


export const SeatType: {
  VIP: 'VIP',
  General: 'General',
  Student: 'Student'
};

export type SeatType = (typeof SeatType)[keyof typeof SeatType]


export const SeatStatus: {
  available: 'available',
  booked: 'booked'
};

export type SeatStatus = (typeof SeatStatus)[keyof typeof SeatStatus]


export const PaymentStatus: {
  Pending: 'Pending',
  Failed: 'Failed',
  Success: 'Success'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const TicketType: {
  VIP: 'VIP',
  General: 'General',
  Student: 'Student',
  EarlyBird: 'EarlyBird'
};

export type TicketType = (typeof TicketType)[keyof typeof TicketType]


export const PaymentType: {
  credit: 'credit',
  debit: 'debit',
  paypal: 'paypal',
  cash: 'cash',
  stripe: 'stripe'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const TransactionStatus: {
  Completed: 'Completed',
  Failed: 'Failed',
  Pending: 'Pending'
};

export type TransactionStatus = (typeof TransactionStatus)[keyof typeof TransactionStatus]

}

export type AccountStatus = $Enums.AccountStatus

export const AccountStatus: typeof $Enums.AccountStatus

export type LegalStatus = $Enums.LegalStatus

export const LegalStatus: typeof $Enums.LegalStatus

export type EventType = $Enums.EventType

export const EventType: typeof $Enums.EventType

export type EventStatus = $Enums.EventStatus

export const EventStatus: typeof $Enums.EventStatus

export type SeatType = $Enums.SeatType

export const SeatType: typeof $Enums.SeatType

export type SeatStatus = $Enums.SeatStatus

export const SeatStatus: typeof $Enums.SeatStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type TicketType = $Enums.TicketType

export const TicketType: typeof $Enums.TicketType

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type TransactionStatus = $Enums.TransactionStatus

export const TransactionStatus: typeof $Enums.TransactionStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.eventOrganizer`: Exposes CRUD operations for the **EventOrganizer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizers
    * const eventOrganizers = await prisma.eventOrganizer.findMany()
    * ```
    */
  get eventOrganizer(): Prisma.EventOrganizerDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.seatsInventory`: Exposes CRUD operations for the **SeatsInventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeatsInventories
    * const seatsInventories = await prisma.seatsInventory.findMany()
    * ```
    */
  get seatsInventory(): Prisma.SeatsInventoryDelegate<ExtArgs>;

  /**
   * `prisma.eventBooking`: Exposes CRUD operations for the **EventBooking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventBookings
    * const eventBookings = await prisma.eventBooking.findMany()
    * ```
    */
  get eventBooking(): Prisma.EventBookingDelegate<ExtArgs>;

  /**
   * `prisma.bookingHistory`: Exposes CRUD operations for the **BookingHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingHistories
    * const bookingHistories = await prisma.bookingHistory.findMany()
    * ```
    */
  get bookingHistory(): Prisma.BookingHistoryDelegate<ExtArgs>;

  /**
   * `prisma.paymentInfo`: Exposes CRUD operations for the **PaymentInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentInfos
    * const paymentInfos = await prisma.paymentInfo.findMany()
    * ```
    */
  get paymentInfo(): Prisma.PaymentInfoDelegate<ExtArgs>;

  /**
   * `prisma.paymentTransaction`: Exposes CRUD operations for the **PaymentTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTransactions
    * const paymentTransactions = await prisma.paymentTransaction.findMany()
    * ```
    */
  get paymentTransaction(): Prisma.PaymentTransactionDelegate<ExtArgs>;

  /**
   * `prisma.preferences`: Exposes CRUD operations for the **Preferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Preferences
    * const preferences = await prisma.preferences.findMany()
    * ```
    */
  get preferences(): Prisma.PreferencesDelegate<ExtArgs>;

  /**
   * `prisma.userPreferences`: Exposes CRUD operations for the **UserPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreferences.findMany()
    * ```
    */
  get userPreferences(): Prisma.UserPreferencesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    EventOrganizer: 'EventOrganizer',
    Location: 'Location',
    Event: 'Event',
    SeatsInventory: 'SeatsInventory',
    EventBooking: 'EventBooking',
    BookingHistory: 'BookingHistory',
    PaymentInfo: 'PaymentInfo',
    PaymentTransaction: 'PaymentTransaction',
    Preferences: 'Preferences',
    UserPreferences: 'UserPreferences'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "eventOrganizer" | "location" | "event" | "seatsInventory" | "eventBooking" | "bookingHistory" | "paymentInfo" | "paymentTransaction" | "preferences" | "userPreferences"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizer: {
        payload: Prisma.$EventOrganizerPayload<ExtArgs>
        fields: Prisma.EventOrganizerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventOrganizerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>[]
          }
          delete: {
            args: Prisma.EventOrganizerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          update: {
            args: Prisma.EventOrganizerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventOrganizerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizer>
          }
          groupBy: {
            args: Prisma.EventOrganizerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      SeatsInventory: {
        payload: Prisma.$SeatsInventoryPayload<ExtArgs>
        fields: Prisma.SeatsInventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeatsInventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeatsInventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          findFirst: {
            args: Prisma.SeatsInventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeatsInventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          findMany: {
            args: Prisma.SeatsInventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>[]
          }
          create: {
            args: Prisma.SeatsInventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          createMany: {
            args: Prisma.SeatsInventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeatsInventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>[]
          }
          delete: {
            args: Prisma.SeatsInventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          update: {
            args: Prisma.SeatsInventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          deleteMany: {
            args: Prisma.SeatsInventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeatsInventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeatsInventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeatsInventoryPayload>
          }
          aggregate: {
            args: Prisma.SeatsInventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeatsInventory>
          }
          groupBy: {
            args: Prisma.SeatsInventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeatsInventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeatsInventoryCountArgs<ExtArgs>
            result: $Utils.Optional<SeatsInventoryCountAggregateOutputType> | number
          }
        }
      }
      EventBooking: {
        payload: Prisma.$EventBookingPayload<ExtArgs>
        fields: Prisma.EventBookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventBookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventBookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          findFirst: {
            args: Prisma.EventBookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventBookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          findMany: {
            args: Prisma.EventBookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>[]
          }
          create: {
            args: Prisma.EventBookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          createMany: {
            args: Prisma.EventBookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventBookingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>[]
          }
          delete: {
            args: Prisma.EventBookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          update: {
            args: Prisma.EventBookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          deleteMany: {
            args: Prisma.EventBookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventBookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventBookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventBookingPayload>
          }
          aggregate: {
            args: Prisma.EventBookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventBooking>
          }
          groupBy: {
            args: Prisma.EventBookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventBookingGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventBookingCountArgs<ExtArgs>
            result: $Utils.Optional<EventBookingCountAggregateOutputType> | number
          }
        }
      }
      BookingHistory: {
        payload: Prisma.$BookingHistoryPayload<ExtArgs>
        fields: Prisma.BookingHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          findFirst: {
            args: Prisma.BookingHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          findMany: {
            args: Prisma.BookingHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>[]
          }
          create: {
            args: Prisma.BookingHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          createMany: {
            args: Prisma.BookingHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BookingHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>[]
          }
          delete: {
            args: Prisma.BookingHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          update: {
            args: Prisma.BookingHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          deleteMany: {
            args: Prisma.BookingHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookingHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingHistoryPayload>
          }
          aggregate: {
            args: Prisma.BookingHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookingHistory>
          }
          groupBy: {
            args: Prisma.BookingHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookingHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<BookingHistoryCountAggregateOutputType> | number
          }
        }
      }
      PaymentInfo: {
        payload: Prisma.$PaymentInfoPayload<ExtArgs>
        fields: Prisma.PaymentInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          findFirst: {
            args: Prisma.PaymentInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          findMany: {
            args: Prisma.PaymentInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>[]
          }
          create: {
            args: Prisma.PaymentInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          createMany: {
            args: Prisma.PaymentInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>[]
          }
          delete: {
            args: Prisma.PaymentInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          update: {
            args: Prisma.PaymentInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          deleteMany: {
            args: Prisma.PaymentInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentInfoPayload>
          }
          aggregate: {
            args: Prisma.PaymentInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentInfo>
          }
          groupBy: {
            args: Prisma.PaymentInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentInfoCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentInfoCountAggregateOutputType> | number
          }
        }
      }
      PaymentTransaction: {
        payload: Prisma.$PaymentTransactionPayload<ExtArgs>
        fields: Prisma.PaymentTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findFirst: {
            args: Prisma.PaymentTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findMany: {
            args: Prisma.PaymentTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          create: {
            args: Prisma.PaymentTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          createMany: {
            args: Prisma.PaymentTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          delete: {
            args: Prisma.PaymentTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          update: {
            args: Prisma.PaymentTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          aggregate: {
            args: Prisma.PaymentTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentTransaction>
          }
          groupBy: {
            args: Prisma.PaymentTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionCountAggregateOutputType> | number
          }
        }
      }
      Preferences: {
        payload: Prisma.$PreferencesPayload<ExtArgs>
        fields: Prisma.PreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          findFirst: {
            args: Prisma.PreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          findMany: {
            args: Prisma.PreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>[]
          }
          create: {
            args: Prisma.PreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          createMany: {
            args: Prisma.PreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>[]
          }
          delete: {
            args: Prisma.PreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          update: {
            args: Prisma.PreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          deleteMany: {
            args: Prisma.PreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferencesPayload>
          }
          aggregate: {
            args: Prisma.PreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreferences>
          }
          groupBy: {
            args: Prisma.PreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<PreferencesCountAggregateOutputType> | number
          }
        }
      }
      UserPreferences: {
        payload: Prisma.$UserPreferencesPayload<ExtArgs>
        fields: Prisma.UserPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findFirst: {
            args: Prisma.UserPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findMany: {
            args: Prisma.UserPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          create: {
            args: Prisma.UserPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          createMany: {
            args: Prisma.UserPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          delete: {
            args: Prisma.UserPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          update: {
            args: Prisma.UserPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.UserPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          aggregate: {
            args: Prisma.UserPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreferences>
          }
          groupBy: {
            args: Prisma.UserPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    booking_histories: number
    event_bookings: number
    payment_info: number
    payment_transactions: number
    user_preferences: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking_histories?: boolean | UserCountOutputTypeCountBooking_historiesArgs
    event_bookings?: boolean | UserCountOutputTypeCountEvent_bookingsArgs
    payment_info?: boolean | UserCountOutputTypeCountPayment_infoArgs
    payment_transactions?: boolean | UserCountOutputTypeCountPayment_transactionsArgs
    user_preferences?: boolean | UserCountOutputTypeCountUser_preferencesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBooking_historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEvent_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventBookingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPayment_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInfoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPayment_transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUser_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
  }


  /**
   * Count Type EventOrganizerCountOutputType
   */

  export type EventOrganizerCountOutputType = {
    events: number
  }

  export type EventOrganizerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventOrganizerCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * EventOrganizerCountOutputType without action
   */
  export type EventOrganizerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerCountOutputType
     */
    select?: EventOrganizerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventOrganizerCountOutputType without action
   */
  export type EventOrganizerCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    events: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | LocationCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    booking_histories: number
    event_bookings: number
    seats_inventory: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking_histories?: boolean | EventCountOutputTypeCountBooking_historiesArgs
    event_bookings?: boolean | EventCountOutputTypeCountEvent_bookingsArgs
    seats_inventory?: boolean | EventCountOutputTypeCountSeats_inventoryArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountBooking_historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingHistoryWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountEvent_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventBookingWhereInput
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountSeats_inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatsInventoryWhereInput
  }


  /**
   * Count Type SeatsInventoryCountOutputType
   */

  export type SeatsInventoryCountOutputType = {
    event_bookings: number
  }

  export type SeatsInventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event_bookings?: boolean | SeatsInventoryCountOutputTypeCountEvent_bookingsArgs
  }

  // Custom InputTypes
  /**
   * SeatsInventoryCountOutputType without action
   */
  export type SeatsInventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventoryCountOutputType
     */
    select?: SeatsInventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeatsInventoryCountOutputType without action
   */
  export type SeatsInventoryCountOutputTypeCountEvent_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventBookingWhereInput
  }


  /**
   * Count Type EventBookingCountOutputType
   */

  export type EventBookingCountOutputType = {
    payment_transaction: number
  }

  export type EventBookingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_transaction?: boolean | EventBookingCountOutputTypeCountPayment_transactionArgs
  }

  // Custom InputTypes
  /**
   * EventBookingCountOutputType without action
   */
  export type EventBookingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBookingCountOutputType
     */
    select?: EventBookingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventBookingCountOutputType without action
   */
  export type EventBookingCountOutputTypeCountPayment_transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }


  /**
   * Count Type PaymentInfoCountOutputType
   */

  export type PaymentInfoCountOutputType = {
    payment_transactions: number
  }

  export type PaymentInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_transactions?: boolean | PaymentInfoCountOutputTypeCountPayment_transactionsArgs
  }

  // Custom InputTypes
  /**
   * PaymentInfoCountOutputType without action
   */
  export type PaymentInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfoCountOutputType
     */
    select?: PaymentInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentInfoCountOutputType without action
   */
  export type PaymentInfoCountOutputTypeCountPayment_transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }


  /**
   * Count Type PreferencesCountOutputType
   */

  export type PreferencesCountOutputType = {
    user_preferences: number
  }

  export type PreferencesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_preferences?: boolean | PreferencesCountOutputTypeCountUser_preferencesArgs
  }

  // Custom InputTypes
  /**
   * PreferencesCountOutputType without action
   */
  export type PreferencesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferencesCountOutputType
     */
    select?: PreferencesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PreferencesCountOutputType without action
   */
  export type PreferencesCountOutputTypeCountUser_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    account_status: $Enums.AccountStatus | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    account_status: $Enums.AccountStatus | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    first_name: number
    last_name: number
    email: number
    createdAt: number
    updatedAt: number
    account_status: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    account_status?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    account_status?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    account_status?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    first_name: string
    last_name: string
    email: string
    createdAt: Date
    updatedAt: Date
    account_status: $Enums.AccountStatus
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account_status?: boolean
    password?: boolean
    booking_histories?: boolean | User$booking_historiesArgs<ExtArgs>
    event_bookings?: boolean | User$event_bookingsArgs<ExtArgs>
    payment_info?: boolean | User$payment_infoArgs<ExtArgs>
    payment_transactions?: boolean | User$payment_transactionsArgs<ExtArgs>
    user_preferences?: boolean | User$user_preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account_status?: boolean
    password?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account_status?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking_histories?: boolean | User$booking_historiesArgs<ExtArgs>
    event_bookings?: boolean | User$event_bookingsArgs<ExtArgs>
    payment_info?: boolean | User$payment_infoArgs<ExtArgs>
    payment_transactions?: boolean | User$payment_transactionsArgs<ExtArgs>
    user_preferences?: boolean | User$user_preferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      booking_histories: Prisma.$BookingHistoryPayload<ExtArgs>[]
      event_bookings: Prisma.$EventBookingPayload<ExtArgs>[]
      payment_info: Prisma.$PaymentInfoPayload<ExtArgs>[]
      payment_transactions: Prisma.$PaymentTransactionPayload<ExtArgs>[]
      user_preferences: Prisma.$UserPreferencesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      first_name: string
      last_name: string
      email: string
      createdAt: Date
      updatedAt: Date
      account_status: $Enums.AccountStatus
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.createManyAndReturn({ 
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking_histories<T extends User$booking_historiesArgs<ExtArgs> = {}>(args?: Subset<T, User$booking_historiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    event_bookings<T extends User$event_bookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$event_bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findMany"> | Null>
    payment_info<T extends User$payment_infoArgs<ExtArgs> = {}>(args?: Subset<T, User$payment_infoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findMany"> | Null>
    payment_transactions<T extends User$payment_transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$payment_transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    user_preferences<T extends User$user_preferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$user_preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'String'>
    readonly first_name: FieldRef<"User", 'String'>
    readonly last_name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly account_status: FieldRef<"User", 'AccountStatus'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.booking_histories
   */
  export type User$booking_historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    where?: BookingHistoryWhereInput
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    cursor?: BookingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingHistoryScalarFieldEnum | BookingHistoryScalarFieldEnum[]
  }

  /**
   * User.event_bookings
   */
  export type User$event_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    where?: EventBookingWhereInput
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    cursor?: EventBookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * User.payment_info
   */
  export type User$payment_infoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    where?: PaymentInfoWhereInput
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    cursor?: PaymentInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * User.payment_transactions
   */
  export type User$payment_transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * User.user_preferences
   */
  export type User$user_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    cursor?: UserPreferencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizer
   */

  export type AggregateEventOrganizer = {
    _count: EventOrganizerCountAggregateOutputType | null
    _min: EventOrganizerMinAggregateOutputType | null
    _max: EventOrganizerMaxAggregateOutputType | null
  }

  export type EventOrganizerMinAggregateOutputType = {
    organizer_id: string | null
    organizer_name: string | null
    organizer_email: string | null
    contact_number: string | null
    gst_number: string | null
    legal_status: $Enums.LegalStatus | null
    approval_date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
  }

  export type EventOrganizerMaxAggregateOutputType = {
    organizer_id: string | null
    organizer_name: string | null
    organizer_email: string | null
    contact_number: string | null
    gst_number: string | null
    legal_status: $Enums.LegalStatus | null
    approval_date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    password: string | null
  }

  export type EventOrganizerCountAggregateOutputType = {
    organizer_id: number
    organizer_name: number
    organizer_email: number
    contact_number: number
    gst_number: number
    legal_status: number
    approval_date: number
    createdAt: number
    updatedAt: number
    password: number
    _all: number
  }


  export type EventOrganizerMinAggregateInputType = {
    organizer_id?: true
    organizer_name?: true
    organizer_email?: true
    contact_number?: true
    gst_number?: true
    legal_status?: true
    approval_date?: true
    createdAt?: true
    updatedAt?: true
    password?: true
  }

  export type EventOrganizerMaxAggregateInputType = {
    organizer_id?: true
    organizer_name?: true
    organizer_email?: true
    contact_number?: true
    gst_number?: true
    legal_status?: true
    approval_date?: true
    createdAt?: true
    updatedAt?: true
    password?: true
  }

  export type EventOrganizerCountAggregateInputType = {
    organizer_id?: true
    organizer_name?: true
    organizer_email?: true
    contact_number?: true
    gst_number?: true
    legal_status?: true
    approval_date?: true
    createdAt?: true
    updatedAt?: true
    password?: true
    _all?: true
  }

  export type EventOrganizerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizer to aggregate.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizers
    **/
    _count?: true | EventOrganizerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerMaxAggregateInputType
  }

  export type GetEventOrganizerAggregateType<T extends EventOrganizerAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizer[P]>
      : GetScalarType<T[P], AggregateEventOrganizer[P]>
  }




  export type EventOrganizerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerWhereInput
    orderBy?: EventOrganizerOrderByWithAggregationInput | EventOrganizerOrderByWithAggregationInput[]
    by: EventOrganizerScalarFieldEnum[] | EventOrganizerScalarFieldEnum
    having?: EventOrganizerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerCountAggregateInputType | true
    _min?: EventOrganizerMinAggregateInputType
    _max?: EventOrganizerMaxAggregateInputType
  }

  export type EventOrganizerGroupByOutputType = {
    organizer_id: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date: Date | null
    createdAt: Date
    updatedAt: Date
    password: string
    _count: EventOrganizerCountAggregateOutputType | null
    _min: EventOrganizerMinAggregateOutputType | null
    _max: EventOrganizerMaxAggregateOutputType | null
  }

  type GetEventOrganizerGroupByPayload<T extends EventOrganizerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_email?: boolean
    contact_number?: boolean
    gst_number?: boolean
    legal_status?: boolean
    approval_date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
    events?: boolean | EventOrganizer$eventsArgs<ExtArgs>
    _count?: boolean | EventOrganizerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizer"]>

  export type EventOrganizerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_email?: boolean
    contact_number?: boolean
    gst_number?: boolean
    legal_status?: boolean
    approval_date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
  }, ExtArgs["result"]["eventOrganizer"]>

  export type EventOrganizerSelectScalar = {
    organizer_id?: boolean
    organizer_name?: boolean
    organizer_email?: boolean
    contact_number?: boolean
    gst_number?: boolean
    legal_status?: boolean
    approval_date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    password?: boolean
  }

  export type EventOrganizerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventOrganizer$eventsArgs<ExtArgs>
    _count?: boolean | EventOrganizerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventOrganizerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventOrganizerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizer"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      organizer_id: string
      organizer_name: string
      organizer_email: string
      contact_number: string
      gst_number: string
      legal_status: $Enums.LegalStatus
      approval_date: Date | null
      createdAt: Date
      updatedAt: Date
      password: string
    }, ExtArgs["result"]["eventOrganizer"]>
    composites: {}
  }

  type EventOrganizerGetPayload<S extends boolean | null | undefined | EventOrganizerDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerPayload, S>

  type EventOrganizerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventOrganizerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventOrganizerCountAggregateInputType | true
    }

  export interface EventOrganizerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizer'], meta: { name: 'EventOrganizer' } }
    /**
     * Find zero or one EventOrganizer that matches the filter.
     * @param {EventOrganizerFindUniqueArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerFindUniqueArgs>(args: SelectSubset<T, EventOrganizerFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventOrganizer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventOrganizerFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventOrganizer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindFirstArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerFindFirstArgs>(args?: SelectSubset<T, EventOrganizerFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventOrganizer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindFirstOrThrowArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventOrganizers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizers
     * const eventOrganizers = await prisma.eventOrganizer.findMany()
     * 
     * // Get first 10 EventOrganizers
     * const eventOrganizers = await prisma.eventOrganizer.findMany({ take: 10 })
     * 
     * // Only select the `organizer_id`
     * const eventOrganizerWithOrganizer_idOnly = await prisma.eventOrganizer.findMany({ select: { organizer_id: true } })
     * 
     */
    findMany<T extends EventOrganizerFindManyArgs>(args?: SelectSubset<T, EventOrganizerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventOrganizer.
     * @param {EventOrganizerCreateArgs} args - Arguments to create a EventOrganizer.
     * @example
     * // Create one EventOrganizer
     * const EventOrganizer = await prisma.eventOrganizer.create({
     *   data: {
     *     // ... data to create a EventOrganizer
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerCreateArgs>(args: SelectSubset<T, EventOrganizerCreateArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventOrganizers.
     * @param {EventOrganizerCreateManyArgs} args - Arguments to create many EventOrganizers.
     * @example
     * // Create many EventOrganizers
     * const eventOrganizer = await prisma.eventOrganizer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerCreateManyArgs>(args?: SelectSubset<T, EventOrganizerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventOrganizers and returns the data saved in the database.
     * @param {EventOrganizerCreateManyAndReturnArgs} args - Arguments to create many EventOrganizers.
     * @example
     * // Create many EventOrganizers
     * const eventOrganizer = await prisma.eventOrganizer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventOrganizers and only return the `organizer_id`
     * const eventOrganizerWithOrganizer_idOnly = await prisma.eventOrganizer.createManyAndReturn({ 
     *   select: { organizer_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventOrganizerCreateManyAndReturnArgs>(args?: SelectSubset<T, EventOrganizerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventOrganizer.
     * @param {EventOrganizerDeleteArgs} args - Arguments to delete one EventOrganizer.
     * @example
     * // Delete one EventOrganizer
     * const EventOrganizer = await prisma.eventOrganizer.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizer
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerDeleteArgs>(args: SelectSubset<T, EventOrganizerDeleteArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventOrganizer.
     * @param {EventOrganizerUpdateArgs} args - Arguments to update one EventOrganizer.
     * @example
     * // Update one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerUpdateArgs>(args: SelectSubset<T, EventOrganizerUpdateArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventOrganizers.
     * @param {EventOrganizerDeleteManyArgs} args - Arguments to filter EventOrganizers to delete.
     * @example
     * // Delete a few EventOrganizers
     * const { count } = await prisma.eventOrganizer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizers
     * const eventOrganizer = await prisma.eventOrganizer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerUpdateManyArgs>(args: SelectSubset<T, EventOrganizerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventOrganizer.
     * @param {EventOrganizerUpsertArgs} args - Arguments to update or create a EventOrganizer.
     * @example
     * // Update or create a EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.upsert({
     *   create: {
     *     // ... data to create a EventOrganizer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizer we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerUpsertArgs>(args: SelectSubset<T, EventOrganizerUpsertArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventOrganizers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerCountArgs} args - Arguments to filter EventOrganizers to count.
     * @example
     * // Count the number of EventOrganizers
     * const count = await prisma.eventOrganizer.count({
     *   where: {
     *     // ... the filter for the EventOrganizers we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerCountArgs>(
      args?: Subset<T, EventOrganizerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerAggregateArgs>(args: Subset<T, EventOrganizerAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerAggregateType<T>>

    /**
     * Group by EventOrganizer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizer model
   */
  readonly fields: EventOrganizerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends EventOrganizer$eventsArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizer$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizer model
   */ 
  interface EventOrganizerFieldRefs {
    readonly organizer_id: FieldRef<"EventOrganizer", 'String'>
    readonly organizer_name: FieldRef<"EventOrganizer", 'String'>
    readonly organizer_email: FieldRef<"EventOrganizer", 'String'>
    readonly contact_number: FieldRef<"EventOrganizer", 'String'>
    readonly gst_number: FieldRef<"EventOrganizer", 'String'>
    readonly legal_status: FieldRef<"EventOrganizer", 'LegalStatus'>
    readonly approval_date: FieldRef<"EventOrganizer", 'DateTime'>
    readonly createdAt: FieldRef<"EventOrganizer", 'DateTime'>
    readonly updatedAt: FieldRef<"EventOrganizer", 'DateTime'>
    readonly password: FieldRef<"EventOrganizer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizer findUnique
   */
  export type EventOrganizerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer findUniqueOrThrow
   */
  export type EventOrganizerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer findFirst
   */
  export type EventOrganizerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizers.
     */
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer findFirstOrThrow
   */
  export type EventOrganizerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizers.
     */
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer findMany
   */
  export type EventOrganizerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizers to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer create
   */
  export type EventOrganizerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizer.
     */
    data: XOR<EventOrganizerCreateInput, EventOrganizerUncheckedCreateInput>
  }

  /**
   * EventOrganizer createMany
   */
  export type EventOrganizerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizers.
     */
    data: EventOrganizerCreateManyInput | EventOrganizerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizer createManyAndReturn
   */
  export type EventOrganizerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventOrganizers.
     */
    data: EventOrganizerCreateManyInput | EventOrganizerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizer update
   */
  export type EventOrganizerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizer.
     */
    data: XOR<EventOrganizerUpdateInput, EventOrganizerUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizer to update.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer updateMany
   */
  export type EventOrganizerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizers.
     */
    data: XOR<EventOrganizerUpdateManyMutationInput, EventOrganizerUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizers to update
     */
    where?: EventOrganizerWhereInput
  }

  /**
   * EventOrganizer upsert
   */
  export type EventOrganizerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizer to update in case it exists.
     */
    where: EventOrganizerWhereUniqueInput
    /**
     * In case the EventOrganizer found by the `where` argument doesn't exist, create a new EventOrganizer with this data.
     */
    create: XOR<EventOrganizerCreateInput, EventOrganizerUncheckedCreateInput>
    /**
     * In case the EventOrganizer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerUpdateInput, EventOrganizerUncheckedUpdateInput>
  }

  /**
   * EventOrganizer delete
   */
  export type EventOrganizerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizer to delete.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer deleteMany
   */
  export type EventOrganizerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizers to delete
     */
    where?: EventOrganizerWhereInput
  }

  /**
   * EventOrganizer.events
   */
  export type EventOrganizer$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * EventOrganizer without action
   */
  export type EventOrganizerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationSumAggregateOutputType = {
    latitude: number | null
    longitude: number | null
  }

  export type LocationMinAggregateOutputType = {
    location_id: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    zip_code: string | null
    timezone: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationMaxAggregateOutputType = {
    location_id: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    zip_code: string | null
    timezone: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LocationCountAggregateOutputType = {
    location_id: number
    address: number
    city: number
    state: number
    country: number
    zip_code: number
    timezone: number
    latitude: number
    longitude: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationSumAggregateInputType = {
    latitude?: true
    longitude?: true
  }

  export type LocationMinAggregateInputType = {
    location_id?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip_code?: true
    timezone?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationMaxAggregateInputType = {
    location_id?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip_code?: true
    timezone?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LocationCountAggregateInputType = {
    location_id?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip_code?: true
    timezone?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    location_id: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt: Date
    updatedAt: Date
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    location_id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zip_code?: boolean
    timezone?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    events?: boolean | Location$eventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    location_id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zip_code?: boolean
    timezone?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    location_id?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zip_code?: boolean
    timezone?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Location$eventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      events: Prisma.$EventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      location_id: string
      address: string
      city: string
      state: string
      country: string
      zip_code: string
      timezone: string
      latitude: number
      longitude: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `location_id`
     * const locationWithLocation_idOnly = await prisma.location.findMany({ select: { location_id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `location_id`
     * const locationWithLocation_idOnly = await prisma.location.createManyAndReturn({ 
     *   select: { location_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Location$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Location$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly location_id: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly city: FieldRef<"Location", 'String'>
    readonly state: FieldRef<"Location", 'String'>
    readonly country: FieldRef<"Location", 'String'>
    readonly zip_code: FieldRef<"Location", 'String'>
    readonly timezone: FieldRef<"Location", 'String'>
    readonly latitude: FieldRef<"Location", 'Float'>
    readonly longitude: FieldRef<"Location", 'Float'>
    readonly createdAt: FieldRef<"Location", 'DateTime'>
    readonly updatedAt: FieldRef<"Location", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.events
   */
  export type Location$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    ticket_limit: number | null
  }

  export type EventSumAggregateOutputType = {
    ticket_limit: number | null
  }

  export type EventMinAggregateOutputType = {
    event_id: string | null
    organizer_id: string | null
    event_name: string | null
    description: string | null
    event_type: $Enums.EventType | null
    start_date: Date | null
    end_date: Date | null
    location_id: string | null
    status: $Enums.EventStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    ticket_limit: number | null
  }

  export type EventMaxAggregateOutputType = {
    event_id: string | null
    organizer_id: string | null
    event_name: string | null
    description: string | null
    event_type: $Enums.EventType | null
    start_date: Date | null
    end_date: Date | null
    location_id: string | null
    status: $Enums.EventStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    ticket_limit: number | null
  }

  export type EventCountAggregateOutputType = {
    event_id: number
    organizer_id: number
    event_name: number
    description: number
    event_type: number
    start_date: number
    end_date: number
    location_id: number
    status: number
    createdAt: number
    updatedAt: number
    ticket_limit: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    ticket_limit?: true
  }

  export type EventSumAggregateInputType = {
    ticket_limit?: true
  }

  export type EventMinAggregateInputType = {
    event_id?: true
    organizer_id?: true
    event_name?: true
    description?: true
    event_type?: true
    start_date?: true
    end_date?: true
    location_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    ticket_limit?: true
  }

  export type EventMaxAggregateInputType = {
    event_id?: true
    organizer_id?: true
    event_name?: true
    description?: true
    event_type?: true
    start_date?: true
    end_date?: true
    location_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    ticket_limit?: true
  }

  export type EventCountAggregateInputType = {
    event_id?: true
    organizer_id?: true
    event_name?: true
    description?: true
    event_type?: true
    start_date?: true
    end_date?: true
    location_id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    ticket_limit?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    event_id: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date
    end_date: Date
    location_id: string
    status: $Enums.EventStatus
    createdAt: Date
    updatedAt: Date
    ticket_limit: number | null
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_id?: boolean
    organizer_id?: boolean
    event_name?: boolean
    description?: boolean
    event_type?: boolean
    start_date?: boolean
    end_date?: boolean
    location_id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ticket_limit?: boolean
    booking_histories?: boolean | Event$booking_historiesArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
    event_bookings?: boolean | Event$event_bookingsArgs<ExtArgs>
    seats_inventory?: boolean | Event$seats_inventoryArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_id?: boolean
    organizer_id?: boolean
    event_name?: boolean
    description?: boolean
    event_type?: boolean
    start_date?: boolean
    end_date?: boolean
    location_id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ticket_limit?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    event_id?: boolean
    organizer_id?: boolean
    event_name?: boolean
    description?: boolean
    event_type?: boolean
    start_date?: boolean
    end_date?: boolean
    location_id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ticket_limit?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking_histories?: boolean | Event$booking_historiesArgs<ExtArgs>
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
    event_bookings?: boolean | Event$event_bookingsArgs<ExtArgs>
    seats_inventory?: boolean | Event$seats_inventoryArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    organizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      booking_histories: Prisma.$BookingHistoryPayload<ExtArgs>[]
      location: Prisma.$LocationPayload<ExtArgs>
      organizer: Prisma.$EventOrganizerPayload<ExtArgs>
      event_bookings: Prisma.$EventBookingPayload<ExtArgs>[]
      seats_inventory: Prisma.$SeatsInventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      event_id: string
      organizer_id: string
      event_name: string
      description: string
      event_type: $Enums.EventType
      start_date: Date
      end_date: Date
      location_id: string
      status: $Enums.EventStatus
      createdAt: Date
      updatedAt: Date
      ticket_limit: number | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `event_id`
     * const eventWithEvent_idOnly = await prisma.event.findMany({ select: { event_id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `event_id`
     * const eventWithEvent_idOnly = await prisma.event.createManyAndReturn({ 
     *   select: { event_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking_histories<T extends Event$booking_historiesArgs<ExtArgs> = {}>(args?: Subset<T, Event$booking_historiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    organizer<T extends EventOrganizerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerDefaultArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    event_bookings<T extends Event$event_bookingsArgs<ExtArgs> = {}>(args?: Subset<T, Event$event_bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findMany"> | Null>
    seats_inventory<T extends Event$seats_inventoryArgs<ExtArgs> = {}>(args?: Subset<T, Event$seats_inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly event_id: FieldRef<"Event", 'String'>
    readonly organizer_id: FieldRef<"Event", 'String'>
    readonly event_name: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly event_type: FieldRef<"Event", 'EventType'>
    readonly start_date: FieldRef<"Event", 'DateTime'>
    readonly end_date: FieldRef<"Event", 'DateTime'>
    readonly location_id: FieldRef<"Event", 'String'>
    readonly status: FieldRef<"Event", 'EventStatus'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly updatedAt: FieldRef<"Event", 'DateTime'>
    readonly ticket_limit: FieldRef<"Event", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.booking_histories
   */
  export type Event$booking_historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    where?: BookingHistoryWhereInput
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    cursor?: BookingHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingHistoryScalarFieldEnum | BookingHistoryScalarFieldEnum[]
  }

  /**
   * Event.event_bookings
   */
  export type Event$event_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    where?: EventBookingWhereInput
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    cursor?: EventBookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * Event.seats_inventory
   */
  export type Event$seats_inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    where?: SeatsInventoryWhereInput
    orderBy?: SeatsInventoryOrderByWithRelationInput | SeatsInventoryOrderByWithRelationInput[]
    cursor?: SeatsInventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeatsInventoryScalarFieldEnum | SeatsInventoryScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model SeatsInventory
   */

  export type AggregateSeatsInventory = {
    _count: SeatsInventoryCountAggregateOutputType | null
    _avg: SeatsInventoryAvgAggregateOutputType | null
    _sum: SeatsInventorySumAggregateOutputType | null
    _min: SeatsInventoryMinAggregateOutputType | null
    _max: SeatsInventoryMaxAggregateOutputType | null
  }

  export type SeatsInventoryAvgAggregateOutputType = {
    price: number | null
  }

  export type SeatsInventorySumAggregateOutputType = {
    price: number | null
  }

  export type SeatsInventoryMinAggregateOutputType = {
    seat_id: string | null
    event_id: string | null
    seat_number: string | null
    seat_type: $Enums.SeatType | null
    price: number | null
    seat_status: $Enums.SeatStatus | null
  }

  export type SeatsInventoryMaxAggregateOutputType = {
    seat_id: string | null
    event_id: string | null
    seat_number: string | null
    seat_type: $Enums.SeatType | null
    price: number | null
    seat_status: $Enums.SeatStatus | null
  }

  export type SeatsInventoryCountAggregateOutputType = {
    seat_id: number
    event_id: number
    seat_number: number
    seat_type: number
    price: number
    seat_status: number
    _all: number
  }


  export type SeatsInventoryAvgAggregateInputType = {
    price?: true
  }

  export type SeatsInventorySumAggregateInputType = {
    price?: true
  }

  export type SeatsInventoryMinAggregateInputType = {
    seat_id?: true
    event_id?: true
    seat_number?: true
    seat_type?: true
    price?: true
    seat_status?: true
  }

  export type SeatsInventoryMaxAggregateInputType = {
    seat_id?: true
    event_id?: true
    seat_number?: true
    seat_type?: true
    price?: true
    seat_status?: true
  }

  export type SeatsInventoryCountAggregateInputType = {
    seat_id?: true
    event_id?: true
    seat_number?: true
    seat_type?: true
    price?: true
    seat_status?: true
    _all?: true
  }

  export type SeatsInventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeatsInventory to aggregate.
     */
    where?: SeatsInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatsInventories to fetch.
     */
    orderBy?: SeatsInventoryOrderByWithRelationInput | SeatsInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeatsInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatsInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatsInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeatsInventories
    **/
    _count?: true | SeatsInventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeatsInventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeatsInventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeatsInventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeatsInventoryMaxAggregateInputType
  }

  export type GetSeatsInventoryAggregateType<T extends SeatsInventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateSeatsInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeatsInventory[P]>
      : GetScalarType<T[P], AggregateSeatsInventory[P]>
  }




  export type SeatsInventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeatsInventoryWhereInput
    orderBy?: SeatsInventoryOrderByWithAggregationInput | SeatsInventoryOrderByWithAggregationInput[]
    by: SeatsInventoryScalarFieldEnum[] | SeatsInventoryScalarFieldEnum
    having?: SeatsInventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeatsInventoryCountAggregateInputType | true
    _avg?: SeatsInventoryAvgAggregateInputType
    _sum?: SeatsInventorySumAggregateInputType
    _min?: SeatsInventoryMinAggregateInputType
    _max?: SeatsInventoryMaxAggregateInputType
  }

  export type SeatsInventoryGroupByOutputType = {
    seat_id: string
    event_id: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    _count: SeatsInventoryCountAggregateOutputType | null
    _avg: SeatsInventoryAvgAggregateOutputType | null
    _sum: SeatsInventorySumAggregateOutputType | null
    _min: SeatsInventoryMinAggregateOutputType | null
    _max: SeatsInventoryMaxAggregateOutputType | null
  }

  type GetSeatsInventoryGroupByPayload<T extends SeatsInventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeatsInventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeatsInventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeatsInventoryGroupByOutputType[P]>
            : GetScalarType<T[P], SeatsInventoryGroupByOutputType[P]>
        }
      >
    >


  export type SeatsInventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    seat_id?: boolean
    event_id?: boolean
    seat_number?: boolean
    seat_type?: boolean
    price?: boolean
    seat_status?: boolean
    event_bookings?: boolean | SeatsInventory$event_bookingsArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    _count?: boolean | SeatsInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatsInventory"]>

  export type SeatsInventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    seat_id?: boolean
    event_id?: boolean
    seat_number?: boolean
    seat_type?: boolean
    price?: boolean
    seat_status?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seatsInventory"]>

  export type SeatsInventorySelectScalar = {
    seat_id?: boolean
    event_id?: boolean
    seat_number?: boolean
    seat_type?: boolean
    price?: boolean
    seat_status?: boolean
  }

  export type SeatsInventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event_bookings?: boolean | SeatsInventory$event_bookingsArgs<ExtArgs>
    event?: boolean | EventDefaultArgs<ExtArgs>
    _count?: boolean | SeatsInventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeatsInventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
  }

  export type $SeatsInventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeatsInventory"
    objects: {
      event_bookings: Prisma.$EventBookingPayload<ExtArgs>[]
      event: Prisma.$EventPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      seat_id: string
      event_id: string
      seat_number: string
      seat_type: $Enums.SeatType
      price: number
      seat_status: $Enums.SeatStatus
    }, ExtArgs["result"]["seatsInventory"]>
    composites: {}
  }

  type SeatsInventoryGetPayload<S extends boolean | null | undefined | SeatsInventoryDefaultArgs> = $Result.GetResult<Prisma.$SeatsInventoryPayload, S>

  type SeatsInventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeatsInventoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeatsInventoryCountAggregateInputType | true
    }

  export interface SeatsInventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeatsInventory'], meta: { name: 'SeatsInventory' } }
    /**
     * Find zero or one SeatsInventory that matches the filter.
     * @param {SeatsInventoryFindUniqueArgs} args - Arguments to find a SeatsInventory
     * @example
     * // Get one SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeatsInventoryFindUniqueArgs>(args: SelectSubset<T, SeatsInventoryFindUniqueArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeatsInventory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeatsInventoryFindUniqueOrThrowArgs} args - Arguments to find a SeatsInventory
     * @example
     * // Get one SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeatsInventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, SeatsInventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeatsInventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryFindFirstArgs} args - Arguments to find a SeatsInventory
     * @example
     * // Get one SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeatsInventoryFindFirstArgs>(args?: SelectSubset<T, SeatsInventoryFindFirstArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeatsInventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryFindFirstOrThrowArgs} args - Arguments to find a SeatsInventory
     * @example
     * // Get one SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeatsInventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, SeatsInventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeatsInventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeatsInventories
     * const seatsInventories = await prisma.seatsInventory.findMany()
     * 
     * // Get first 10 SeatsInventories
     * const seatsInventories = await prisma.seatsInventory.findMany({ take: 10 })
     * 
     * // Only select the `seat_id`
     * const seatsInventoryWithSeat_idOnly = await prisma.seatsInventory.findMany({ select: { seat_id: true } })
     * 
     */
    findMany<T extends SeatsInventoryFindManyArgs>(args?: SelectSubset<T, SeatsInventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeatsInventory.
     * @param {SeatsInventoryCreateArgs} args - Arguments to create a SeatsInventory.
     * @example
     * // Create one SeatsInventory
     * const SeatsInventory = await prisma.seatsInventory.create({
     *   data: {
     *     // ... data to create a SeatsInventory
     *   }
     * })
     * 
     */
    create<T extends SeatsInventoryCreateArgs>(args: SelectSubset<T, SeatsInventoryCreateArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeatsInventories.
     * @param {SeatsInventoryCreateManyArgs} args - Arguments to create many SeatsInventories.
     * @example
     * // Create many SeatsInventories
     * const seatsInventory = await prisma.seatsInventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeatsInventoryCreateManyArgs>(args?: SelectSubset<T, SeatsInventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeatsInventories and returns the data saved in the database.
     * @param {SeatsInventoryCreateManyAndReturnArgs} args - Arguments to create many SeatsInventories.
     * @example
     * // Create many SeatsInventories
     * const seatsInventory = await prisma.seatsInventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeatsInventories and only return the `seat_id`
     * const seatsInventoryWithSeat_idOnly = await prisma.seatsInventory.createManyAndReturn({ 
     *   select: { seat_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeatsInventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, SeatsInventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeatsInventory.
     * @param {SeatsInventoryDeleteArgs} args - Arguments to delete one SeatsInventory.
     * @example
     * // Delete one SeatsInventory
     * const SeatsInventory = await prisma.seatsInventory.delete({
     *   where: {
     *     // ... filter to delete one SeatsInventory
     *   }
     * })
     * 
     */
    delete<T extends SeatsInventoryDeleteArgs>(args: SelectSubset<T, SeatsInventoryDeleteArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeatsInventory.
     * @param {SeatsInventoryUpdateArgs} args - Arguments to update one SeatsInventory.
     * @example
     * // Update one SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeatsInventoryUpdateArgs>(args: SelectSubset<T, SeatsInventoryUpdateArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeatsInventories.
     * @param {SeatsInventoryDeleteManyArgs} args - Arguments to filter SeatsInventories to delete.
     * @example
     * // Delete a few SeatsInventories
     * const { count } = await prisma.seatsInventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeatsInventoryDeleteManyArgs>(args?: SelectSubset<T, SeatsInventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeatsInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeatsInventories
     * const seatsInventory = await prisma.seatsInventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeatsInventoryUpdateManyArgs>(args: SelectSubset<T, SeatsInventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeatsInventory.
     * @param {SeatsInventoryUpsertArgs} args - Arguments to update or create a SeatsInventory.
     * @example
     * // Update or create a SeatsInventory
     * const seatsInventory = await prisma.seatsInventory.upsert({
     *   create: {
     *     // ... data to create a SeatsInventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeatsInventory we want to update
     *   }
     * })
     */
    upsert<T extends SeatsInventoryUpsertArgs>(args: SelectSubset<T, SeatsInventoryUpsertArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeatsInventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryCountArgs} args - Arguments to filter SeatsInventories to count.
     * @example
     * // Count the number of SeatsInventories
     * const count = await prisma.seatsInventory.count({
     *   where: {
     *     // ... the filter for the SeatsInventories we want to count
     *   }
     * })
    **/
    count<T extends SeatsInventoryCountArgs>(
      args?: Subset<T, SeatsInventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeatsInventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeatsInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeatsInventoryAggregateArgs>(args: Subset<T, SeatsInventoryAggregateArgs>): Prisma.PrismaPromise<GetSeatsInventoryAggregateType<T>>

    /**
     * Group by SeatsInventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeatsInventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeatsInventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeatsInventoryGroupByArgs['orderBy'] }
        : { orderBy?: SeatsInventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeatsInventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeatsInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeatsInventory model
   */
  readonly fields: SeatsInventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeatsInventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeatsInventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event_bookings<T extends SeatsInventory$event_bookingsArgs<ExtArgs> = {}>(args?: Subset<T, SeatsInventory$event_bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findMany"> | Null>
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeatsInventory model
   */ 
  interface SeatsInventoryFieldRefs {
    readonly seat_id: FieldRef<"SeatsInventory", 'String'>
    readonly event_id: FieldRef<"SeatsInventory", 'String'>
    readonly seat_number: FieldRef<"SeatsInventory", 'String'>
    readonly seat_type: FieldRef<"SeatsInventory", 'SeatType'>
    readonly price: FieldRef<"SeatsInventory", 'Float'>
    readonly seat_status: FieldRef<"SeatsInventory", 'SeatStatus'>
  }
    

  // Custom InputTypes
  /**
   * SeatsInventory findUnique
   */
  export type SeatsInventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter, which SeatsInventory to fetch.
     */
    where: SeatsInventoryWhereUniqueInput
  }

  /**
   * SeatsInventory findUniqueOrThrow
   */
  export type SeatsInventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter, which SeatsInventory to fetch.
     */
    where: SeatsInventoryWhereUniqueInput
  }

  /**
   * SeatsInventory findFirst
   */
  export type SeatsInventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter, which SeatsInventory to fetch.
     */
    where?: SeatsInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatsInventories to fetch.
     */
    orderBy?: SeatsInventoryOrderByWithRelationInput | SeatsInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeatsInventories.
     */
    cursor?: SeatsInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatsInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatsInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeatsInventories.
     */
    distinct?: SeatsInventoryScalarFieldEnum | SeatsInventoryScalarFieldEnum[]
  }

  /**
   * SeatsInventory findFirstOrThrow
   */
  export type SeatsInventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter, which SeatsInventory to fetch.
     */
    where?: SeatsInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatsInventories to fetch.
     */
    orderBy?: SeatsInventoryOrderByWithRelationInput | SeatsInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeatsInventories.
     */
    cursor?: SeatsInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatsInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatsInventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeatsInventories.
     */
    distinct?: SeatsInventoryScalarFieldEnum | SeatsInventoryScalarFieldEnum[]
  }

  /**
   * SeatsInventory findMany
   */
  export type SeatsInventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter, which SeatsInventories to fetch.
     */
    where?: SeatsInventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeatsInventories to fetch.
     */
    orderBy?: SeatsInventoryOrderByWithRelationInput | SeatsInventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeatsInventories.
     */
    cursor?: SeatsInventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeatsInventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeatsInventories.
     */
    skip?: number
    distinct?: SeatsInventoryScalarFieldEnum | SeatsInventoryScalarFieldEnum[]
  }

  /**
   * SeatsInventory create
   */
  export type SeatsInventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a SeatsInventory.
     */
    data: XOR<SeatsInventoryCreateInput, SeatsInventoryUncheckedCreateInput>
  }

  /**
   * SeatsInventory createMany
   */
  export type SeatsInventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeatsInventories.
     */
    data: SeatsInventoryCreateManyInput | SeatsInventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeatsInventory createManyAndReturn
   */
  export type SeatsInventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeatsInventories.
     */
    data: SeatsInventoryCreateManyInput | SeatsInventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeatsInventory update
   */
  export type SeatsInventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a SeatsInventory.
     */
    data: XOR<SeatsInventoryUpdateInput, SeatsInventoryUncheckedUpdateInput>
    /**
     * Choose, which SeatsInventory to update.
     */
    where: SeatsInventoryWhereUniqueInput
  }

  /**
   * SeatsInventory updateMany
   */
  export type SeatsInventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeatsInventories.
     */
    data: XOR<SeatsInventoryUpdateManyMutationInput, SeatsInventoryUncheckedUpdateManyInput>
    /**
     * Filter which SeatsInventories to update
     */
    where?: SeatsInventoryWhereInput
  }

  /**
   * SeatsInventory upsert
   */
  export type SeatsInventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the SeatsInventory to update in case it exists.
     */
    where: SeatsInventoryWhereUniqueInput
    /**
     * In case the SeatsInventory found by the `where` argument doesn't exist, create a new SeatsInventory with this data.
     */
    create: XOR<SeatsInventoryCreateInput, SeatsInventoryUncheckedCreateInput>
    /**
     * In case the SeatsInventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeatsInventoryUpdateInput, SeatsInventoryUncheckedUpdateInput>
  }

  /**
   * SeatsInventory delete
   */
  export type SeatsInventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
    /**
     * Filter which SeatsInventory to delete.
     */
    where: SeatsInventoryWhereUniqueInput
  }

  /**
   * SeatsInventory deleteMany
   */
  export type SeatsInventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeatsInventories to delete
     */
    where?: SeatsInventoryWhereInput
  }

  /**
   * SeatsInventory.event_bookings
   */
  export type SeatsInventory$event_bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    where?: EventBookingWhereInput
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    cursor?: EventBookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * SeatsInventory without action
   */
  export type SeatsInventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeatsInventory
     */
    select?: SeatsInventorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeatsInventoryInclude<ExtArgs> | null
  }


  /**
   * Model EventBooking
   */

  export type AggregateEventBooking = {
    _count: EventBookingCountAggregateOutputType | null
    _avg: EventBookingAvgAggregateOutputType | null
    _sum: EventBookingSumAggregateOutputType | null
    _min: EventBookingMinAggregateOutputType | null
    _max: EventBookingMaxAggregateOutputType | null
  }

  export type EventBookingAvgAggregateOutputType = {
    amount_paid: number | null
  }

  export type EventBookingSumAggregateOutputType = {
    amount_paid: number | null
  }

  export type EventBookingMinAggregateOutputType = {
    event_booking_id: string | null
    event_id: string | null
    user_id: string | null
    seat_id: string | null
    booking_date: Date | null
    amount_paid: number | null
    cancellation_date: Date | null
    createdAt: Date | null
    payment_status: $Enums.PaymentStatus | null
  }

  export type EventBookingMaxAggregateOutputType = {
    event_booking_id: string | null
    event_id: string | null
    user_id: string | null
    seat_id: string | null
    booking_date: Date | null
    amount_paid: number | null
    cancellation_date: Date | null
    createdAt: Date | null
    payment_status: $Enums.PaymentStatus | null
  }

  export type EventBookingCountAggregateOutputType = {
    event_booking_id: number
    event_id: number
    user_id: number
    seat_id: number
    booking_date: number
    amount_paid: number
    cancellation_date: number
    createdAt: number
    payment_status: number
    _all: number
  }


  export type EventBookingAvgAggregateInputType = {
    amount_paid?: true
  }

  export type EventBookingSumAggregateInputType = {
    amount_paid?: true
  }

  export type EventBookingMinAggregateInputType = {
    event_booking_id?: true
    event_id?: true
    user_id?: true
    seat_id?: true
    booking_date?: true
    amount_paid?: true
    cancellation_date?: true
    createdAt?: true
    payment_status?: true
  }

  export type EventBookingMaxAggregateInputType = {
    event_booking_id?: true
    event_id?: true
    user_id?: true
    seat_id?: true
    booking_date?: true
    amount_paid?: true
    cancellation_date?: true
    createdAt?: true
    payment_status?: true
  }

  export type EventBookingCountAggregateInputType = {
    event_booking_id?: true
    event_id?: true
    user_id?: true
    seat_id?: true
    booking_date?: true
    amount_paid?: true
    cancellation_date?: true
    createdAt?: true
    payment_status?: true
    _all?: true
  }

  export type EventBookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventBooking to aggregate.
     */
    where?: EventBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventBookings to fetch.
     */
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventBookings
    **/
    _count?: true | EventBookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventBookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventBookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventBookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventBookingMaxAggregateInputType
  }

  export type GetEventBookingAggregateType<T extends EventBookingAggregateArgs> = {
        [P in keyof T & keyof AggregateEventBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventBooking[P]>
      : GetScalarType<T[P], AggregateEventBooking[P]>
  }




  export type EventBookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventBookingWhereInput
    orderBy?: EventBookingOrderByWithAggregationInput | EventBookingOrderByWithAggregationInput[]
    by: EventBookingScalarFieldEnum[] | EventBookingScalarFieldEnum
    having?: EventBookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventBookingCountAggregateInputType | true
    _avg?: EventBookingAvgAggregateInputType
    _sum?: EventBookingSumAggregateInputType
    _min?: EventBookingMinAggregateInputType
    _max?: EventBookingMaxAggregateInputType
  }

  export type EventBookingGroupByOutputType = {
    event_booking_id: string
    event_id: string
    user_id: string
    seat_id: string
    booking_date: Date
    amount_paid: number
    cancellation_date: Date | null
    createdAt: Date
    payment_status: $Enums.PaymentStatus
    _count: EventBookingCountAggregateOutputType | null
    _avg: EventBookingAvgAggregateOutputType | null
    _sum: EventBookingSumAggregateOutputType | null
    _min: EventBookingMinAggregateOutputType | null
    _max: EventBookingMaxAggregateOutputType | null
  }

  type GetEventBookingGroupByPayload<T extends EventBookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventBookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventBookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventBookingGroupByOutputType[P]>
            : GetScalarType<T[P], EventBookingGroupByOutputType[P]>
        }
      >
    >


  export type EventBookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_booking_id?: boolean
    event_id?: boolean
    user_id?: boolean
    seat_id?: boolean
    booking_date?: boolean
    amount_paid?: boolean
    cancellation_date?: boolean
    createdAt?: boolean
    payment_status?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    seat?: boolean | SeatsInventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment_transaction?: boolean | EventBooking$payment_transactionArgs<ExtArgs>
    _count?: boolean | EventBookingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventBooking"]>

  export type EventBookingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    event_booking_id?: boolean
    event_id?: boolean
    user_id?: boolean
    seat_id?: boolean
    booking_date?: boolean
    amount_paid?: boolean
    cancellation_date?: boolean
    createdAt?: boolean
    payment_status?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    seat?: boolean | SeatsInventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventBooking"]>

  export type EventBookingSelectScalar = {
    event_booking_id?: boolean
    event_id?: boolean
    user_id?: boolean
    seat_id?: boolean
    booking_date?: boolean
    amount_paid?: boolean
    cancellation_date?: boolean
    createdAt?: boolean
    payment_status?: boolean
  }

  export type EventBookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    seat?: boolean | SeatsInventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment_transaction?: boolean | EventBooking$payment_transactionArgs<ExtArgs>
    _count?: boolean | EventBookingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventBookingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    seat?: boolean | SeatsInventoryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EventBookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventBooking"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      seat: Prisma.$SeatsInventoryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      payment_transaction: Prisma.$PaymentTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      event_booking_id: string
      event_id: string
      user_id: string
      seat_id: string
      booking_date: Date
      amount_paid: number
      cancellation_date: Date | null
      createdAt: Date
      payment_status: $Enums.PaymentStatus
    }, ExtArgs["result"]["eventBooking"]>
    composites: {}
  }

  type EventBookingGetPayload<S extends boolean | null | undefined | EventBookingDefaultArgs> = $Result.GetResult<Prisma.$EventBookingPayload, S>

  type EventBookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventBookingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventBookingCountAggregateInputType | true
    }

  export interface EventBookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventBooking'], meta: { name: 'EventBooking' } }
    /**
     * Find zero or one EventBooking that matches the filter.
     * @param {EventBookingFindUniqueArgs} args - Arguments to find a EventBooking
     * @example
     * // Get one EventBooking
     * const eventBooking = await prisma.eventBooking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventBookingFindUniqueArgs>(args: SelectSubset<T, EventBookingFindUniqueArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EventBooking that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventBookingFindUniqueOrThrowArgs} args - Arguments to find a EventBooking
     * @example
     * // Get one EventBooking
     * const eventBooking = await prisma.eventBooking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventBookingFindUniqueOrThrowArgs>(args: SelectSubset<T, EventBookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EventBooking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingFindFirstArgs} args - Arguments to find a EventBooking
     * @example
     * // Get one EventBooking
     * const eventBooking = await prisma.eventBooking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventBookingFindFirstArgs>(args?: SelectSubset<T, EventBookingFindFirstArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EventBooking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingFindFirstOrThrowArgs} args - Arguments to find a EventBooking
     * @example
     * // Get one EventBooking
     * const eventBooking = await prisma.eventBooking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventBookingFindFirstOrThrowArgs>(args?: SelectSubset<T, EventBookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EventBookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventBookings
     * const eventBookings = await prisma.eventBooking.findMany()
     * 
     * // Get first 10 EventBookings
     * const eventBookings = await prisma.eventBooking.findMany({ take: 10 })
     * 
     * // Only select the `event_booking_id`
     * const eventBookingWithEvent_booking_idOnly = await prisma.eventBooking.findMany({ select: { event_booking_id: true } })
     * 
     */
    findMany<T extends EventBookingFindManyArgs>(args?: SelectSubset<T, EventBookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EventBooking.
     * @param {EventBookingCreateArgs} args - Arguments to create a EventBooking.
     * @example
     * // Create one EventBooking
     * const EventBooking = await prisma.eventBooking.create({
     *   data: {
     *     // ... data to create a EventBooking
     *   }
     * })
     * 
     */
    create<T extends EventBookingCreateArgs>(args: SelectSubset<T, EventBookingCreateArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EventBookings.
     * @param {EventBookingCreateManyArgs} args - Arguments to create many EventBookings.
     * @example
     * // Create many EventBookings
     * const eventBooking = await prisma.eventBooking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventBookingCreateManyArgs>(args?: SelectSubset<T, EventBookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EventBookings and returns the data saved in the database.
     * @param {EventBookingCreateManyAndReturnArgs} args - Arguments to create many EventBookings.
     * @example
     * // Create many EventBookings
     * const eventBooking = await prisma.eventBooking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EventBookings and only return the `event_booking_id`
     * const eventBookingWithEvent_booking_idOnly = await prisma.eventBooking.createManyAndReturn({ 
     *   select: { event_booking_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventBookingCreateManyAndReturnArgs>(args?: SelectSubset<T, EventBookingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EventBooking.
     * @param {EventBookingDeleteArgs} args - Arguments to delete one EventBooking.
     * @example
     * // Delete one EventBooking
     * const EventBooking = await prisma.eventBooking.delete({
     *   where: {
     *     // ... filter to delete one EventBooking
     *   }
     * })
     * 
     */
    delete<T extends EventBookingDeleteArgs>(args: SelectSubset<T, EventBookingDeleteArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EventBooking.
     * @param {EventBookingUpdateArgs} args - Arguments to update one EventBooking.
     * @example
     * // Update one EventBooking
     * const eventBooking = await prisma.eventBooking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventBookingUpdateArgs>(args: SelectSubset<T, EventBookingUpdateArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EventBookings.
     * @param {EventBookingDeleteManyArgs} args - Arguments to filter EventBookings to delete.
     * @example
     * // Delete a few EventBookings
     * const { count } = await prisma.eventBooking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventBookingDeleteManyArgs>(args?: SelectSubset<T, EventBookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventBookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventBookings
     * const eventBooking = await prisma.eventBooking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventBookingUpdateManyArgs>(args: SelectSubset<T, EventBookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventBooking.
     * @param {EventBookingUpsertArgs} args - Arguments to update or create a EventBooking.
     * @example
     * // Update or create a EventBooking
     * const eventBooking = await prisma.eventBooking.upsert({
     *   create: {
     *     // ... data to create a EventBooking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventBooking we want to update
     *   }
     * })
     */
    upsert<T extends EventBookingUpsertArgs>(args: SelectSubset<T, EventBookingUpsertArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EventBookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingCountArgs} args - Arguments to filter EventBookings to count.
     * @example
     * // Count the number of EventBookings
     * const count = await prisma.eventBooking.count({
     *   where: {
     *     // ... the filter for the EventBookings we want to count
     *   }
     * })
    **/
    count<T extends EventBookingCountArgs>(
      args?: Subset<T, EventBookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventBookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventBooking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventBookingAggregateArgs>(args: Subset<T, EventBookingAggregateArgs>): Prisma.PrismaPromise<GetEventBookingAggregateType<T>>

    /**
     * Group by EventBooking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventBookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventBookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventBookingGroupByArgs['orderBy'] }
        : { orderBy?: EventBookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventBookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventBooking model
   */
  readonly fields: EventBookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventBooking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventBookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    seat<T extends SeatsInventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeatsInventoryDefaultArgs<ExtArgs>>): Prisma__SeatsInventoryClient<$Result.GetResult<Prisma.$SeatsInventoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    payment_transaction<T extends EventBooking$payment_transactionArgs<ExtArgs> = {}>(args?: Subset<T, EventBooking$payment_transactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventBooking model
   */ 
  interface EventBookingFieldRefs {
    readonly event_booking_id: FieldRef<"EventBooking", 'String'>
    readonly event_id: FieldRef<"EventBooking", 'String'>
    readonly user_id: FieldRef<"EventBooking", 'String'>
    readonly seat_id: FieldRef<"EventBooking", 'String'>
    readonly booking_date: FieldRef<"EventBooking", 'DateTime'>
    readonly amount_paid: FieldRef<"EventBooking", 'Float'>
    readonly cancellation_date: FieldRef<"EventBooking", 'DateTime'>
    readonly createdAt: FieldRef<"EventBooking", 'DateTime'>
    readonly payment_status: FieldRef<"EventBooking", 'PaymentStatus'>
  }
    

  // Custom InputTypes
  /**
   * EventBooking findUnique
   */
  export type EventBookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter, which EventBooking to fetch.
     */
    where: EventBookingWhereUniqueInput
  }

  /**
   * EventBooking findUniqueOrThrow
   */
  export type EventBookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter, which EventBooking to fetch.
     */
    where: EventBookingWhereUniqueInput
  }

  /**
   * EventBooking findFirst
   */
  export type EventBookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter, which EventBooking to fetch.
     */
    where?: EventBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventBookings to fetch.
     */
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventBookings.
     */
    cursor?: EventBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventBookings.
     */
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * EventBooking findFirstOrThrow
   */
  export type EventBookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter, which EventBooking to fetch.
     */
    where?: EventBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventBookings to fetch.
     */
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventBookings.
     */
    cursor?: EventBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventBookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventBookings.
     */
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * EventBooking findMany
   */
  export type EventBookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter, which EventBookings to fetch.
     */
    where?: EventBookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventBookings to fetch.
     */
    orderBy?: EventBookingOrderByWithRelationInput | EventBookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventBookings.
     */
    cursor?: EventBookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventBookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventBookings.
     */
    skip?: number
    distinct?: EventBookingScalarFieldEnum | EventBookingScalarFieldEnum[]
  }

  /**
   * EventBooking create
   */
  export type EventBookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * The data needed to create a EventBooking.
     */
    data: XOR<EventBookingCreateInput, EventBookingUncheckedCreateInput>
  }

  /**
   * EventBooking createMany
   */
  export type EventBookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventBookings.
     */
    data: EventBookingCreateManyInput | EventBookingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventBooking createManyAndReturn
   */
  export type EventBookingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EventBookings.
     */
    data: EventBookingCreateManyInput | EventBookingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EventBooking update
   */
  export type EventBookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * The data needed to update a EventBooking.
     */
    data: XOR<EventBookingUpdateInput, EventBookingUncheckedUpdateInput>
    /**
     * Choose, which EventBooking to update.
     */
    where: EventBookingWhereUniqueInput
  }

  /**
   * EventBooking updateMany
   */
  export type EventBookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventBookings.
     */
    data: XOR<EventBookingUpdateManyMutationInput, EventBookingUncheckedUpdateManyInput>
    /**
     * Filter which EventBookings to update
     */
    where?: EventBookingWhereInput
  }

  /**
   * EventBooking upsert
   */
  export type EventBookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * The filter to search for the EventBooking to update in case it exists.
     */
    where: EventBookingWhereUniqueInput
    /**
     * In case the EventBooking found by the `where` argument doesn't exist, create a new EventBooking with this data.
     */
    create: XOR<EventBookingCreateInput, EventBookingUncheckedCreateInput>
    /**
     * In case the EventBooking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventBookingUpdateInput, EventBookingUncheckedUpdateInput>
  }

  /**
   * EventBooking delete
   */
  export type EventBookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
    /**
     * Filter which EventBooking to delete.
     */
    where: EventBookingWhereUniqueInput
  }

  /**
   * EventBooking deleteMany
   */
  export type EventBookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventBookings to delete
     */
    where?: EventBookingWhereInput
  }

  /**
   * EventBooking.payment_transaction
   */
  export type EventBooking$payment_transactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * EventBooking without action
   */
  export type EventBookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventBooking
     */
    select?: EventBookingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventBookingInclude<ExtArgs> | null
  }


  /**
   * Model BookingHistory
   */

  export type AggregateBookingHistory = {
    _count: BookingHistoryCountAggregateOutputType | null
    _avg: BookingHistoryAvgAggregateOutputType | null
    _sum: BookingHistorySumAggregateOutputType | null
    _min: BookingHistoryMinAggregateOutputType | null
    _max: BookingHistoryMaxAggregateOutputType | null
  }

  export type BookingHistoryAvgAggregateOutputType = {
    ticket_quantity: number | null
    amount_paid: number | null
  }

  export type BookingHistorySumAggregateOutputType = {
    ticket_quantity: number | null
    amount_paid: number | null
  }

  export type BookingHistoryMinAggregateOutputType = {
    history_id: string | null
    user_id: string | null
    event_id: string | null
    booking_date: Date | null
    ticket_type: $Enums.TicketType | null
    payment_status: $Enums.PaymentStatus | null
    ticket_quantity: number | null
    amount_paid: number | null
    createdAt: Date | null
  }

  export type BookingHistoryMaxAggregateOutputType = {
    history_id: string | null
    user_id: string | null
    event_id: string | null
    booking_date: Date | null
    ticket_type: $Enums.TicketType | null
    payment_status: $Enums.PaymentStatus | null
    ticket_quantity: number | null
    amount_paid: number | null
    createdAt: Date | null
  }

  export type BookingHistoryCountAggregateOutputType = {
    history_id: number
    user_id: number
    event_id: number
    booking_date: number
    ticket_type: number
    payment_status: number
    ticket_quantity: number
    amount_paid: number
    createdAt: number
    _all: number
  }


  export type BookingHistoryAvgAggregateInputType = {
    ticket_quantity?: true
    amount_paid?: true
  }

  export type BookingHistorySumAggregateInputType = {
    ticket_quantity?: true
    amount_paid?: true
  }

  export type BookingHistoryMinAggregateInputType = {
    history_id?: true
    user_id?: true
    event_id?: true
    booking_date?: true
    ticket_type?: true
    payment_status?: true
    ticket_quantity?: true
    amount_paid?: true
    createdAt?: true
  }

  export type BookingHistoryMaxAggregateInputType = {
    history_id?: true
    user_id?: true
    event_id?: true
    booking_date?: true
    ticket_type?: true
    payment_status?: true
    ticket_quantity?: true
    amount_paid?: true
    createdAt?: true
  }

  export type BookingHistoryCountAggregateInputType = {
    history_id?: true
    user_id?: true
    event_id?: true
    booking_date?: true
    ticket_type?: true
    payment_status?: true
    ticket_quantity?: true
    amount_paid?: true
    createdAt?: true
    _all?: true
  }

  export type BookingHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingHistory to aggregate.
     */
    where?: BookingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingHistories to fetch.
     */
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingHistories
    **/
    _count?: true | BookingHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingHistoryMaxAggregateInputType
  }

  export type GetBookingHistoryAggregateType<T extends BookingHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingHistory[P]>
      : GetScalarType<T[P], AggregateBookingHistory[P]>
  }




  export type BookingHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingHistoryWhereInput
    orderBy?: BookingHistoryOrderByWithAggregationInput | BookingHistoryOrderByWithAggregationInput[]
    by: BookingHistoryScalarFieldEnum[] | BookingHistoryScalarFieldEnum
    having?: BookingHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingHistoryCountAggregateInputType | true
    _avg?: BookingHistoryAvgAggregateInputType
    _sum?: BookingHistorySumAggregateInputType
    _min?: BookingHistoryMinAggregateInputType
    _max?: BookingHistoryMaxAggregateInputType
  }

  export type BookingHistoryGroupByOutputType = {
    history_id: string
    user_id: string
    event_id: string
    booking_date: Date
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt: Date
    _count: BookingHistoryCountAggregateOutputType | null
    _avg: BookingHistoryAvgAggregateOutputType | null
    _sum: BookingHistorySumAggregateOutputType | null
    _min: BookingHistoryMinAggregateOutputType | null
    _max: BookingHistoryMaxAggregateOutputType | null
  }

  type GetBookingHistoryGroupByPayload<T extends BookingHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], BookingHistoryGroupByOutputType[P]>
        }
      >
    >


  export type BookingHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    history_id?: boolean
    user_id?: boolean
    event_id?: boolean
    booking_date?: boolean
    ticket_type?: boolean
    payment_status?: boolean
    ticket_quantity?: boolean
    amount_paid?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingHistory"]>

  export type BookingHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    history_id?: boolean
    user_id?: boolean
    event_id?: boolean
    booking_date?: boolean
    ticket_type?: boolean
    payment_status?: boolean
    ticket_quantity?: boolean
    amount_paid?: boolean
    createdAt?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookingHistory"]>

  export type BookingHistorySelectScalar = {
    history_id?: boolean
    user_id?: boolean
    event_id?: boolean
    booking_date?: boolean
    ticket_type?: boolean
    payment_status?: boolean
    ticket_quantity?: boolean
    amount_paid?: boolean
    createdAt?: boolean
  }

  export type BookingHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BookingHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BookingHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookingHistory"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      history_id: string
      user_id: string
      event_id: string
      booking_date: Date
      ticket_type: $Enums.TicketType
      payment_status: $Enums.PaymentStatus
      ticket_quantity: number
      amount_paid: number
      createdAt: Date
    }, ExtArgs["result"]["bookingHistory"]>
    composites: {}
  }

  type BookingHistoryGetPayload<S extends boolean | null | undefined | BookingHistoryDefaultArgs> = $Result.GetResult<Prisma.$BookingHistoryPayload, S>

  type BookingHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookingHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookingHistoryCountAggregateInputType | true
    }

  export interface BookingHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingHistory'], meta: { name: 'BookingHistory' } }
    /**
     * Find zero or one BookingHistory that matches the filter.
     * @param {BookingHistoryFindUniqueArgs} args - Arguments to find a BookingHistory
     * @example
     * // Get one BookingHistory
     * const bookingHistory = await prisma.bookingHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingHistoryFindUniqueArgs>(args: SelectSubset<T, BookingHistoryFindUniqueArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BookingHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookingHistoryFindUniqueOrThrowArgs} args - Arguments to find a BookingHistory
     * @example
     * // Get one BookingHistory
     * const bookingHistory = await prisma.bookingHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BookingHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryFindFirstArgs} args - Arguments to find a BookingHistory
     * @example
     * // Get one BookingHistory
     * const bookingHistory = await prisma.bookingHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingHistoryFindFirstArgs>(args?: SelectSubset<T, BookingHistoryFindFirstArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BookingHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryFindFirstOrThrowArgs} args - Arguments to find a BookingHistory
     * @example
     * // Get one BookingHistory
     * const bookingHistory = await prisma.bookingHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BookingHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingHistories
     * const bookingHistories = await prisma.bookingHistory.findMany()
     * 
     * // Get first 10 BookingHistories
     * const bookingHistories = await prisma.bookingHistory.findMany({ take: 10 })
     * 
     * // Only select the `history_id`
     * const bookingHistoryWithHistory_idOnly = await prisma.bookingHistory.findMany({ select: { history_id: true } })
     * 
     */
    findMany<T extends BookingHistoryFindManyArgs>(args?: SelectSubset<T, BookingHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BookingHistory.
     * @param {BookingHistoryCreateArgs} args - Arguments to create a BookingHistory.
     * @example
     * // Create one BookingHistory
     * const BookingHistory = await prisma.bookingHistory.create({
     *   data: {
     *     // ... data to create a BookingHistory
     *   }
     * })
     * 
     */
    create<T extends BookingHistoryCreateArgs>(args: SelectSubset<T, BookingHistoryCreateArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BookingHistories.
     * @param {BookingHistoryCreateManyArgs} args - Arguments to create many BookingHistories.
     * @example
     * // Create many BookingHistories
     * const bookingHistory = await prisma.bookingHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingHistoryCreateManyArgs>(args?: SelectSubset<T, BookingHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BookingHistories and returns the data saved in the database.
     * @param {BookingHistoryCreateManyAndReturnArgs} args - Arguments to create many BookingHistories.
     * @example
     * // Create many BookingHistories
     * const bookingHistory = await prisma.bookingHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BookingHistories and only return the `history_id`
     * const bookingHistoryWithHistory_idOnly = await prisma.bookingHistory.createManyAndReturn({ 
     *   select: { history_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BookingHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, BookingHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BookingHistory.
     * @param {BookingHistoryDeleteArgs} args - Arguments to delete one BookingHistory.
     * @example
     * // Delete one BookingHistory
     * const BookingHistory = await prisma.bookingHistory.delete({
     *   where: {
     *     // ... filter to delete one BookingHistory
     *   }
     * })
     * 
     */
    delete<T extends BookingHistoryDeleteArgs>(args: SelectSubset<T, BookingHistoryDeleteArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BookingHistory.
     * @param {BookingHistoryUpdateArgs} args - Arguments to update one BookingHistory.
     * @example
     * // Update one BookingHistory
     * const bookingHistory = await prisma.bookingHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingHistoryUpdateArgs>(args: SelectSubset<T, BookingHistoryUpdateArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BookingHistories.
     * @param {BookingHistoryDeleteManyArgs} args - Arguments to filter BookingHistories to delete.
     * @example
     * // Delete a few BookingHistories
     * const { count } = await prisma.bookingHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingHistoryDeleteManyArgs>(args?: SelectSubset<T, BookingHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingHistories
     * const bookingHistory = await prisma.bookingHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingHistoryUpdateManyArgs>(args: SelectSubset<T, BookingHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookingHistory.
     * @param {BookingHistoryUpsertArgs} args - Arguments to update or create a BookingHistory.
     * @example
     * // Update or create a BookingHistory
     * const bookingHistory = await prisma.bookingHistory.upsert({
     *   create: {
     *     // ... data to create a BookingHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingHistory we want to update
     *   }
     * })
     */
    upsert<T extends BookingHistoryUpsertArgs>(args: SelectSubset<T, BookingHistoryUpsertArgs<ExtArgs>>): Prisma__BookingHistoryClient<$Result.GetResult<Prisma.$BookingHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BookingHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryCountArgs} args - Arguments to filter BookingHistories to count.
     * @example
     * // Count the number of BookingHistories
     * const count = await prisma.bookingHistory.count({
     *   where: {
     *     // ... the filter for the BookingHistories we want to count
     *   }
     * })
    **/
    count<T extends BookingHistoryCountArgs>(
      args?: Subset<T, BookingHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingHistoryAggregateArgs>(args: Subset<T, BookingHistoryAggregateArgs>): Prisma.PrismaPromise<GetBookingHistoryAggregateType<T>>

    /**
     * Group by BookingHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingHistoryGroupByArgs['orderBy'] }
        : { orderBy?: BookingHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookingHistory model
   */
  readonly fields: BookingHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookingHistory model
   */ 
  interface BookingHistoryFieldRefs {
    readonly history_id: FieldRef<"BookingHistory", 'String'>
    readonly user_id: FieldRef<"BookingHistory", 'String'>
    readonly event_id: FieldRef<"BookingHistory", 'String'>
    readonly booking_date: FieldRef<"BookingHistory", 'DateTime'>
    readonly ticket_type: FieldRef<"BookingHistory", 'TicketType'>
    readonly payment_status: FieldRef<"BookingHistory", 'PaymentStatus'>
    readonly ticket_quantity: FieldRef<"BookingHistory", 'Int'>
    readonly amount_paid: FieldRef<"BookingHistory", 'Float'>
    readonly createdAt: FieldRef<"BookingHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BookingHistory findUnique
   */
  export type BookingHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BookingHistory to fetch.
     */
    where: BookingHistoryWhereUniqueInput
  }

  /**
   * BookingHistory findUniqueOrThrow
   */
  export type BookingHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BookingHistory to fetch.
     */
    where: BookingHistoryWhereUniqueInput
  }

  /**
   * BookingHistory findFirst
   */
  export type BookingHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BookingHistory to fetch.
     */
    where?: BookingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingHistories to fetch.
     */
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingHistories.
     */
    cursor?: BookingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingHistories.
     */
    distinct?: BookingHistoryScalarFieldEnum | BookingHistoryScalarFieldEnum[]
  }

  /**
   * BookingHistory findFirstOrThrow
   */
  export type BookingHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BookingHistory to fetch.
     */
    where?: BookingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingHistories to fetch.
     */
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingHistories.
     */
    cursor?: BookingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingHistories.
     */
    distinct?: BookingHistoryScalarFieldEnum | BookingHistoryScalarFieldEnum[]
  }

  /**
   * BookingHistory findMany
   */
  export type BookingHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BookingHistories to fetch.
     */
    where?: BookingHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingHistories to fetch.
     */
    orderBy?: BookingHistoryOrderByWithRelationInput | BookingHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingHistories.
     */
    cursor?: BookingHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingHistories.
     */
    skip?: number
    distinct?: BookingHistoryScalarFieldEnum | BookingHistoryScalarFieldEnum[]
  }

  /**
   * BookingHistory create
   */
  export type BookingHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BookingHistory.
     */
    data: XOR<BookingHistoryCreateInput, BookingHistoryUncheckedCreateInput>
  }

  /**
   * BookingHistory createMany
   */
  export type BookingHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookingHistories.
     */
    data: BookingHistoryCreateManyInput | BookingHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BookingHistory createManyAndReturn
   */
  export type BookingHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BookingHistories.
     */
    data: BookingHistoryCreateManyInput | BookingHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BookingHistory update
   */
  export type BookingHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BookingHistory.
     */
    data: XOR<BookingHistoryUpdateInput, BookingHistoryUncheckedUpdateInput>
    /**
     * Choose, which BookingHistory to update.
     */
    where: BookingHistoryWhereUniqueInput
  }

  /**
   * BookingHistory updateMany
   */
  export type BookingHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookingHistories.
     */
    data: XOR<BookingHistoryUpdateManyMutationInput, BookingHistoryUncheckedUpdateManyInput>
    /**
     * Filter which BookingHistories to update
     */
    where?: BookingHistoryWhereInput
  }

  /**
   * BookingHistory upsert
   */
  export type BookingHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BookingHistory to update in case it exists.
     */
    where: BookingHistoryWhereUniqueInput
    /**
     * In case the BookingHistory found by the `where` argument doesn't exist, create a new BookingHistory with this data.
     */
    create: XOR<BookingHistoryCreateInput, BookingHistoryUncheckedCreateInput>
    /**
     * In case the BookingHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingHistoryUpdateInput, BookingHistoryUncheckedUpdateInput>
  }

  /**
   * BookingHistory delete
   */
  export type BookingHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
    /**
     * Filter which BookingHistory to delete.
     */
    where: BookingHistoryWhereUniqueInput
  }

  /**
   * BookingHistory deleteMany
   */
  export type BookingHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingHistories to delete
     */
    where?: BookingHistoryWhereInput
  }

  /**
   * BookingHistory without action
   */
  export type BookingHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingHistory
     */
    select?: BookingHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingHistoryInclude<ExtArgs> | null
  }


  /**
   * Model PaymentInfo
   */

  export type AggregatePaymentInfo = {
    _count: PaymentInfoCountAggregateOutputType | null
    _min: PaymentInfoMinAggregateOutputType | null
    _max: PaymentInfoMaxAggregateOutputType | null
  }

  export type PaymentInfoMinAggregateOutputType = {
    payment_info_id: string | null
    user_id: string | null
    card_token: string | null
    expiry_date: Date | null
    billing_address: string | null
    payment_type: $Enums.PaymentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInfoMaxAggregateOutputType = {
    payment_info_id: string | null
    user_id: string | null
    card_token: string | null
    expiry_date: Date | null
    billing_address: string | null
    payment_type: $Enums.PaymentType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentInfoCountAggregateOutputType = {
    payment_info_id: number
    user_id: number
    card_token: number
    expiry_date: number
    billing_address: number
    payment_type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentInfoMinAggregateInputType = {
    payment_info_id?: true
    user_id?: true
    card_token?: true
    expiry_date?: true
    billing_address?: true
    payment_type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInfoMaxAggregateInputType = {
    payment_info_id?: true
    user_id?: true
    card_token?: true
    expiry_date?: true
    billing_address?: true
    payment_type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentInfoCountAggregateInputType = {
    payment_info_id?: true
    user_id?: true
    card_token?: true
    expiry_date?: true
    billing_address?: true
    payment_type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInfo to aggregate.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentInfos
    **/
    _count?: true | PaymentInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentInfoMaxAggregateInputType
  }

  export type GetPaymentInfoAggregateType<T extends PaymentInfoAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentInfo[P]>
      : GetScalarType<T[P], AggregatePaymentInfo[P]>
  }




  export type PaymentInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentInfoWhereInput
    orderBy?: PaymentInfoOrderByWithAggregationInput | PaymentInfoOrderByWithAggregationInput[]
    by: PaymentInfoScalarFieldEnum[] | PaymentInfoScalarFieldEnum
    having?: PaymentInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentInfoCountAggregateInputType | true
    _min?: PaymentInfoMinAggregateInputType
    _max?: PaymentInfoMaxAggregateInputType
  }

  export type PaymentInfoGroupByOutputType = {
    payment_info_id: string
    user_id: string
    card_token: string
    expiry_date: Date
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt: Date
    updatedAt: Date
    _count: PaymentInfoCountAggregateOutputType | null
    _min: PaymentInfoMinAggregateOutputType | null
    _max: PaymentInfoMaxAggregateOutputType | null
  }

  type GetPaymentInfoGroupByPayload<T extends PaymentInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentInfoGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentInfoGroupByOutputType[P]>
        }
      >
    >


  export type PaymentInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_info_id?: boolean
    user_id?: boolean
    card_token?: boolean
    expiry_date?: boolean
    billing_address?: boolean
    payment_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment_transactions?: boolean | PaymentInfo$payment_transactionsArgs<ExtArgs>
    _count?: boolean | PaymentInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInfo"]>

  export type PaymentInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_info_id?: boolean
    user_id?: boolean
    card_token?: boolean
    expiry_date?: boolean
    billing_address?: boolean
    payment_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentInfo"]>

  export type PaymentInfoSelectScalar = {
    payment_info_id?: boolean
    user_id?: boolean
    card_token?: boolean
    expiry_date?: boolean
    billing_address?: boolean
    payment_type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment_transactions?: boolean | PaymentInfo$payment_transactionsArgs<ExtArgs>
    _count?: boolean | PaymentInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PaymentInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      payment_transactions: Prisma.$PaymentTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      payment_info_id: string
      user_id: string
      card_token: string
      expiry_date: Date
      billing_address: string
      payment_type: $Enums.PaymentType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentInfo"]>
    composites: {}
  }

  type PaymentInfoGetPayload<S extends boolean | null | undefined | PaymentInfoDefaultArgs> = $Result.GetResult<Prisma.$PaymentInfoPayload, S>

  type PaymentInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentInfoCountAggregateInputType | true
    }

  export interface PaymentInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentInfo'], meta: { name: 'PaymentInfo' } }
    /**
     * Find zero or one PaymentInfo that matches the filter.
     * @param {PaymentInfoFindUniqueArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentInfoFindUniqueArgs>(args: SelectSubset<T, PaymentInfoFindUniqueArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentInfoFindUniqueOrThrowArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindFirstArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentInfoFindFirstArgs>(args?: SelectSubset<T, PaymentInfoFindFirstArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindFirstOrThrowArgs} args - Arguments to find a PaymentInfo
     * @example
     * // Get one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentInfos
     * const paymentInfos = await prisma.paymentInfo.findMany()
     * 
     * // Get first 10 PaymentInfos
     * const paymentInfos = await prisma.paymentInfo.findMany({ take: 10 })
     * 
     * // Only select the `payment_info_id`
     * const paymentInfoWithPayment_info_idOnly = await prisma.paymentInfo.findMany({ select: { payment_info_id: true } })
     * 
     */
    findMany<T extends PaymentInfoFindManyArgs>(args?: SelectSubset<T, PaymentInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentInfo.
     * @param {PaymentInfoCreateArgs} args - Arguments to create a PaymentInfo.
     * @example
     * // Create one PaymentInfo
     * const PaymentInfo = await prisma.paymentInfo.create({
     *   data: {
     *     // ... data to create a PaymentInfo
     *   }
     * })
     * 
     */
    create<T extends PaymentInfoCreateArgs>(args: SelectSubset<T, PaymentInfoCreateArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentInfos.
     * @param {PaymentInfoCreateManyArgs} args - Arguments to create many PaymentInfos.
     * @example
     * // Create many PaymentInfos
     * const paymentInfo = await prisma.paymentInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentInfoCreateManyArgs>(args?: SelectSubset<T, PaymentInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentInfos and returns the data saved in the database.
     * @param {PaymentInfoCreateManyAndReturnArgs} args - Arguments to create many PaymentInfos.
     * @example
     * // Create many PaymentInfos
     * const paymentInfo = await prisma.paymentInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentInfos and only return the `payment_info_id`
     * const paymentInfoWithPayment_info_idOnly = await prisma.paymentInfo.createManyAndReturn({ 
     *   select: { payment_info_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentInfo.
     * @param {PaymentInfoDeleteArgs} args - Arguments to delete one PaymentInfo.
     * @example
     * // Delete one PaymentInfo
     * const PaymentInfo = await prisma.paymentInfo.delete({
     *   where: {
     *     // ... filter to delete one PaymentInfo
     *   }
     * })
     * 
     */
    delete<T extends PaymentInfoDeleteArgs>(args: SelectSubset<T, PaymentInfoDeleteArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentInfo.
     * @param {PaymentInfoUpdateArgs} args - Arguments to update one PaymentInfo.
     * @example
     * // Update one PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentInfoUpdateArgs>(args: SelectSubset<T, PaymentInfoUpdateArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentInfos.
     * @param {PaymentInfoDeleteManyArgs} args - Arguments to filter PaymentInfos to delete.
     * @example
     * // Delete a few PaymentInfos
     * const { count } = await prisma.paymentInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentInfoDeleteManyArgs>(args?: SelectSubset<T, PaymentInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentInfos
     * const paymentInfo = await prisma.paymentInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentInfoUpdateManyArgs>(args: SelectSubset<T, PaymentInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentInfo.
     * @param {PaymentInfoUpsertArgs} args - Arguments to update or create a PaymentInfo.
     * @example
     * // Update or create a PaymentInfo
     * const paymentInfo = await prisma.paymentInfo.upsert({
     *   create: {
     *     // ... data to create a PaymentInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentInfo we want to update
     *   }
     * })
     */
    upsert<T extends PaymentInfoUpsertArgs>(args: SelectSubset<T, PaymentInfoUpsertArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoCountArgs} args - Arguments to filter PaymentInfos to count.
     * @example
     * // Count the number of PaymentInfos
     * const count = await prisma.paymentInfo.count({
     *   where: {
     *     // ... the filter for the PaymentInfos we want to count
     *   }
     * })
    **/
    count<T extends PaymentInfoCountArgs>(
      args?: Subset<T, PaymentInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentInfoAggregateArgs>(args: Subset<T, PaymentInfoAggregateArgs>): Prisma.PrismaPromise<GetPaymentInfoAggregateType<T>>

    /**
     * Group by PaymentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentInfoGroupByArgs['orderBy'] }
        : { orderBy?: PaymentInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentInfo model
   */
  readonly fields: PaymentInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    payment_transactions<T extends PaymentInfo$payment_transactionsArgs<ExtArgs> = {}>(args?: Subset<T, PaymentInfo$payment_transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentInfo model
   */ 
  interface PaymentInfoFieldRefs {
    readonly payment_info_id: FieldRef<"PaymentInfo", 'String'>
    readonly user_id: FieldRef<"PaymentInfo", 'String'>
    readonly card_token: FieldRef<"PaymentInfo", 'String'>
    readonly expiry_date: FieldRef<"PaymentInfo", 'DateTime'>
    readonly billing_address: FieldRef<"PaymentInfo", 'String'>
    readonly payment_type: FieldRef<"PaymentInfo", 'PaymentType'>
    readonly createdAt: FieldRef<"PaymentInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentInfo findUnique
   */
  export type PaymentInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo findUniqueOrThrow
   */
  export type PaymentInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo findFirst
   */
  export type PaymentInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInfos.
     */
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo findFirstOrThrow
   */
  export type PaymentInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfo to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentInfos.
     */
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo findMany
   */
  export type PaymentInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter, which PaymentInfos to fetch.
     */
    where?: PaymentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentInfos to fetch.
     */
    orderBy?: PaymentInfoOrderByWithRelationInput | PaymentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentInfos.
     */
    cursor?: PaymentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentInfos.
     */
    skip?: number
    distinct?: PaymentInfoScalarFieldEnum | PaymentInfoScalarFieldEnum[]
  }

  /**
   * PaymentInfo create
   */
  export type PaymentInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentInfo.
     */
    data: XOR<PaymentInfoCreateInput, PaymentInfoUncheckedCreateInput>
  }

  /**
   * PaymentInfo createMany
   */
  export type PaymentInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentInfos.
     */
    data: PaymentInfoCreateManyInput | PaymentInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentInfo createManyAndReturn
   */
  export type PaymentInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentInfos.
     */
    data: PaymentInfoCreateManyInput | PaymentInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentInfo update
   */
  export type PaymentInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentInfo.
     */
    data: XOR<PaymentInfoUpdateInput, PaymentInfoUncheckedUpdateInput>
    /**
     * Choose, which PaymentInfo to update.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo updateMany
   */
  export type PaymentInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentInfos.
     */
    data: XOR<PaymentInfoUpdateManyMutationInput, PaymentInfoUncheckedUpdateManyInput>
    /**
     * Filter which PaymentInfos to update
     */
    where?: PaymentInfoWhereInput
  }

  /**
   * PaymentInfo upsert
   */
  export type PaymentInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentInfo to update in case it exists.
     */
    where: PaymentInfoWhereUniqueInput
    /**
     * In case the PaymentInfo found by the `where` argument doesn't exist, create a new PaymentInfo with this data.
     */
    create: XOR<PaymentInfoCreateInput, PaymentInfoUncheckedCreateInput>
    /**
     * In case the PaymentInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentInfoUpdateInput, PaymentInfoUncheckedUpdateInput>
  }

  /**
   * PaymentInfo delete
   */
  export type PaymentInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
    /**
     * Filter which PaymentInfo to delete.
     */
    where: PaymentInfoWhereUniqueInput
  }

  /**
   * PaymentInfo deleteMany
   */
  export type PaymentInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentInfos to delete
     */
    where?: PaymentInfoWhereInput
  }

  /**
   * PaymentInfo.payment_transactions
   */
  export type PaymentInfo$payment_transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentInfo without action
   */
  export type PaymentInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentInfo
     */
    select?: PaymentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInfoInclude<ExtArgs> | null
  }


  /**
   * Model PaymentTransaction
   */

  export type AggregatePaymentTransaction = {
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  export type PaymentTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionMinAggregateOutputType = {
    transaction_id: string | null
    user_id: string | null
    event_booking_id: string | null
    payment_info_id: string | null
    amount: number | null
    status: $Enums.TransactionStatus | null
    transaction_date: Date | null
  }

  export type PaymentTransactionMaxAggregateOutputType = {
    transaction_id: string | null
    user_id: string | null
    event_booking_id: string | null
    payment_info_id: string | null
    amount: number | null
    status: $Enums.TransactionStatus | null
    transaction_date: Date | null
  }

  export type PaymentTransactionCountAggregateOutputType = {
    transaction_id: number
    user_id: number
    event_booking_id: number
    payment_info_id: number
    amount: number
    status: number
    transaction_date: number
    _all: number
  }


  export type PaymentTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionSumAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionMinAggregateInputType = {
    transaction_id?: true
    user_id?: true
    event_booking_id?: true
    payment_info_id?: true
    amount?: true
    status?: true
    transaction_date?: true
  }

  export type PaymentTransactionMaxAggregateInputType = {
    transaction_id?: true
    user_id?: true
    event_booking_id?: true
    payment_info_id?: true
    amount?: true
    status?: true
    transaction_date?: true
  }

  export type PaymentTransactionCountAggregateInputType = {
    transaction_id?: true
    user_id?: true
    event_booking_id?: true
    payment_info_id?: true
    amount?: true
    status?: true
    transaction_date?: true
    _all?: true
  }

  export type PaymentTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransaction to aggregate.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTransactions
    **/
    _count?: true | PaymentTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type GetPaymentTransactionAggregateType<T extends PaymentTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTransaction[P]>
      : GetScalarType<T[P], AggregatePaymentTransaction[P]>
  }




  export type PaymentTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithAggregationInput | PaymentTransactionOrderByWithAggregationInput[]
    by: PaymentTransactionScalarFieldEnum[] | PaymentTransactionScalarFieldEnum
    having?: PaymentTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTransactionCountAggregateInputType | true
    _avg?: PaymentTransactionAvgAggregateInputType
    _sum?: PaymentTransactionSumAggregateInputType
    _min?: PaymentTransactionMinAggregateInputType
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type PaymentTransactionGroupByOutputType = {
    transaction_id: string
    user_id: string
    event_booking_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  type GetPaymentTransactionGroupByPayload<T extends PaymentTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transaction_id?: boolean
    user_id?: boolean
    event_booking_id?: boolean
    payment_info_id?: boolean
    amount?: boolean
    status?: boolean
    transaction_date?: boolean
    event_booking?: boolean | EventBookingDefaultArgs<ExtArgs>
    payment_info?: boolean | PaymentInfoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transaction_id?: boolean
    user_id?: boolean
    event_booking_id?: boolean
    payment_info_id?: boolean
    amount?: boolean
    status?: boolean
    transaction_date?: boolean
    event_booking?: boolean | EventBookingDefaultArgs<ExtArgs>
    payment_info?: boolean | PaymentInfoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>

  export type PaymentTransactionSelectScalar = {
    transaction_id?: boolean
    user_id?: boolean
    event_booking_id?: boolean
    payment_info_id?: boolean
    amount?: boolean
    status?: boolean
    transaction_date?: boolean
  }

  export type PaymentTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event_booking?: boolean | EventBookingDefaultArgs<ExtArgs>
    payment_info?: boolean | PaymentInfoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PaymentTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event_booking?: boolean | EventBookingDefaultArgs<ExtArgs>
    payment_info?: boolean | PaymentInfoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PaymentTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTransaction"
    objects: {
      event_booking: Prisma.$EventBookingPayload<ExtArgs>
      payment_info: Prisma.$PaymentInfoPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      transaction_id: string
      user_id: string
      event_booking_id: string
      payment_info_id: string
      amount: number
      status: $Enums.TransactionStatus
      transaction_date: Date
    }, ExtArgs["result"]["paymentTransaction"]>
    composites: {}
  }

  type PaymentTransactionGetPayload<S extends boolean | null | undefined | PaymentTransactionDefaultArgs> = $Result.GetResult<Prisma.$PaymentTransactionPayload, S>

  type PaymentTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentTransactionCountAggregateInputType | true
    }

  export interface PaymentTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransaction'], meta: { name: 'PaymentTransaction' } }
    /**
     * Find zero or one PaymentTransaction that matches the filter.
     * @param {PaymentTransactionFindUniqueArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentTransactionFindUniqueArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentTransactionFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentTransactionFindFirstArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany()
     * 
     * // Get first 10 PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany({ take: 10 })
     * 
     * // Only select the `transaction_id`
     * const paymentTransactionWithTransaction_idOnly = await prisma.paymentTransaction.findMany({ select: { transaction_id: true } })
     * 
     */
    findMany<T extends PaymentTransactionFindManyArgs>(args?: SelectSubset<T, PaymentTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentTransaction.
     * @param {PaymentTransactionCreateArgs} args - Arguments to create a PaymentTransaction.
     * @example
     * // Create one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.create({
     *   data: {
     *     // ... data to create a PaymentTransaction
     *   }
     * })
     * 
     */
    create<T extends PaymentTransactionCreateArgs>(args: SelectSubset<T, PaymentTransactionCreateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentTransactions.
     * @param {PaymentTransactionCreateManyArgs} args - Arguments to create many PaymentTransactions.
     * @example
     * // Create many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentTransactionCreateManyArgs>(args?: SelectSubset<T, PaymentTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentTransactions and returns the data saved in the database.
     * @param {PaymentTransactionCreateManyAndReturnArgs} args - Arguments to create many PaymentTransactions.
     * @example
     * // Create many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentTransactions and only return the `transaction_id`
     * const paymentTransactionWithTransaction_idOnly = await prisma.paymentTransaction.createManyAndReturn({ 
     *   select: { transaction_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentTransaction.
     * @param {PaymentTransactionDeleteArgs} args - Arguments to delete one PaymentTransaction.
     * @example
     * // Delete one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.delete({
     *   where: {
     *     // ... filter to delete one PaymentTransaction
     *   }
     * })
     * 
     */
    delete<T extends PaymentTransactionDeleteArgs>(args: SelectSubset<T, PaymentTransactionDeleteArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentTransaction.
     * @param {PaymentTransactionUpdateArgs} args - Arguments to update one PaymentTransaction.
     * @example
     * // Update one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentTransactionUpdateArgs>(args: SelectSubset<T, PaymentTransactionUpdateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentTransactions.
     * @param {PaymentTransactionDeleteManyArgs} args - Arguments to filter PaymentTransactions to delete.
     * @example
     * // Delete a few PaymentTransactions
     * const { count } = await prisma.paymentTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentTransactionDeleteManyArgs>(args?: SelectSubset<T, PaymentTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentTransactionUpdateManyArgs>(args: SelectSubset<T, PaymentTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentTransaction.
     * @param {PaymentTransactionUpsertArgs} args - Arguments to update or create a PaymentTransaction.
     * @example
     * // Update or create a PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.upsert({
     *   create: {
     *     // ... data to create a PaymentTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTransaction we want to update
     *   }
     * })
     */
    upsert<T extends PaymentTransactionUpsertArgs>(args: SelectSubset<T, PaymentTransactionUpsertArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionCountArgs} args - Arguments to filter PaymentTransactions to count.
     * @example
     * // Count the number of PaymentTransactions
     * const count = await prisma.paymentTransaction.count({
     *   where: {
     *     // ... the filter for the PaymentTransactions we want to count
     *   }
     * })
    **/
    count<T extends PaymentTransactionCountArgs>(
      args?: Subset<T, PaymentTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTransactionAggregateArgs>(args: Subset<T, PaymentTransactionAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionAggregateType<T>>

    /**
     * Group by PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTransactionGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTransaction model
   */
  readonly fields: PaymentTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event_booking<T extends EventBookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventBookingDefaultArgs<ExtArgs>>): Prisma__EventBookingClient<$Result.GetResult<Prisma.$EventBookingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    payment_info<T extends PaymentInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentInfoDefaultArgs<ExtArgs>>): Prisma__PaymentInfoClient<$Result.GetResult<Prisma.$PaymentInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentTransaction model
   */ 
  interface PaymentTransactionFieldRefs {
    readonly transaction_id: FieldRef<"PaymentTransaction", 'String'>
    readonly user_id: FieldRef<"PaymentTransaction", 'String'>
    readonly event_booking_id: FieldRef<"PaymentTransaction", 'String'>
    readonly payment_info_id: FieldRef<"PaymentTransaction", 'String'>
    readonly amount: FieldRef<"PaymentTransaction", 'Float'>
    readonly status: FieldRef<"PaymentTransaction", 'TransactionStatus'>
    readonly transaction_date: FieldRef<"PaymentTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentTransaction findUnique
   */
  export type PaymentTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findUniqueOrThrow
   */
  export type PaymentTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findFirst
   */
  export type PaymentTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findFirstOrThrow
   */
  export type PaymentTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findMany
   */
  export type PaymentTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactions to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction create
   */
  export type PaymentTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTransaction.
     */
    data: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
  }

  /**
   * PaymentTransaction createMany
   */
  export type PaymentTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentTransaction createManyAndReturn
   */
  export type PaymentTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentTransaction update
   */
  export type PaymentTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTransaction.
     */
    data: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
    /**
     * Choose, which PaymentTransaction to update.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction updateMany
   */
  export type PaymentTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTransactions.
     */
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactions to update
     */
    where?: PaymentTransactionWhereInput
  }

  /**
   * PaymentTransaction upsert
   */
  export type PaymentTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTransaction to update in case it exists.
     */
    where: PaymentTransactionWhereUniqueInput
    /**
     * In case the PaymentTransaction found by the `where` argument doesn't exist, create a new PaymentTransaction with this data.
     */
    create: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
    /**
     * In case the PaymentTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
  }

  /**
   * PaymentTransaction delete
   */
  export type PaymentTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter which PaymentTransaction to delete.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction deleteMany
   */
  export type PaymentTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactions to delete
     */
    where?: PaymentTransactionWhereInput
  }

  /**
   * PaymentTransaction without action
   */
  export type PaymentTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Preferences
   */

  export type AggregatePreferences = {
    _count: PreferencesCountAggregateOutputType | null
    _min: PreferencesMinAggregateOutputType | null
    _max: PreferencesMaxAggregateOutputType | null
  }

  export type PreferencesMinAggregateOutputType = {
    preferences_id: string | null
    preference_name: string | null
    description: string | null
  }

  export type PreferencesMaxAggregateOutputType = {
    preferences_id: string | null
    preference_name: string | null
    description: string | null
  }

  export type PreferencesCountAggregateOutputType = {
    preferences_id: number
    preference_name: number
    description: number
    _all: number
  }


  export type PreferencesMinAggregateInputType = {
    preferences_id?: true
    preference_name?: true
    description?: true
  }

  export type PreferencesMaxAggregateInputType = {
    preferences_id?: true
    preference_name?: true
    description?: true
  }

  export type PreferencesCountAggregateInputType = {
    preferences_id?: true
    preference_name?: true
    description?: true
    _all?: true
  }

  export type PreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preferences to aggregate.
     */
    where?: PreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferencesOrderByWithRelationInput | PreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Preferences
    **/
    _count?: true | PreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferencesMaxAggregateInputType
  }

  export type GetPreferencesAggregateType<T extends PreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregatePreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreferences[P]>
      : GetScalarType<T[P], AggregatePreferences[P]>
  }




  export type PreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferencesWhereInput
    orderBy?: PreferencesOrderByWithAggregationInput | PreferencesOrderByWithAggregationInput[]
    by: PreferencesScalarFieldEnum[] | PreferencesScalarFieldEnum
    having?: PreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferencesCountAggregateInputType | true
    _min?: PreferencesMinAggregateInputType
    _max?: PreferencesMaxAggregateInputType
  }

  export type PreferencesGroupByOutputType = {
    preferences_id: string
    preference_name: string
    description: string
    _count: PreferencesCountAggregateOutputType | null
    _min: PreferencesMinAggregateOutputType | null
    _max: PreferencesMaxAggregateOutputType | null
  }

  type GetPreferencesGroupByPayload<T extends PreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], PreferencesGroupByOutputType[P]>
        }
      >
    >


  export type PreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    preferences_id?: boolean
    preference_name?: boolean
    description?: boolean
    user_preferences?: boolean | Preferences$user_preferencesArgs<ExtArgs>
    _count?: boolean | PreferencesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferences"]>

  export type PreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    preferences_id?: boolean
    preference_name?: boolean
    description?: boolean
  }, ExtArgs["result"]["preferences"]>

  export type PreferencesSelectScalar = {
    preferences_id?: boolean
    preference_name?: boolean
    description?: boolean
  }

  export type PreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user_preferences?: boolean | Preferences$user_preferencesArgs<ExtArgs>
    _count?: boolean | PreferencesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Preferences"
    objects: {
      user_preferences: Prisma.$UserPreferencesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      preferences_id: string
      preference_name: string
      description: string
    }, ExtArgs["result"]["preferences"]>
    composites: {}
  }

  type PreferencesGetPayload<S extends boolean | null | undefined | PreferencesDefaultArgs> = $Result.GetResult<Prisma.$PreferencesPayload, S>

  type PreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PreferencesCountAggregateInputType | true
    }

  export interface PreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Preferences'], meta: { name: 'Preferences' } }
    /**
     * Find zero or one Preferences that matches the filter.
     * @param {PreferencesFindUniqueArgs} args - Arguments to find a Preferences
     * @example
     * // Get one Preferences
     * const preferences = await prisma.preferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferencesFindUniqueArgs>(args: SelectSubset<T, PreferencesFindUniqueArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Preferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PreferencesFindUniqueOrThrowArgs} args - Arguments to find a Preferences
     * @example
     * // Get one Preferences
     * const preferences = await prisma.preferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Preferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesFindFirstArgs} args - Arguments to find a Preferences
     * @example
     * // Get one Preferences
     * const preferences = await prisma.preferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferencesFindFirstArgs>(args?: SelectSubset<T, PreferencesFindFirstArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Preferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesFindFirstOrThrowArgs} args - Arguments to find a Preferences
     * @example
     * // Get one Preferences
     * const preferences = await prisma.preferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Preferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Preferences
     * const preferences = await prisma.preferences.findMany()
     * 
     * // Get first 10 Preferences
     * const preferences = await prisma.preferences.findMany({ take: 10 })
     * 
     * // Only select the `preferences_id`
     * const preferencesWithPreferences_idOnly = await prisma.preferences.findMany({ select: { preferences_id: true } })
     * 
     */
    findMany<T extends PreferencesFindManyArgs>(args?: SelectSubset<T, PreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Preferences.
     * @param {PreferencesCreateArgs} args - Arguments to create a Preferences.
     * @example
     * // Create one Preferences
     * const Preferences = await prisma.preferences.create({
     *   data: {
     *     // ... data to create a Preferences
     *   }
     * })
     * 
     */
    create<T extends PreferencesCreateArgs>(args: SelectSubset<T, PreferencesCreateArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Preferences.
     * @param {PreferencesCreateManyArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preferences = await prisma.preferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferencesCreateManyArgs>(args?: SelectSubset<T, PreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Preferences and returns the data saved in the database.
     * @param {PreferencesCreateManyAndReturnArgs} args - Arguments to create many Preferences.
     * @example
     * // Create many Preferences
     * const preferences = await prisma.preferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Preferences and only return the `preferences_id`
     * const preferencesWithPreferences_idOnly = await prisma.preferences.createManyAndReturn({ 
     *   select: { preferences_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Preferences.
     * @param {PreferencesDeleteArgs} args - Arguments to delete one Preferences.
     * @example
     * // Delete one Preferences
     * const Preferences = await prisma.preferences.delete({
     *   where: {
     *     // ... filter to delete one Preferences
     *   }
     * })
     * 
     */
    delete<T extends PreferencesDeleteArgs>(args: SelectSubset<T, PreferencesDeleteArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Preferences.
     * @param {PreferencesUpdateArgs} args - Arguments to update one Preferences.
     * @example
     * // Update one Preferences
     * const preferences = await prisma.preferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferencesUpdateArgs>(args: SelectSubset<T, PreferencesUpdateArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Preferences.
     * @param {PreferencesDeleteManyArgs} args - Arguments to filter Preferences to delete.
     * @example
     * // Delete a few Preferences
     * const { count } = await prisma.preferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferencesDeleteManyArgs>(args?: SelectSubset<T, PreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Preferences
     * const preferences = await prisma.preferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferencesUpdateManyArgs>(args: SelectSubset<T, PreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Preferences.
     * @param {PreferencesUpsertArgs} args - Arguments to update or create a Preferences.
     * @example
     * // Update or create a Preferences
     * const preferences = await prisma.preferences.upsert({
     *   create: {
     *     // ... data to create a Preferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Preferences we want to update
     *   }
     * })
     */
    upsert<T extends PreferencesUpsertArgs>(args: SelectSubset<T, PreferencesUpsertArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesCountArgs} args - Arguments to filter Preferences to count.
     * @example
     * // Count the number of Preferences
     * const count = await prisma.preferences.count({
     *   where: {
     *     // ... the filter for the Preferences we want to count
     *   }
     * })
    **/
    count<T extends PreferencesCountArgs>(
      args?: Subset<T, PreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferencesAggregateArgs>(args: Subset<T, PreferencesAggregateArgs>): Prisma.PrismaPromise<GetPreferencesAggregateType<T>>

    /**
     * Group by Preferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferencesGroupByArgs['orderBy'] }
        : { orderBy?: PreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Preferences model
   */
  readonly fields: PreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Preferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user_preferences<T extends Preferences$user_preferencesArgs<ExtArgs> = {}>(args?: Subset<T, Preferences$user_preferencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Preferences model
   */ 
  interface PreferencesFieldRefs {
    readonly preferences_id: FieldRef<"Preferences", 'String'>
    readonly preference_name: FieldRef<"Preferences", 'String'>
    readonly description: FieldRef<"Preferences", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Preferences findUnique
   */
  export type PreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where: PreferencesWhereUniqueInput
  }

  /**
   * Preferences findUniqueOrThrow
   */
  export type PreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where: PreferencesWhereUniqueInput
  }

  /**
   * Preferences findFirst
   */
  export type PreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferencesOrderByWithRelationInput | PreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferencesScalarFieldEnum | PreferencesScalarFieldEnum[]
  }

  /**
   * Preferences findFirstOrThrow
   */
  export type PreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferencesOrderByWithRelationInput | PreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Preferences.
     */
    cursor?: PreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Preferences.
     */
    distinct?: PreferencesScalarFieldEnum | PreferencesScalarFieldEnum[]
  }

  /**
   * Preferences findMany
   */
  export type PreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter, which Preferences to fetch.
     */
    where?: PreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Preferences to fetch.
     */
    orderBy?: PreferencesOrderByWithRelationInput | PreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Preferences.
     */
    cursor?: PreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Preferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Preferences.
     */
    skip?: number
    distinct?: PreferencesScalarFieldEnum | PreferencesScalarFieldEnum[]
  }

  /**
   * Preferences create
   */
  export type PreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a Preferences.
     */
    data: XOR<PreferencesCreateInput, PreferencesUncheckedCreateInput>
  }

  /**
   * Preferences createMany
   */
  export type PreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Preferences.
     */
    data: PreferencesCreateManyInput | PreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preferences createManyAndReturn
   */
  export type PreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Preferences.
     */
    data: PreferencesCreateManyInput | PreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Preferences update
   */
  export type PreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a Preferences.
     */
    data: XOR<PreferencesUpdateInput, PreferencesUncheckedUpdateInput>
    /**
     * Choose, which Preferences to update.
     */
    where: PreferencesWhereUniqueInput
  }

  /**
   * Preferences updateMany
   */
  export type PreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Preferences.
     */
    data: XOR<PreferencesUpdateManyMutationInput, PreferencesUncheckedUpdateManyInput>
    /**
     * Filter which Preferences to update
     */
    where?: PreferencesWhereInput
  }

  /**
   * Preferences upsert
   */
  export type PreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the Preferences to update in case it exists.
     */
    where: PreferencesWhereUniqueInput
    /**
     * In case the Preferences found by the `where` argument doesn't exist, create a new Preferences with this data.
     */
    create: XOR<PreferencesCreateInput, PreferencesUncheckedCreateInput>
    /**
     * In case the Preferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferencesUpdateInput, PreferencesUncheckedUpdateInput>
  }

  /**
   * Preferences delete
   */
  export type PreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
    /**
     * Filter which Preferences to delete.
     */
    where: PreferencesWhereUniqueInput
  }

  /**
   * Preferences deleteMany
   */
  export type PreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Preferences to delete
     */
    where?: PreferencesWhereInput
  }

  /**
   * Preferences.user_preferences
   */
  export type Preferences$user_preferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    cursor?: UserPreferencesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * Preferences without action
   */
  export type PreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Preferences
     */
    select?: PreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferencesInclude<ExtArgs> | null
  }


  /**
   * Model UserPreferences
   */

  export type AggregateUserPreferences = {
    _count: UserPreferencesCountAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  export type UserPreferencesMinAggregateOutputType = {
    user_preferences_id: string | null
    user_id: string | null
    preferences_id: string | null
  }

  export type UserPreferencesMaxAggregateOutputType = {
    user_preferences_id: string | null
    user_id: string | null
    preferences_id: string | null
  }

  export type UserPreferencesCountAggregateOutputType = {
    user_preferences_id: number
    user_id: number
    preferences_id: number
    _all: number
  }


  export type UserPreferencesMinAggregateInputType = {
    user_preferences_id?: true
    user_id?: true
    preferences_id?: true
  }

  export type UserPreferencesMaxAggregateInputType = {
    user_preferences_id?: true
    user_id?: true
    preferences_id?: true
  }

  export type UserPreferencesCountAggregateInputType = {
    user_preferences_id?: true
    user_id?: true
    preferences_id?: true
    _all?: true
  }

  export type UserPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to aggregate.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreferences[P]>
      : GetScalarType<T[P], AggregateUserPreferences[P]>
  }




  export type UserPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithAggregationInput | UserPreferencesOrderByWithAggregationInput[]
    by: UserPreferencesScalarFieldEnum[] | UserPreferencesScalarFieldEnum
    having?: UserPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferencesCountAggregateInputType | true
    _min?: UserPreferencesMinAggregateInputType
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type UserPreferencesGroupByOutputType = {
    user_preferences_id: string
    user_id: string
    preferences_id: string
    _count: UserPreferencesCountAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_preferences_id?: boolean
    user_id?: boolean
    preferences_id?: boolean
    preference?: boolean | PreferencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_preferences_id?: boolean
    user_id?: boolean
    preferences_id?: boolean
    preference?: boolean | PreferencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectScalar = {
    user_preferences_id?: boolean
    user_id?: boolean
    preferences_id?: boolean
  }

  export type UserPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preference?: boolean | PreferencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    preference?: boolean | PreferencesDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreferences"
    objects: {
      preference: Prisma.$PreferencesPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      user_preferences_id: string
      user_id: string
      preferences_id: string
    }, ExtArgs["result"]["userPreferences"]>
    composites: {}
  }

  type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencesPayload, S>

  type UserPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferencesCountAggregateInputType | true
    }

  export interface UserPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
    /**
     * Find zero or one UserPreferences that matches the filter.
     * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferencesFindUniqueArgs>(args: SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferencesFindFirstArgs>(args?: SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
     * 
     * // Only select the `user_preferences_id`
     * const userPreferencesWithUser_preferences_idOnly = await prisma.userPreferences.findMany({ select: { user_preferences_id: true } })
     * 
     */
    findMany<T extends UserPreferencesFindManyArgs>(args?: SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreferences.
     * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
     * @example
     * // Create one UserPreferences
     * const UserPreferences = await prisma.userPreferences.create({
     *   data: {
     *     // ... data to create a UserPreferences
     *   }
     * })
     * 
     */
    create<T extends UserPreferencesCreateArgs>(args: SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferencesCreateManyArgs>(args?: SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferencesCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `user_preferences_id`
     * const userPreferencesWithUser_preferences_idOnly = await prisma.userPreferences.createManyAndReturn({ 
     *   select: { user_preferences_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPreferences.
     * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
     * @example
     * // Delete one UserPreferences
     * const UserPreferences = await prisma.userPreferences.delete({
     *   where: {
     *     // ... filter to delete one UserPreferences
     *   }
     * })
     * 
     */
    delete<T extends UserPreferencesDeleteArgs>(args: SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreferences.
     * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
     * @example
     * // Update one UserPreferences
     * const userPreferences = await prisma.userPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferencesUpdateArgs>(args: SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferencesDeleteManyArgs>(args?: SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferencesUpdateManyArgs>(args: SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreferences.
     * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
     * @example
     * // Update or create a UserPreferences
     * const userPreferences = await prisma.userPreferences.upsert({
     *   create: {
     *     // ... data to create a UserPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreferences we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferencesUpsertArgs>(args: SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreferences.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferencesCountArgs>(
      args?: Subset<T, UserPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferencesAggregateArgs>(args: Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

    /**
     * Group by UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreferences model
   */
  readonly fields: UserPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    preference<T extends PreferencesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PreferencesDefaultArgs<ExtArgs>>): Prisma__PreferencesClient<$Result.GetResult<Prisma.$PreferencesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreferences model
   */ 
  interface UserPreferencesFieldRefs {
    readonly user_preferences_id: FieldRef<"UserPreferences", 'String'>
    readonly user_id: FieldRef<"UserPreferences", 'String'>
    readonly preferences_id: FieldRef<"UserPreferences", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserPreferences findUnique
   */
  export type UserPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findUniqueOrThrow
   */
  export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findFirst
   */
  export type UserPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findFirstOrThrow
   */
  export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findMany
   */
  export type UserPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences create
   */
  export type UserPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreferences.
     */
    data: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
  }

  /**
   * UserPreferences createMany
   */
  export type UserPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreferences createManyAndReturn
   */
  export type UserPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreferences update
   */
  export type UserPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreferences.
     */
    data: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
    /**
     * Choose, which UserPreferences to update.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences updateMany
   */
  export type UserPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences upsert
   */
  export type UserPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreferences to update in case it exists.
     */
    where: UserPreferencesWhereUniqueInput
    /**
     * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
     */
    create: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
    /**
     * In case the UserPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
  }

  /**
   * UserPreferences delete
   */
  export type UserPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter which UserPreferences to delete.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences deleteMany
   */
  export type UserPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences without action
   */
  export type UserPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    account_status: 'account_status',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventOrganizerScalarFieldEnum: {
    organizer_id: 'organizer_id',
    organizer_name: 'organizer_name',
    organizer_email: 'organizer_email',
    contact_number: 'contact_number',
    gst_number: 'gst_number',
    legal_status: 'legal_status',
    approval_date: 'approval_date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    password: 'password'
  };

  export type EventOrganizerScalarFieldEnum = (typeof EventOrganizerScalarFieldEnum)[keyof typeof EventOrganizerScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    location_id: 'location_id',
    address: 'address',
    city: 'city',
    state: 'state',
    country: 'country',
    zip_code: 'zip_code',
    timezone: 'timezone',
    latitude: 'latitude',
    longitude: 'longitude',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const EventScalarFieldEnum: {
    event_id: 'event_id',
    organizer_id: 'organizer_id',
    event_name: 'event_name',
    description: 'description',
    event_type: 'event_type',
    start_date: 'start_date',
    end_date: 'end_date',
    location_id: 'location_id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ticket_limit: 'ticket_limit'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SeatsInventoryScalarFieldEnum: {
    seat_id: 'seat_id',
    event_id: 'event_id',
    seat_number: 'seat_number',
    seat_type: 'seat_type',
    price: 'price',
    seat_status: 'seat_status'
  };

  export type SeatsInventoryScalarFieldEnum = (typeof SeatsInventoryScalarFieldEnum)[keyof typeof SeatsInventoryScalarFieldEnum]


  export const EventBookingScalarFieldEnum: {
    event_booking_id: 'event_booking_id',
    event_id: 'event_id',
    user_id: 'user_id',
    seat_id: 'seat_id',
    booking_date: 'booking_date',
    amount_paid: 'amount_paid',
    cancellation_date: 'cancellation_date',
    createdAt: 'createdAt',
    payment_status: 'payment_status'
  };

  export type EventBookingScalarFieldEnum = (typeof EventBookingScalarFieldEnum)[keyof typeof EventBookingScalarFieldEnum]


  export const BookingHistoryScalarFieldEnum: {
    history_id: 'history_id',
    user_id: 'user_id',
    event_id: 'event_id',
    booking_date: 'booking_date',
    ticket_type: 'ticket_type',
    payment_status: 'payment_status',
    ticket_quantity: 'ticket_quantity',
    amount_paid: 'amount_paid',
    createdAt: 'createdAt'
  };

  export type BookingHistoryScalarFieldEnum = (typeof BookingHistoryScalarFieldEnum)[keyof typeof BookingHistoryScalarFieldEnum]


  export const PaymentInfoScalarFieldEnum: {
    payment_info_id: 'payment_info_id',
    user_id: 'user_id',
    card_token: 'card_token',
    expiry_date: 'expiry_date',
    billing_address: 'billing_address',
    payment_type: 'payment_type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentInfoScalarFieldEnum = (typeof PaymentInfoScalarFieldEnum)[keyof typeof PaymentInfoScalarFieldEnum]


  export const PaymentTransactionScalarFieldEnum: {
    transaction_id: 'transaction_id',
    user_id: 'user_id',
    event_booking_id: 'event_booking_id',
    payment_info_id: 'payment_info_id',
    amount: 'amount',
    status: 'status',
    transaction_date: 'transaction_date'
  };

  export type PaymentTransactionScalarFieldEnum = (typeof PaymentTransactionScalarFieldEnum)[keyof typeof PaymentTransactionScalarFieldEnum]


  export const PreferencesScalarFieldEnum: {
    preferences_id: 'preferences_id',
    preference_name: 'preference_name',
    description: 'description'
  };

  export type PreferencesScalarFieldEnum = (typeof PreferencesScalarFieldEnum)[keyof typeof PreferencesScalarFieldEnum]


  export const UserPreferencesScalarFieldEnum: {
    user_preferences_id: 'user_preferences_id',
    user_id: 'user_id',
    preferences_id: 'preferences_id'
  };

  export type UserPreferencesScalarFieldEnum = (typeof UserPreferencesScalarFieldEnum)[keyof typeof UserPreferencesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'AccountStatus'
   */
  export type EnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus'>
    


  /**
   * Reference to a field of type 'AccountStatus[]'
   */
  export type ListEnumAccountStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountStatus[]'>
    


  /**
   * Reference to a field of type 'LegalStatus'
   */
  export type EnumLegalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LegalStatus'>
    


  /**
   * Reference to a field of type 'LegalStatus[]'
   */
  export type ListEnumLegalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LegalStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'EventType'
   */
  export type EnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType'>
    


  /**
   * Reference to a field of type 'EventType[]'
   */
  export type ListEnumEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventType[]'>
    


  /**
   * Reference to a field of type 'EventStatus'
   */
  export type EnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus'>
    


  /**
   * Reference to a field of type 'EventStatus[]'
   */
  export type ListEnumEventStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'SeatType'
   */
  export type EnumSeatTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SeatType'>
    


  /**
   * Reference to a field of type 'SeatType[]'
   */
  export type ListEnumSeatTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SeatType[]'>
    


  /**
   * Reference to a field of type 'SeatStatus'
   */
  export type EnumSeatStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SeatStatus'>
    


  /**
   * Reference to a field of type 'SeatStatus[]'
   */
  export type ListEnumSeatStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SeatStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'TicketType'
   */
  export type EnumTicketTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketType'>
    


  /**
   * Reference to a field of type 'TicketType[]'
   */
  export type ListEnumTicketTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TicketType[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'TransactionStatus'
   */
  export type EnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus'>
    


  /**
   * Reference to a field of type 'TransactionStatus[]'
   */
  export type ListEnumTransactionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: StringFilter<"User"> | string
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account_status?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    password?: StringFilter<"User"> | string
    booking_histories?: BookingHistoryListRelationFilter
    event_bookings?: EventBookingListRelationFilter
    payment_info?: PaymentInfoListRelationFilter
    payment_transactions?: PaymentTransactionListRelationFilter
    user_preferences?: UserPreferencesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account_status?: SortOrder
    password?: SortOrder
    booking_histories?: BookingHistoryOrderByRelationAggregateInput
    event_bookings?: EventBookingOrderByRelationAggregateInput
    payment_info?: PaymentInfoOrderByRelationAggregateInput
    payment_transactions?: PaymentTransactionOrderByRelationAggregateInput
    user_preferences?: UserPreferencesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account_status?: EnumAccountStatusFilter<"User"> | $Enums.AccountStatus
    password?: StringFilter<"User"> | string
    booking_histories?: BookingHistoryListRelationFilter
    event_bookings?: EventBookingListRelationFilter
    payment_info?: PaymentInfoListRelationFilter
    payment_transactions?: PaymentTransactionListRelationFilter
    user_preferences?: UserPreferencesListRelationFilter
  }, "user_id" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account_status?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"User"> | string
    first_name?: StringWithAggregatesFilter<"User"> | string
    last_name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    account_status?: EnumAccountStatusWithAggregatesFilter<"User"> | $Enums.AccountStatus
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type EventOrganizerWhereInput = {
    AND?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    OR?: EventOrganizerWhereInput[]
    NOT?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    organizer_id?: StringFilter<"EventOrganizer"> | string
    organizer_name?: StringFilter<"EventOrganizer"> | string
    organizer_email?: StringFilter<"EventOrganizer"> | string
    contact_number?: StringFilter<"EventOrganizer"> | string
    gst_number?: StringFilter<"EventOrganizer"> | string
    legal_status?: EnumLegalStatusFilter<"EventOrganizer"> | $Enums.LegalStatus
    approval_date?: DateTimeNullableFilter<"EventOrganizer"> | Date | string | null
    createdAt?: DateTimeFilter<"EventOrganizer"> | Date | string
    updatedAt?: DateTimeFilter<"EventOrganizer"> | Date | string
    password?: StringFilter<"EventOrganizer"> | string
    events?: EventListRelationFilter
  }

  export type EventOrganizerOrderByWithRelationInput = {
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_email?: SortOrder
    contact_number?: SortOrder
    gst_number?: SortOrder
    legal_status?: SortOrder
    approval_date?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    events?: EventOrderByRelationAggregateInput
  }

  export type EventOrganizerWhereUniqueInput = Prisma.AtLeast<{
    organizer_id?: string
    organizer_email?: string
    gst_number?: string
    AND?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    OR?: EventOrganizerWhereInput[]
    NOT?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    organizer_name?: StringFilter<"EventOrganizer"> | string
    contact_number?: StringFilter<"EventOrganizer"> | string
    legal_status?: EnumLegalStatusFilter<"EventOrganizer"> | $Enums.LegalStatus
    approval_date?: DateTimeNullableFilter<"EventOrganizer"> | Date | string | null
    createdAt?: DateTimeFilter<"EventOrganizer"> | Date | string
    updatedAt?: DateTimeFilter<"EventOrganizer"> | Date | string
    password?: StringFilter<"EventOrganizer"> | string
    events?: EventListRelationFilter
  }, "organizer_id" | "organizer_email" | "gst_number">

  export type EventOrganizerOrderByWithAggregationInput = {
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_email?: SortOrder
    contact_number?: SortOrder
    gst_number?: SortOrder
    legal_status?: SortOrder
    approval_date?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
    _count?: EventOrganizerCountOrderByAggregateInput
    _max?: EventOrganizerMaxOrderByAggregateInput
    _min?: EventOrganizerMinOrderByAggregateInput
  }

  export type EventOrganizerScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerScalarWhereWithAggregatesInput | EventOrganizerScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerScalarWhereWithAggregatesInput | EventOrganizerScalarWhereWithAggregatesInput[]
    organizer_id?: StringWithAggregatesFilter<"EventOrganizer"> | string
    organizer_name?: StringWithAggregatesFilter<"EventOrganizer"> | string
    organizer_email?: StringWithAggregatesFilter<"EventOrganizer"> | string
    contact_number?: StringWithAggregatesFilter<"EventOrganizer"> | string
    gst_number?: StringWithAggregatesFilter<"EventOrganizer"> | string
    legal_status?: EnumLegalStatusWithAggregatesFilter<"EventOrganizer"> | $Enums.LegalStatus
    approval_date?: DateTimeNullableWithAggregatesFilter<"EventOrganizer"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EventOrganizer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EventOrganizer"> | Date | string
    password?: StringWithAggregatesFilter<"EventOrganizer"> | string
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    location_id?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    city?: StringFilter<"Location"> | string
    state?: StringFilter<"Location"> | string
    country?: StringFilter<"Location"> | string
    zip_code?: StringFilter<"Location"> | string
    timezone?: StringFilter<"Location"> | string
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    events?: EventListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    location_id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    timezone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    events?: EventOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    location_id?: string
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    address?: StringFilter<"Location"> | string
    city?: StringFilter<"Location"> | string
    state?: StringFilter<"Location"> | string
    country?: StringFilter<"Location"> | string
    zip_code?: StringFilter<"Location"> | string
    timezone?: StringFilter<"Location"> | string
    latitude?: FloatFilter<"Location"> | number
    longitude?: FloatFilter<"Location"> | number
    createdAt?: DateTimeFilter<"Location"> | Date | string
    updatedAt?: DateTimeFilter<"Location"> | Date | string
    events?: EventListRelationFilter
  }, "location_id">

  export type LocationOrderByWithAggregationInput = {
    location_id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    timezone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    location_id?: StringWithAggregatesFilter<"Location"> | string
    address?: StringWithAggregatesFilter<"Location"> | string
    city?: StringWithAggregatesFilter<"Location"> | string
    state?: StringWithAggregatesFilter<"Location"> | string
    country?: StringWithAggregatesFilter<"Location"> | string
    zip_code?: StringWithAggregatesFilter<"Location"> | string
    timezone?: StringWithAggregatesFilter<"Location"> | string
    latitude?: FloatWithAggregatesFilter<"Location"> | number
    longitude?: FloatWithAggregatesFilter<"Location"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Location"> | Date | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    event_id?: StringFilter<"Event"> | string
    organizer_id?: StringFilter<"Event"> | string
    event_name?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    event_type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    location_id?: StringFilter<"Event"> | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    ticket_limit?: IntNullableFilter<"Event"> | number | null
    booking_histories?: BookingHistoryListRelationFilter
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    organizer?: XOR<EventOrganizerRelationFilter, EventOrganizerWhereInput>
    event_bookings?: EventBookingListRelationFilter
    seats_inventory?: SeatsInventoryListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    event_id?: SortOrder
    organizer_id?: SortOrder
    event_name?: SortOrder
    description?: SortOrder
    event_type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket_limit?: SortOrderInput | SortOrder
    booking_histories?: BookingHistoryOrderByRelationAggregateInput
    location?: LocationOrderByWithRelationInput
    organizer?: EventOrganizerOrderByWithRelationInput
    event_bookings?: EventBookingOrderByRelationAggregateInput
    seats_inventory?: SeatsInventoryOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    event_id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    organizer_id?: StringFilter<"Event"> | string
    event_name?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    event_type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    location_id?: StringFilter<"Event"> | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    ticket_limit?: IntNullableFilter<"Event"> | number | null
    booking_histories?: BookingHistoryListRelationFilter
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    organizer?: XOR<EventOrganizerRelationFilter, EventOrganizerWhereInput>
    event_bookings?: EventBookingListRelationFilter
    seats_inventory?: SeatsInventoryListRelationFilter
  }, "event_id">

  export type EventOrderByWithAggregationInput = {
    event_id?: SortOrder
    organizer_id?: SortOrder
    event_name?: SortOrder
    description?: SortOrder
    event_type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket_limit?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    event_id?: StringWithAggregatesFilter<"Event"> | string
    organizer_id?: StringWithAggregatesFilter<"Event"> | string
    event_name?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    event_type?: EnumEventTypeWithAggregatesFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    location_id?: StringWithAggregatesFilter<"Event"> | string
    status?: EnumEventStatusWithAggregatesFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    ticket_limit?: IntNullableWithAggregatesFilter<"Event"> | number | null
  }

  export type SeatsInventoryWhereInput = {
    AND?: SeatsInventoryWhereInput | SeatsInventoryWhereInput[]
    OR?: SeatsInventoryWhereInput[]
    NOT?: SeatsInventoryWhereInput | SeatsInventoryWhereInput[]
    seat_id?: StringFilter<"SeatsInventory"> | string
    event_id?: StringFilter<"SeatsInventory"> | string
    seat_number?: StringFilter<"SeatsInventory"> | string
    seat_type?: EnumSeatTypeFilter<"SeatsInventory"> | $Enums.SeatType
    price?: FloatFilter<"SeatsInventory"> | number
    seat_status?: EnumSeatStatusFilter<"SeatsInventory"> | $Enums.SeatStatus
    event_bookings?: EventBookingListRelationFilter
    event?: XOR<EventRelationFilter, EventWhereInput>
  }

  export type SeatsInventoryOrderByWithRelationInput = {
    seat_id?: SortOrder
    event_id?: SortOrder
    seat_number?: SortOrder
    seat_type?: SortOrder
    price?: SortOrder
    seat_status?: SortOrder
    event_bookings?: EventBookingOrderByRelationAggregateInput
    event?: EventOrderByWithRelationInput
  }

  export type SeatsInventoryWhereUniqueInput = Prisma.AtLeast<{
    seat_id?: string
    AND?: SeatsInventoryWhereInput | SeatsInventoryWhereInput[]
    OR?: SeatsInventoryWhereInput[]
    NOT?: SeatsInventoryWhereInput | SeatsInventoryWhereInput[]
    event_id?: StringFilter<"SeatsInventory"> | string
    seat_number?: StringFilter<"SeatsInventory"> | string
    seat_type?: EnumSeatTypeFilter<"SeatsInventory"> | $Enums.SeatType
    price?: FloatFilter<"SeatsInventory"> | number
    seat_status?: EnumSeatStatusFilter<"SeatsInventory"> | $Enums.SeatStatus
    event_bookings?: EventBookingListRelationFilter
    event?: XOR<EventRelationFilter, EventWhereInput>
  }, "seat_id">

  export type SeatsInventoryOrderByWithAggregationInput = {
    seat_id?: SortOrder
    event_id?: SortOrder
    seat_number?: SortOrder
    seat_type?: SortOrder
    price?: SortOrder
    seat_status?: SortOrder
    _count?: SeatsInventoryCountOrderByAggregateInput
    _avg?: SeatsInventoryAvgOrderByAggregateInput
    _max?: SeatsInventoryMaxOrderByAggregateInput
    _min?: SeatsInventoryMinOrderByAggregateInput
    _sum?: SeatsInventorySumOrderByAggregateInput
  }

  export type SeatsInventoryScalarWhereWithAggregatesInput = {
    AND?: SeatsInventoryScalarWhereWithAggregatesInput | SeatsInventoryScalarWhereWithAggregatesInput[]
    OR?: SeatsInventoryScalarWhereWithAggregatesInput[]
    NOT?: SeatsInventoryScalarWhereWithAggregatesInput | SeatsInventoryScalarWhereWithAggregatesInput[]
    seat_id?: StringWithAggregatesFilter<"SeatsInventory"> | string
    event_id?: StringWithAggregatesFilter<"SeatsInventory"> | string
    seat_number?: StringWithAggregatesFilter<"SeatsInventory"> | string
    seat_type?: EnumSeatTypeWithAggregatesFilter<"SeatsInventory"> | $Enums.SeatType
    price?: FloatWithAggregatesFilter<"SeatsInventory"> | number
    seat_status?: EnumSeatStatusWithAggregatesFilter<"SeatsInventory"> | $Enums.SeatStatus
  }

  export type EventBookingWhereInput = {
    AND?: EventBookingWhereInput | EventBookingWhereInput[]
    OR?: EventBookingWhereInput[]
    NOT?: EventBookingWhereInput | EventBookingWhereInput[]
    event_booking_id?: StringFilter<"EventBooking"> | string
    event_id?: StringFilter<"EventBooking"> | string
    user_id?: StringFilter<"EventBooking"> | string
    seat_id?: StringFilter<"EventBooking"> | string
    booking_date?: DateTimeFilter<"EventBooking"> | Date | string
    amount_paid?: FloatFilter<"EventBooking"> | number
    cancellation_date?: DateTimeNullableFilter<"EventBooking"> | Date | string | null
    createdAt?: DateTimeFilter<"EventBooking"> | Date | string
    payment_status?: EnumPaymentStatusFilter<"EventBooking"> | $Enums.PaymentStatus
    event?: XOR<EventRelationFilter, EventWhereInput>
    seat?: XOR<SeatsInventoryRelationFilter, SeatsInventoryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment_transaction?: PaymentTransactionListRelationFilter
  }

  export type EventBookingOrderByWithRelationInput = {
    event_booking_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    seat_id?: SortOrder
    booking_date?: SortOrder
    amount_paid?: SortOrder
    cancellation_date?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    payment_status?: SortOrder
    event?: EventOrderByWithRelationInput
    seat?: SeatsInventoryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    payment_transaction?: PaymentTransactionOrderByRelationAggregateInput
  }

  export type EventBookingWhereUniqueInput = Prisma.AtLeast<{
    event_booking_id?: string
    AND?: EventBookingWhereInput | EventBookingWhereInput[]
    OR?: EventBookingWhereInput[]
    NOT?: EventBookingWhereInput | EventBookingWhereInput[]
    event_id?: StringFilter<"EventBooking"> | string
    user_id?: StringFilter<"EventBooking"> | string
    seat_id?: StringFilter<"EventBooking"> | string
    booking_date?: DateTimeFilter<"EventBooking"> | Date | string
    amount_paid?: FloatFilter<"EventBooking"> | number
    cancellation_date?: DateTimeNullableFilter<"EventBooking"> | Date | string | null
    createdAt?: DateTimeFilter<"EventBooking"> | Date | string
    payment_status?: EnumPaymentStatusFilter<"EventBooking"> | $Enums.PaymentStatus
    event?: XOR<EventRelationFilter, EventWhereInput>
    seat?: XOR<SeatsInventoryRelationFilter, SeatsInventoryWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment_transaction?: PaymentTransactionListRelationFilter
  }, "event_booking_id">

  export type EventBookingOrderByWithAggregationInput = {
    event_booking_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    seat_id?: SortOrder
    booking_date?: SortOrder
    amount_paid?: SortOrder
    cancellation_date?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    payment_status?: SortOrder
    _count?: EventBookingCountOrderByAggregateInput
    _avg?: EventBookingAvgOrderByAggregateInput
    _max?: EventBookingMaxOrderByAggregateInput
    _min?: EventBookingMinOrderByAggregateInput
    _sum?: EventBookingSumOrderByAggregateInput
  }

  export type EventBookingScalarWhereWithAggregatesInput = {
    AND?: EventBookingScalarWhereWithAggregatesInput | EventBookingScalarWhereWithAggregatesInput[]
    OR?: EventBookingScalarWhereWithAggregatesInput[]
    NOT?: EventBookingScalarWhereWithAggregatesInput | EventBookingScalarWhereWithAggregatesInput[]
    event_booking_id?: StringWithAggregatesFilter<"EventBooking"> | string
    event_id?: StringWithAggregatesFilter<"EventBooking"> | string
    user_id?: StringWithAggregatesFilter<"EventBooking"> | string
    seat_id?: StringWithAggregatesFilter<"EventBooking"> | string
    booking_date?: DateTimeWithAggregatesFilter<"EventBooking"> | Date | string
    amount_paid?: FloatWithAggregatesFilter<"EventBooking"> | number
    cancellation_date?: DateTimeNullableWithAggregatesFilter<"EventBooking"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EventBooking"> | Date | string
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"EventBooking"> | $Enums.PaymentStatus
  }

  export type BookingHistoryWhereInput = {
    AND?: BookingHistoryWhereInput | BookingHistoryWhereInput[]
    OR?: BookingHistoryWhereInput[]
    NOT?: BookingHistoryWhereInput | BookingHistoryWhereInput[]
    history_id?: StringFilter<"BookingHistory"> | string
    user_id?: StringFilter<"BookingHistory"> | string
    event_id?: StringFilter<"BookingHistory"> | string
    booking_date?: DateTimeFilter<"BookingHistory"> | Date | string
    ticket_type?: EnumTicketTypeFilter<"BookingHistory"> | $Enums.TicketType
    payment_status?: EnumPaymentStatusFilter<"BookingHistory"> | $Enums.PaymentStatus
    ticket_quantity?: IntFilter<"BookingHistory"> | number
    amount_paid?: FloatFilter<"BookingHistory"> | number
    createdAt?: DateTimeFilter<"BookingHistory"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BookingHistoryOrderByWithRelationInput = {
    history_id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    booking_date?: SortOrder
    ticket_type?: SortOrder
    payment_status?: SortOrder
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
    createdAt?: SortOrder
    event?: EventOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BookingHistoryWhereUniqueInput = Prisma.AtLeast<{
    history_id?: string
    AND?: BookingHistoryWhereInput | BookingHistoryWhereInput[]
    OR?: BookingHistoryWhereInput[]
    NOT?: BookingHistoryWhereInput | BookingHistoryWhereInput[]
    user_id?: StringFilter<"BookingHistory"> | string
    event_id?: StringFilter<"BookingHistory"> | string
    booking_date?: DateTimeFilter<"BookingHistory"> | Date | string
    ticket_type?: EnumTicketTypeFilter<"BookingHistory"> | $Enums.TicketType
    payment_status?: EnumPaymentStatusFilter<"BookingHistory"> | $Enums.PaymentStatus
    ticket_quantity?: IntFilter<"BookingHistory"> | number
    amount_paid?: FloatFilter<"BookingHistory"> | number
    createdAt?: DateTimeFilter<"BookingHistory"> | Date | string
    event?: XOR<EventRelationFilter, EventWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "history_id">

  export type BookingHistoryOrderByWithAggregationInput = {
    history_id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    booking_date?: SortOrder
    ticket_type?: SortOrder
    payment_status?: SortOrder
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
    createdAt?: SortOrder
    _count?: BookingHistoryCountOrderByAggregateInput
    _avg?: BookingHistoryAvgOrderByAggregateInput
    _max?: BookingHistoryMaxOrderByAggregateInput
    _min?: BookingHistoryMinOrderByAggregateInput
    _sum?: BookingHistorySumOrderByAggregateInput
  }

  export type BookingHistoryScalarWhereWithAggregatesInput = {
    AND?: BookingHistoryScalarWhereWithAggregatesInput | BookingHistoryScalarWhereWithAggregatesInput[]
    OR?: BookingHistoryScalarWhereWithAggregatesInput[]
    NOT?: BookingHistoryScalarWhereWithAggregatesInput | BookingHistoryScalarWhereWithAggregatesInput[]
    history_id?: StringWithAggregatesFilter<"BookingHistory"> | string
    user_id?: StringWithAggregatesFilter<"BookingHistory"> | string
    event_id?: StringWithAggregatesFilter<"BookingHistory"> | string
    booking_date?: DateTimeWithAggregatesFilter<"BookingHistory"> | Date | string
    ticket_type?: EnumTicketTypeWithAggregatesFilter<"BookingHistory"> | $Enums.TicketType
    payment_status?: EnumPaymentStatusWithAggregatesFilter<"BookingHistory"> | $Enums.PaymentStatus
    ticket_quantity?: IntWithAggregatesFilter<"BookingHistory"> | number
    amount_paid?: FloatWithAggregatesFilter<"BookingHistory"> | number
    createdAt?: DateTimeWithAggregatesFilter<"BookingHistory"> | Date | string
  }

  export type PaymentInfoWhereInput = {
    AND?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    OR?: PaymentInfoWhereInput[]
    NOT?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    payment_info_id?: StringFilter<"PaymentInfo"> | string
    user_id?: StringFilter<"PaymentInfo"> | string
    card_token?: StringFilter<"PaymentInfo"> | string
    expiry_date?: DateTimeFilter<"PaymentInfo"> | Date | string
    billing_address?: StringFilter<"PaymentInfo"> | string
    payment_type?: EnumPaymentTypeFilter<"PaymentInfo"> | $Enums.PaymentType
    createdAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment_transactions?: PaymentTransactionListRelationFilter
  }

  export type PaymentInfoOrderByWithRelationInput = {
    payment_info_id?: SortOrder
    user_id?: SortOrder
    card_token?: SortOrder
    expiry_date?: SortOrder
    billing_address?: SortOrder
    payment_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    payment_transactions?: PaymentTransactionOrderByRelationAggregateInput
  }

  export type PaymentInfoWhereUniqueInput = Prisma.AtLeast<{
    payment_info_id?: string
    AND?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    OR?: PaymentInfoWhereInput[]
    NOT?: PaymentInfoWhereInput | PaymentInfoWhereInput[]
    user_id?: StringFilter<"PaymentInfo"> | string
    card_token?: StringFilter<"PaymentInfo"> | string
    expiry_date?: DateTimeFilter<"PaymentInfo"> | Date | string
    billing_address?: StringFilter<"PaymentInfo"> | string
    payment_type?: EnumPaymentTypeFilter<"PaymentInfo"> | $Enums.PaymentType
    createdAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment_transactions?: PaymentTransactionListRelationFilter
  }, "payment_info_id">

  export type PaymentInfoOrderByWithAggregationInput = {
    payment_info_id?: SortOrder
    user_id?: SortOrder
    card_token?: SortOrder
    expiry_date?: SortOrder
    billing_address?: SortOrder
    payment_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentInfoCountOrderByAggregateInput
    _max?: PaymentInfoMaxOrderByAggregateInput
    _min?: PaymentInfoMinOrderByAggregateInput
  }

  export type PaymentInfoScalarWhereWithAggregatesInput = {
    AND?: PaymentInfoScalarWhereWithAggregatesInput | PaymentInfoScalarWhereWithAggregatesInput[]
    OR?: PaymentInfoScalarWhereWithAggregatesInput[]
    NOT?: PaymentInfoScalarWhereWithAggregatesInput | PaymentInfoScalarWhereWithAggregatesInput[]
    payment_info_id?: StringWithAggregatesFilter<"PaymentInfo"> | string
    user_id?: StringWithAggregatesFilter<"PaymentInfo"> | string
    card_token?: StringWithAggregatesFilter<"PaymentInfo"> | string
    expiry_date?: DateTimeWithAggregatesFilter<"PaymentInfo"> | Date | string
    billing_address?: StringWithAggregatesFilter<"PaymentInfo"> | string
    payment_type?: EnumPaymentTypeWithAggregatesFilter<"PaymentInfo"> | $Enums.PaymentType
    createdAt?: DateTimeWithAggregatesFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentInfo"> | Date | string
  }

  export type PaymentTransactionWhereInput = {
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    transaction_id?: StringFilter<"PaymentTransaction"> | string
    user_id?: StringFilter<"PaymentTransaction"> | string
    event_booking_id?: StringFilter<"PaymentTransaction"> | string
    payment_info_id?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    status?: EnumTransactionStatusFilter<"PaymentTransaction"> | $Enums.TransactionStatus
    transaction_date?: DateTimeFilter<"PaymentTransaction"> | Date | string
    event_booking?: XOR<EventBookingRelationFilter, EventBookingWhereInput>
    payment_info?: XOR<PaymentInfoRelationFilter, PaymentInfoWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PaymentTransactionOrderByWithRelationInput = {
    transaction_id?: SortOrder
    user_id?: SortOrder
    event_booking_id?: SortOrder
    payment_info_id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    transaction_date?: SortOrder
    event_booking?: EventBookingOrderByWithRelationInput
    payment_info?: PaymentInfoOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PaymentTransactionWhereUniqueInput = Prisma.AtLeast<{
    transaction_id?: string
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    user_id?: StringFilter<"PaymentTransaction"> | string
    event_booking_id?: StringFilter<"PaymentTransaction"> | string
    payment_info_id?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    status?: EnumTransactionStatusFilter<"PaymentTransaction"> | $Enums.TransactionStatus
    transaction_date?: DateTimeFilter<"PaymentTransaction"> | Date | string
    event_booking?: XOR<EventBookingRelationFilter, EventBookingWhereInput>
    payment_info?: XOR<PaymentInfoRelationFilter, PaymentInfoWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "transaction_id">

  export type PaymentTransactionOrderByWithAggregationInput = {
    transaction_id?: SortOrder
    user_id?: SortOrder
    event_booking_id?: SortOrder
    payment_info_id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    transaction_date?: SortOrder
    _count?: PaymentTransactionCountOrderByAggregateInput
    _avg?: PaymentTransactionAvgOrderByAggregateInput
    _max?: PaymentTransactionMaxOrderByAggregateInput
    _min?: PaymentTransactionMinOrderByAggregateInput
    _sum?: PaymentTransactionSumOrderByAggregateInput
  }

  export type PaymentTransactionScalarWhereWithAggregatesInput = {
    AND?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    OR?: PaymentTransactionScalarWhereWithAggregatesInput[]
    NOT?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    transaction_id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    user_id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    event_booking_id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    payment_info_id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    amount?: FloatWithAggregatesFilter<"PaymentTransaction"> | number
    status?: EnumTransactionStatusWithAggregatesFilter<"PaymentTransaction"> | $Enums.TransactionStatus
    transaction_date?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  }

  export type PreferencesWhereInput = {
    AND?: PreferencesWhereInput | PreferencesWhereInput[]
    OR?: PreferencesWhereInput[]
    NOT?: PreferencesWhereInput | PreferencesWhereInput[]
    preferences_id?: StringFilter<"Preferences"> | string
    preference_name?: StringFilter<"Preferences"> | string
    description?: StringFilter<"Preferences"> | string
    user_preferences?: UserPreferencesListRelationFilter
  }

  export type PreferencesOrderByWithRelationInput = {
    preferences_id?: SortOrder
    preference_name?: SortOrder
    description?: SortOrder
    user_preferences?: UserPreferencesOrderByRelationAggregateInput
  }

  export type PreferencesWhereUniqueInput = Prisma.AtLeast<{
    preferences_id?: string
    AND?: PreferencesWhereInput | PreferencesWhereInput[]
    OR?: PreferencesWhereInput[]
    NOT?: PreferencesWhereInput | PreferencesWhereInput[]
    preference_name?: StringFilter<"Preferences"> | string
    description?: StringFilter<"Preferences"> | string
    user_preferences?: UserPreferencesListRelationFilter
  }, "preferences_id">

  export type PreferencesOrderByWithAggregationInput = {
    preferences_id?: SortOrder
    preference_name?: SortOrder
    description?: SortOrder
    _count?: PreferencesCountOrderByAggregateInput
    _max?: PreferencesMaxOrderByAggregateInput
    _min?: PreferencesMinOrderByAggregateInput
  }

  export type PreferencesScalarWhereWithAggregatesInput = {
    AND?: PreferencesScalarWhereWithAggregatesInput | PreferencesScalarWhereWithAggregatesInput[]
    OR?: PreferencesScalarWhereWithAggregatesInput[]
    NOT?: PreferencesScalarWhereWithAggregatesInput | PreferencesScalarWhereWithAggregatesInput[]
    preferences_id?: StringWithAggregatesFilter<"Preferences"> | string
    preference_name?: StringWithAggregatesFilter<"Preferences"> | string
    description?: StringWithAggregatesFilter<"Preferences"> | string
  }

  export type UserPreferencesWhereInput = {
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    user_preferences_id?: StringFilter<"UserPreferences"> | string
    user_id?: StringFilter<"UserPreferences"> | string
    preferences_id?: StringFilter<"UserPreferences"> | string
    preference?: XOR<PreferencesRelationFilter, PreferencesWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferencesOrderByWithRelationInput = {
    user_preferences_id?: SortOrder
    user_id?: SortOrder
    preferences_id?: SortOrder
    preference?: PreferencesOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferencesWhereUniqueInput = Prisma.AtLeast<{
    user_preferences_id?: string
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    user_id?: StringFilter<"UserPreferences"> | string
    preferences_id?: StringFilter<"UserPreferences"> | string
    preference?: XOR<PreferencesRelationFilter, PreferencesWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "user_preferences_id">

  export type UserPreferencesOrderByWithAggregationInput = {
    user_preferences_id?: SortOrder
    user_id?: SortOrder
    preferences_id?: SortOrder
    _count?: UserPreferencesCountOrderByAggregateInput
    _max?: UserPreferencesMaxOrderByAggregateInput
    _min?: UserPreferencesMinOrderByAggregateInput
  }

  export type UserPreferencesScalarWhereWithAggregatesInput = {
    AND?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    OR?: UserPreferencesScalarWhereWithAggregatesInput[]
    NOT?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    user_preferences_id?: StringWithAggregatesFilter<"UserPreferences"> | string
    user_id?: StringWithAggregatesFilter<"UserPreferences"> | string
    preferences_id?: StringWithAggregatesFilter<"UserPreferences"> | string
  }

  export type UserCreateInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoUncheckedCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUncheckedUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
  }

  export type UserUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EventOrganizerCreateInput = {
    organizer_id?: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    events?: EventCreateNestedManyWithoutOrganizerInput
  }

  export type EventOrganizerUncheckedCreateInput = {
    organizer_id?: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
    events?: EventUncheckedCreateNestedManyWithoutOrganizerInput
  }

  export type EventOrganizerUpdateInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    events?: EventUpdateManyWithoutOrganizerNestedInput
  }

  export type EventOrganizerUncheckedUpdateInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    events?: EventUncheckedUpdateManyWithoutOrganizerNestedInput
  }

  export type EventOrganizerCreateManyInput = {
    organizer_id?: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
  }

  export type EventOrganizerUpdateManyMutationInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EventOrganizerUncheckedUpdateManyInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type LocationCreateInput = {
    location_id?: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    location_id?: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
    events?: EventUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    events?: EventUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    location_id?: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUpdateManyMutationInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateManyInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventCreateInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryCreateNestedManyWithoutEventInput
    location: LocationCreateNestedOneWithoutEventsInput
    organizer: EventOrganizerCreateNestedOneWithoutEventsInput
    event_bookings?: EventBookingCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutEventInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUpdateManyWithoutEventNestedInput
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    organizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    event_bookings?: EventBookingUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutEventNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
  }

  export type EventUpdateManyMutationInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventUncheckedUpdateManyInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SeatsInventoryCreateInput = {
    seat_id?: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    event_bookings?: EventBookingCreateNestedManyWithoutSeatInput
    event: EventCreateNestedOneWithoutSeats_inventoryInput
  }

  export type SeatsInventoryUncheckedCreateInput = {
    seat_id?: string
    event_id: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutSeatInput
  }

  export type SeatsInventoryUpdateInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
    event_bookings?: EventBookingUpdateManyWithoutSeatNestedInput
    event?: EventUpdateOneRequiredWithoutSeats_inventoryNestedInput
  }

  export type SeatsInventoryUncheckedUpdateInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
    event_bookings?: EventBookingUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type SeatsInventoryCreateManyInput = {
    seat_id?: string
    event_id: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
  }

  export type SeatsInventoryUpdateManyMutationInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
  }

  export type SeatsInventoryUncheckedUpdateManyInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
  }

  export type EventBookingCreateInput = {
    event_booking_id?: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    event: EventCreateNestedOneWithoutEvent_bookingsInput
    seat: SeatsInventoryCreateNestedOneWithoutEvent_bookingsInput
    user: UserCreateNestedOneWithoutEvent_bookingsInput
    payment_transaction?: PaymentTransactionCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingUncheckedCreateInput = {
    event_booking_id?: string
    event_id: string
    user_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingUpdateInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    event?: EventUpdateOneRequiredWithoutEvent_bookingsNestedInput
    seat?: SeatsInventoryUpdateOneRequiredWithoutEvent_bookingsNestedInput
    user?: UserUpdateOneRequiredWithoutEvent_bookingsNestedInput
    payment_transaction?: PaymentTransactionUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingCreateManyInput = {
    event_booking_id?: string
    event_id: string
    user_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
  }

  export type EventBookingUpdateManyMutationInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type EventBookingUncheckedUpdateManyInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type BookingHistoryCreateInput = {
    history_id?: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutBooking_historiesInput
    user: UserCreateNestedOneWithoutBooking_historiesInput
  }

  export type BookingHistoryUncheckedCreateInput = {
    history_id?: string
    user_id: string
    event_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type BookingHistoryUpdateInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutBooking_historiesNestedInput
    user?: UserUpdateOneRequiredWithoutBooking_historiesNestedInput
  }

  export type BookingHistoryUncheckedUpdateInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingHistoryCreateManyInput = {
    history_id?: string
    user_id: string
    event_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type BookingHistoryUpdateManyMutationInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingHistoryUncheckedUpdateManyInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoCreateInput = {
    payment_info_id?: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPayment_infoInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutPayment_infoInput
  }

  export type PaymentInfoUncheckedCreateInput = {
    payment_info_id?: string
    user_id: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutPayment_infoInput
  }

  export type PaymentInfoUpdateInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPayment_infoNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutPayment_infoNestedInput
  }

  export type PaymentInfoUncheckedUpdateInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutPayment_infoNestedInput
  }

  export type PaymentInfoCreateManyInput = {
    payment_info_id?: string
    user_id: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoUpdateManyMutationInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentInfoUncheckedUpdateManyInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateInput = {
    transaction_id?: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
    event_booking: EventBookingCreateNestedOneWithoutPayment_transactionInput
    payment_info: PaymentInfoCreateNestedOneWithoutPayment_transactionsInput
    user: UserCreateNestedOneWithoutPayment_transactionsInput
  }

  export type PaymentTransactionUncheckedCreateInput = {
    transaction_id?: string
    user_id: string
    event_booking_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionUpdateInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_booking?: EventBookingUpdateOneRequiredWithoutPayment_transactionNestedInput
    payment_info?: PaymentInfoUpdateOneRequiredWithoutPayment_transactionsNestedInput
    user?: UserUpdateOneRequiredWithoutPayment_transactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateManyInput = {
    transaction_id?: string
    user_id: string
    event_booking_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionUpdateManyMutationInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreferencesCreateInput = {
    preferences_id?: string
    preference_name: string
    description: string
    user_preferences?: UserPreferencesCreateNestedManyWithoutPreferenceInput
  }

  export type PreferencesUncheckedCreateInput = {
    preferences_id?: string
    preference_name: string
    description: string
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutPreferenceInput
  }

  export type PreferencesUpdateInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_preferences?: UserPreferencesUpdateManyWithoutPreferenceNestedInput
  }

  export type PreferencesUncheckedUpdateInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutPreferenceNestedInput
  }

  export type PreferencesCreateManyInput = {
    preferences_id?: string
    preference_name: string
    description: string
  }

  export type PreferencesUpdateManyMutationInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesUncheckedUpdateManyInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferencesCreateInput = {
    user_preferences_id?: string
    preference: PreferencesCreateNestedOneWithoutUser_preferencesInput
    user: UserCreateNestedOneWithoutUser_preferencesInput
  }

  export type UserPreferencesUncheckedCreateInput = {
    user_preferences_id?: string
    user_id: string
    preferences_id: string
  }

  export type UserPreferencesUpdateInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    preference?: PreferencesUpdateOneRequiredWithoutUser_preferencesNestedInput
    user?: UserUpdateOneRequiredWithoutUser_preferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    preferences_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferencesCreateManyInput = {
    user_preferences_id?: string
    user_id: string
    preferences_id: string
  }

  export type UserPreferencesUpdateManyMutationInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferencesUncheckedUpdateManyInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    preferences_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type BookingHistoryListRelationFilter = {
    every?: BookingHistoryWhereInput
    some?: BookingHistoryWhereInput
    none?: BookingHistoryWhereInput
  }

  export type EventBookingListRelationFilter = {
    every?: EventBookingWhereInput
    some?: EventBookingWhereInput
    none?: EventBookingWhereInput
  }

  export type PaymentInfoListRelationFilter = {
    every?: PaymentInfoWhereInput
    some?: PaymentInfoWhereInput
    none?: PaymentInfoWhereInput
  }

  export type PaymentTransactionListRelationFilter = {
    every?: PaymentTransactionWhereInput
    some?: PaymentTransactionWhereInput
    none?: PaymentTransactionWhereInput
  }

  export type UserPreferencesListRelationFilter = {
    every?: UserPreferencesWhereInput
    some?: UserPreferencesWhereInput
    none?: UserPreferencesWhereInput
  }

  export type BookingHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventBookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserPreferencesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account_status?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account_status?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account_status?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type EnumLegalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LegalStatus | EnumLegalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLegalStatusFilter<$PrismaModel> | $Enums.LegalStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerCountOrderByAggregateInput = {
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_email?: SortOrder
    contact_number?: SortOrder
    gst_number?: SortOrder
    legal_status?: SortOrder
    approval_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type EventOrganizerMaxOrderByAggregateInput = {
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_email?: SortOrder
    contact_number?: SortOrder
    gst_number?: SortOrder
    legal_status?: SortOrder
    approval_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type EventOrganizerMinOrderByAggregateInput = {
    organizer_id?: SortOrder
    organizer_name?: SortOrder
    organizer_email?: SortOrder
    contact_number?: SortOrder
    gst_number?: SortOrder
    legal_status?: SortOrder
    approval_date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    password?: SortOrder
  }

  export type EnumLegalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LegalStatus | EnumLegalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLegalStatusWithAggregatesFilter<$PrismaModel> | $Enums.LegalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLegalStatusFilter<$PrismaModel>
    _max?: NestedEnumLegalStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type LocationCountOrderByAggregateInput = {
    location_id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    timezone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    location_id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    timezone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    location_id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip_code?: SortOrder
    timezone?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type EnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type EventOrganizerRelationFilter = {
    is?: EventOrganizerWhereInput
    isNot?: EventOrganizerWhereInput
  }

  export type SeatsInventoryListRelationFilter = {
    every?: SeatsInventoryWhereInput
    some?: SeatsInventoryWhereInput
    none?: SeatsInventoryWhereInput
  }

  export type SeatsInventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    event_id?: SortOrder
    organizer_id?: SortOrder
    event_name?: SortOrder
    description?: SortOrder
    event_type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket_limit?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    ticket_limit?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    event_id?: SortOrder
    organizer_id?: SortOrder
    event_name?: SortOrder
    description?: SortOrder
    event_type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket_limit?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    event_id?: SortOrder
    organizer_id?: SortOrder
    event_name?: SortOrder
    description?: SortOrder
    event_type?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    location_id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ticket_limit?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    ticket_limit?: SortOrder
  }

  export type EnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type EnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumSeatTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatType | EnumSeatTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatTypeFilter<$PrismaModel> | $Enums.SeatType
  }

  export type EnumSeatStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatStatus | EnumSeatStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatStatusFilter<$PrismaModel> | $Enums.SeatStatus
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type SeatsInventoryCountOrderByAggregateInput = {
    seat_id?: SortOrder
    event_id?: SortOrder
    seat_number?: SortOrder
    seat_type?: SortOrder
    price?: SortOrder
    seat_status?: SortOrder
  }

  export type SeatsInventoryAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type SeatsInventoryMaxOrderByAggregateInput = {
    seat_id?: SortOrder
    event_id?: SortOrder
    seat_number?: SortOrder
    seat_type?: SortOrder
    price?: SortOrder
    seat_status?: SortOrder
  }

  export type SeatsInventoryMinOrderByAggregateInput = {
    seat_id?: SortOrder
    event_id?: SortOrder
    seat_number?: SortOrder
    seat_type?: SortOrder
    price?: SortOrder
    seat_status?: SortOrder
  }

  export type SeatsInventorySumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type EnumSeatTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatType | EnumSeatTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatTypeWithAggregatesFilter<$PrismaModel> | $Enums.SeatType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeatTypeFilter<$PrismaModel>
    _max?: NestedEnumSeatTypeFilter<$PrismaModel>
  }

  export type EnumSeatStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatStatus | EnumSeatStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatStatusWithAggregatesFilter<$PrismaModel> | $Enums.SeatStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeatStatusFilter<$PrismaModel>
    _max?: NestedEnumSeatStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type SeatsInventoryRelationFilter = {
    is?: SeatsInventoryWhereInput
    isNot?: SeatsInventoryWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EventBookingCountOrderByAggregateInput = {
    event_booking_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    seat_id?: SortOrder
    booking_date?: SortOrder
    amount_paid?: SortOrder
    cancellation_date?: SortOrder
    createdAt?: SortOrder
    payment_status?: SortOrder
  }

  export type EventBookingAvgOrderByAggregateInput = {
    amount_paid?: SortOrder
  }

  export type EventBookingMaxOrderByAggregateInput = {
    event_booking_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    seat_id?: SortOrder
    booking_date?: SortOrder
    amount_paid?: SortOrder
    cancellation_date?: SortOrder
    createdAt?: SortOrder
    payment_status?: SortOrder
  }

  export type EventBookingMinOrderByAggregateInput = {
    event_booking_id?: SortOrder
    event_id?: SortOrder
    user_id?: SortOrder
    seat_id?: SortOrder
    booking_date?: SortOrder
    amount_paid?: SortOrder
    cancellation_date?: SortOrder
    createdAt?: SortOrder
    payment_status?: SortOrder
  }

  export type EventBookingSumOrderByAggregateInput = {
    amount_paid?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumTicketTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketType | EnumTicketTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketTypeFilter<$PrismaModel> | $Enums.TicketType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BookingHistoryCountOrderByAggregateInput = {
    history_id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    booking_date?: SortOrder
    ticket_type?: SortOrder
    payment_status?: SortOrder
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingHistoryAvgOrderByAggregateInput = {
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
  }

  export type BookingHistoryMaxOrderByAggregateInput = {
    history_id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    booking_date?: SortOrder
    ticket_type?: SortOrder
    payment_status?: SortOrder
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingHistoryMinOrderByAggregateInput = {
    history_id?: SortOrder
    user_id?: SortOrder
    event_id?: SortOrder
    booking_date?: SortOrder
    ticket_type?: SortOrder
    payment_status?: SortOrder
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingHistorySumOrderByAggregateInput = {
    ticket_quantity?: SortOrder
    amount_paid?: SortOrder
  }

  export type EnumTicketTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketType | EnumTicketTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketTypeWithAggregatesFilter<$PrismaModel> | $Enums.TicketType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketTypeFilter<$PrismaModel>
    _max?: NestedEnumTicketTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type PaymentInfoCountOrderByAggregateInput = {
    payment_info_id?: SortOrder
    user_id?: SortOrder
    card_token?: SortOrder
    expiry_date?: SortOrder
    billing_address?: SortOrder
    payment_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInfoMaxOrderByAggregateInput = {
    payment_info_id?: SortOrder
    user_id?: SortOrder
    card_token?: SortOrder
    expiry_date?: SortOrder
    billing_address?: SortOrder
    payment_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentInfoMinOrderByAggregateInput = {
    payment_info_id?: SortOrder
    user_id?: SortOrder
    card_token?: SortOrder
    expiry_date?: SortOrder
    billing_address?: SortOrder
    payment_type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type EventBookingRelationFilter = {
    is?: EventBookingWhereInput
    isNot?: EventBookingWhereInput
  }

  export type PaymentInfoRelationFilter = {
    is?: PaymentInfoWhereInput
    isNot?: PaymentInfoWhereInput
  }

  export type PaymentTransactionCountOrderByAggregateInput = {
    transaction_id?: SortOrder
    user_id?: SortOrder
    event_booking_id?: SortOrder
    payment_info_id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    transaction_date?: SortOrder
  }

  export type PaymentTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentTransactionMaxOrderByAggregateInput = {
    transaction_id?: SortOrder
    user_id?: SortOrder
    event_booking_id?: SortOrder
    payment_info_id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    transaction_date?: SortOrder
  }

  export type PaymentTransactionMinOrderByAggregateInput = {
    transaction_id?: SortOrder
    user_id?: SortOrder
    event_booking_id?: SortOrder
    payment_info_id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    transaction_date?: SortOrder
  }

  export type PaymentTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type PreferencesCountOrderByAggregateInput = {
    preferences_id?: SortOrder
    preference_name?: SortOrder
    description?: SortOrder
  }

  export type PreferencesMaxOrderByAggregateInput = {
    preferences_id?: SortOrder
    preference_name?: SortOrder
    description?: SortOrder
  }

  export type PreferencesMinOrderByAggregateInput = {
    preferences_id?: SortOrder
    preference_name?: SortOrder
    description?: SortOrder
  }

  export type PreferencesRelationFilter = {
    is?: PreferencesWhereInput
    isNot?: PreferencesWhereInput
  }

  export type UserPreferencesCountOrderByAggregateInput = {
    user_preferences_id?: SortOrder
    user_id?: SortOrder
    preferences_id?: SortOrder
  }

  export type UserPreferencesMaxOrderByAggregateInput = {
    user_preferences_id?: SortOrder
    user_id?: SortOrder
    preferences_id?: SortOrder
  }

  export type UserPreferencesMinOrderByAggregateInput = {
    user_preferences_id?: SortOrder
    user_id?: SortOrder
    preferences_id?: SortOrder
  }

  export type BookingHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput> | BookingHistoryCreateWithoutUserInput[] | BookingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutUserInput | BookingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: BookingHistoryCreateManyUserInputEnvelope
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
  }

  export type EventBookingCreateNestedManyWithoutUserInput = {
    create?: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput> | EventBookingCreateWithoutUserInput[] | EventBookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutUserInput | EventBookingCreateOrConnectWithoutUserInput[]
    createMany?: EventBookingCreateManyUserInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type PaymentInfoCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput> | PaymentInfoCreateWithoutUserInput[] | PaymentInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutUserInput | PaymentInfoCreateOrConnectWithoutUserInput[]
    createMany?: PaymentInfoCreateManyUserInputEnvelope
    connect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
  }

  export type PaymentTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type UserPreferencesCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput> | UserPreferencesCreateWithoutUserInput[] | UserPreferencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput | UserPreferencesCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferencesCreateManyUserInputEnvelope
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
  }

  export type BookingHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput> | BookingHistoryCreateWithoutUserInput[] | BookingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutUserInput | BookingHistoryCreateOrConnectWithoutUserInput[]
    createMany?: BookingHistoryCreateManyUserInputEnvelope
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
  }

  export type EventBookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput> | EventBookingCreateWithoutUserInput[] | EventBookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutUserInput | EventBookingCreateOrConnectWithoutUserInput[]
    createMany?: EventBookingCreateManyUserInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type PaymentInfoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput> | PaymentInfoCreateWithoutUserInput[] | PaymentInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutUserInput | PaymentInfoCreateOrConnectWithoutUserInput[]
    createMany?: PaymentInfoCreateManyUserInputEnvelope
    connect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type UserPreferencesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput> | UserPreferencesCreateWithoutUserInput[] | UserPreferencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput | UserPreferencesCreateOrConnectWithoutUserInput[]
    createMany?: UserPreferencesCreateManyUserInputEnvelope
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumAccountStatusFieldUpdateOperationsInput = {
    set?: $Enums.AccountStatus
  }

  export type BookingHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput> | BookingHistoryCreateWithoutUserInput[] | BookingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutUserInput | BookingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: BookingHistoryUpsertWithWhereUniqueWithoutUserInput | BookingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingHistoryCreateManyUserInputEnvelope
    set?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    disconnect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    delete?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    update?: BookingHistoryUpdateWithWhereUniqueWithoutUserInput | BookingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingHistoryUpdateManyWithWhereWithoutUserInput | BookingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
  }

  export type EventBookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput> | EventBookingCreateWithoutUserInput[] | EventBookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutUserInput | EventBookingCreateOrConnectWithoutUserInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutUserInput | EventBookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventBookingCreateManyUserInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutUserInput | EventBookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutUserInput | EventBookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type PaymentInfoUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput> | PaymentInfoCreateWithoutUserInput[] | PaymentInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutUserInput | PaymentInfoCreateOrConnectWithoutUserInput[]
    upsert?: PaymentInfoUpsertWithWhereUniqueWithoutUserInput | PaymentInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentInfoCreateManyUserInputEnvelope
    set?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    disconnect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    delete?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    connect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    update?: PaymentInfoUpdateWithWhereUniqueWithoutUserInput | PaymentInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentInfoUpdateManyWithWhereWithoutUserInput | PaymentInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentInfoScalarWhereInput | PaymentInfoScalarWhereInput[]
  }

  export type PaymentTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutUserInput | PaymentTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutUserInput | PaymentTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutUserInput | PaymentTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type UserPreferencesUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput> | UserPreferencesCreateWithoutUserInput[] | UserPreferencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput | UserPreferencesCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferencesUpsertWithWhereUniqueWithoutUserInput | UserPreferencesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferencesCreateManyUserInputEnvelope
    set?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    disconnect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    delete?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    update?: UserPreferencesUpdateWithWhereUniqueWithoutUserInput | UserPreferencesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferencesUpdateManyWithWhereWithoutUserInput | UserPreferencesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
  }

  export type BookingHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput> | BookingHistoryCreateWithoutUserInput[] | BookingHistoryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutUserInput | BookingHistoryCreateOrConnectWithoutUserInput[]
    upsert?: BookingHistoryUpsertWithWhereUniqueWithoutUserInput | BookingHistoryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingHistoryCreateManyUserInputEnvelope
    set?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    disconnect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    delete?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    update?: BookingHistoryUpdateWithWhereUniqueWithoutUserInput | BookingHistoryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingHistoryUpdateManyWithWhereWithoutUserInput | BookingHistoryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
  }

  export type EventBookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput> | EventBookingCreateWithoutUserInput[] | EventBookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutUserInput | EventBookingCreateOrConnectWithoutUserInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutUserInput | EventBookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventBookingCreateManyUserInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutUserInput | EventBookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutUserInput | EventBookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type PaymentInfoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput> | PaymentInfoCreateWithoutUserInput[] | PaymentInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutUserInput | PaymentInfoCreateOrConnectWithoutUserInput[]
    upsert?: PaymentInfoUpsertWithWhereUniqueWithoutUserInput | PaymentInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentInfoCreateManyUserInputEnvelope
    set?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    disconnect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    delete?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    connect?: PaymentInfoWhereUniqueInput | PaymentInfoWhereUniqueInput[]
    update?: PaymentInfoUpdateWithWhereUniqueWithoutUserInput | PaymentInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentInfoUpdateManyWithWhereWithoutUserInput | PaymentInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentInfoScalarWhereInput | PaymentInfoScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput> | PaymentTransactionCreateWithoutUserInput[] | PaymentTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutUserInput | PaymentTransactionCreateOrConnectWithoutUserInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutUserInput | PaymentTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentTransactionCreateManyUserInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutUserInput | PaymentTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutUserInput | PaymentTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type UserPreferencesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput> | UserPreferencesCreateWithoutUserInput[] | UserPreferencesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput | UserPreferencesCreateOrConnectWithoutUserInput[]
    upsert?: UserPreferencesUpsertWithWhereUniqueWithoutUserInput | UserPreferencesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPreferencesCreateManyUserInputEnvelope
    set?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    disconnect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    delete?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    update?: UserPreferencesUpdateWithWhereUniqueWithoutUserInput | UserPreferencesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPreferencesUpdateManyWithWhereWithoutUserInput | UserPreferencesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EnumLegalStatusFieldUpdateOperationsInput = {
    set?: $Enums.LegalStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EventUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput> | EventCreateWithoutOrganizerInput[] | EventUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: EventCreateOrConnectWithoutOrganizerInput | EventCreateOrConnectWithoutOrganizerInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutOrganizerInput | EventUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: EventCreateManyOrganizerInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutOrganizerInput | EventUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: EventUpdateManyWithWhereWithoutOrganizerInput | EventUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventCreateNestedManyWithoutLocationInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateManyWithoutLocationNestedInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutLocationInput | EventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutLocationInput | EventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutLocationInput | EventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput> | EventCreateWithoutLocationInput[] | EventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: EventCreateOrConnectWithoutLocationInput | EventCreateOrConnectWithoutLocationInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutLocationInput | EventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: EventCreateManyLocationInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutLocationInput | EventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: EventUpdateManyWithWhereWithoutLocationInput | EventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type BookingHistoryCreateNestedManyWithoutEventInput = {
    create?: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput> | BookingHistoryCreateWithoutEventInput[] | BookingHistoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutEventInput | BookingHistoryCreateOrConnectWithoutEventInput[]
    createMany?: BookingHistoryCreateManyEventInputEnvelope
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
  }

  export type LocationCreateNestedOneWithoutEventsInput = {
    create?: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutEventsInput
    connect?: LocationWhereUniqueInput
  }

  export type EventOrganizerCreateNestedOneWithoutEventsInput = {
    create?: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventOrganizerCreateOrConnectWithoutEventsInput
    connect?: EventOrganizerWhereUniqueInput
  }

  export type EventBookingCreateNestedManyWithoutEventInput = {
    create?: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput> | EventBookingCreateWithoutEventInput[] | EventBookingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutEventInput | EventBookingCreateOrConnectWithoutEventInput[]
    createMany?: EventBookingCreateManyEventInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type SeatsInventoryCreateNestedManyWithoutEventInput = {
    create?: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput> | SeatsInventoryCreateWithoutEventInput[] | SeatsInventoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEventInput | SeatsInventoryCreateOrConnectWithoutEventInput[]
    createMany?: SeatsInventoryCreateManyEventInputEnvelope
    connect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
  }

  export type BookingHistoryUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput> | BookingHistoryCreateWithoutEventInput[] | BookingHistoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutEventInput | BookingHistoryCreateOrConnectWithoutEventInput[]
    createMany?: BookingHistoryCreateManyEventInputEnvelope
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
  }

  export type EventBookingUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput> | EventBookingCreateWithoutEventInput[] | EventBookingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutEventInput | EventBookingCreateOrConnectWithoutEventInput[]
    createMany?: EventBookingCreateManyEventInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type SeatsInventoryUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput> | SeatsInventoryCreateWithoutEventInput[] | SeatsInventoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEventInput | SeatsInventoryCreateOrConnectWithoutEventInput[]
    createMany?: SeatsInventoryCreateManyEventInputEnvelope
    connect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
  }

  export type EnumEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.EventType
  }

  export type EnumEventStatusFieldUpdateOperationsInput = {
    set?: $Enums.EventStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BookingHistoryUpdateManyWithoutEventNestedInput = {
    create?: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput> | BookingHistoryCreateWithoutEventInput[] | BookingHistoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutEventInput | BookingHistoryCreateOrConnectWithoutEventInput[]
    upsert?: BookingHistoryUpsertWithWhereUniqueWithoutEventInput | BookingHistoryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BookingHistoryCreateManyEventInputEnvelope
    set?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    disconnect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    delete?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    update?: BookingHistoryUpdateWithWhereUniqueWithoutEventInput | BookingHistoryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BookingHistoryUpdateManyWithWhereWithoutEventInput | BookingHistoryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
  }

  export type LocationUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutEventsInput
    upsert?: LocationUpsertWithoutEventsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutEventsInput, LocationUpdateWithoutEventsInput>, LocationUncheckedUpdateWithoutEventsInput>
  }

  export type EventOrganizerUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventOrganizerCreateOrConnectWithoutEventsInput
    upsert?: EventOrganizerUpsertWithoutEventsInput
    connect?: EventOrganizerWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUpdateToOneWithWhereWithoutEventsInput, EventOrganizerUpdateWithoutEventsInput>, EventOrganizerUncheckedUpdateWithoutEventsInput>
  }

  export type EventBookingUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput> | EventBookingCreateWithoutEventInput[] | EventBookingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutEventInput | EventBookingCreateOrConnectWithoutEventInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutEventInput | EventBookingUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventBookingCreateManyEventInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutEventInput | EventBookingUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutEventInput | EventBookingUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type SeatsInventoryUpdateManyWithoutEventNestedInput = {
    create?: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput> | SeatsInventoryCreateWithoutEventInput[] | SeatsInventoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEventInput | SeatsInventoryCreateOrConnectWithoutEventInput[]
    upsert?: SeatsInventoryUpsertWithWhereUniqueWithoutEventInput | SeatsInventoryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SeatsInventoryCreateManyEventInputEnvelope
    set?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    disconnect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    delete?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    connect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    update?: SeatsInventoryUpdateWithWhereUniqueWithoutEventInput | SeatsInventoryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SeatsInventoryUpdateManyWithWhereWithoutEventInput | SeatsInventoryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SeatsInventoryScalarWhereInput | SeatsInventoryScalarWhereInput[]
  }

  export type BookingHistoryUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput> | BookingHistoryCreateWithoutEventInput[] | BookingHistoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: BookingHistoryCreateOrConnectWithoutEventInput | BookingHistoryCreateOrConnectWithoutEventInput[]
    upsert?: BookingHistoryUpsertWithWhereUniqueWithoutEventInput | BookingHistoryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: BookingHistoryCreateManyEventInputEnvelope
    set?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    disconnect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    delete?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    connect?: BookingHistoryWhereUniqueInput | BookingHistoryWhereUniqueInput[]
    update?: BookingHistoryUpdateWithWhereUniqueWithoutEventInput | BookingHistoryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: BookingHistoryUpdateManyWithWhereWithoutEventInput | BookingHistoryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
  }

  export type EventBookingUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput> | EventBookingCreateWithoutEventInput[] | EventBookingUncheckedCreateWithoutEventInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutEventInput | EventBookingCreateOrConnectWithoutEventInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutEventInput | EventBookingUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: EventBookingCreateManyEventInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutEventInput | EventBookingUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutEventInput | EventBookingUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput> | SeatsInventoryCreateWithoutEventInput[] | SeatsInventoryUncheckedCreateWithoutEventInput[]
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEventInput | SeatsInventoryCreateOrConnectWithoutEventInput[]
    upsert?: SeatsInventoryUpsertWithWhereUniqueWithoutEventInput | SeatsInventoryUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: SeatsInventoryCreateManyEventInputEnvelope
    set?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    disconnect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    delete?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    connect?: SeatsInventoryWhereUniqueInput | SeatsInventoryWhereUniqueInput[]
    update?: SeatsInventoryUpdateWithWhereUniqueWithoutEventInput | SeatsInventoryUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: SeatsInventoryUpdateManyWithWhereWithoutEventInput | SeatsInventoryUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: SeatsInventoryScalarWhereInput | SeatsInventoryScalarWhereInput[]
  }

  export type EventBookingCreateNestedManyWithoutSeatInput = {
    create?: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput> | EventBookingCreateWithoutSeatInput[] | EventBookingUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutSeatInput | EventBookingCreateOrConnectWithoutSeatInput[]
    createMany?: EventBookingCreateManySeatInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type EventCreateNestedOneWithoutSeats_inventoryInput = {
    create?: XOR<EventCreateWithoutSeats_inventoryInput, EventUncheckedCreateWithoutSeats_inventoryInput>
    connectOrCreate?: EventCreateOrConnectWithoutSeats_inventoryInput
    connect?: EventWhereUniqueInput
  }

  export type EventBookingUncheckedCreateNestedManyWithoutSeatInput = {
    create?: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput> | EventBookingCreateWithoutSeatInput[] | EventBookingUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutSeatInput | EventBookingCreateOrConnectWithoutSeatInput[]
    createMany?: EventBookingCreateManySeatInputEnvelope
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
  }

  export type EnumSeatTypeFieldUpdateOperationsInput = {
    set?: $Enums.SeatType
  }

  export type EnumSeatStatusFieldUpdateOperationsInput = {
    set?: $Enums.SeatStatus
  }

  export type EventBookingUpdateManyWithoutSeatNestedInput = {
    create?: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput> | EventBookingCreateWithoutSeatInput[] | EventBookingUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutSeatInput | EventBookingCreateOrConnectWithoutSeatInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutSeatInput | EventBookingUpsertWithWhereUniqueWithoutSeatInput[]
    createMany?: EventBookingCreateManySeatInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutSeatInput | EventBookingUpdateWithWhereUniqueWithoutSeatInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutSeatInput | EventBookingUpdateManyWithWhereWithoutSeatInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type EventUpdateOneRequiredWithoutSeats_inventoryNestedInput = {
    create?: XOR<EventCreateWithoutSeats_inventoryInput, EventUncheckedCreateWithoutSeats_inventoryInput>
    connectOrCreate?: EventCreateOrConnectWithoutSeats_inventoryInput
    upsert?: EventUpsertWithoutSeats_inventoryInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutSeats_inventoryInput, EventUpdateWithoutSeats_inventoryInput>, EventUncheckedUpdateWithoutSeats_inventoryInput>
  }

  export type EventBookingUncheckedUpdateManyWithoutSeatNestedInput = {
    create?: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput> | EventBookingCreateWithoutSeatInput[] | EventBookingUncheckedCreateWithoutSeatInput[]
    connectOrCreate?: EventBookingCreateOrConnectWithoutSeatInput | EventBookingCreateOrConnectWithoutSeatInput[]
    upsert?: EventBookingUpsertWithWhereUniqueWithoutSeatInput | EventBookingUpsertWithWhereUniqueWithoutSeatInput[]
    createMany?: EventBookingCreateManySeatInputEnvelope
    set?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    disconnect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    delete?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    connect?: EventBookingWhereUniqueInput | EventBookingWhereUniqueInput[]
    update?: EventBookingUpdateWithWhereUniqueWithoutSeatInput | EventBookingUpdateWithWhereUniqueWithoutSeatInput[]
    updateMany?: EventBookingUpdateManyWithWhereWithoutSeatInput | EventBookingUpdateManyWithWhereWithoutSeatInput[]
    deleteMany?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutEvent_bookingsInput = {
    create?: XOR<EventCreateWithoutEvent_bookingsInput, EventUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_bookingsInput
    connect?: EventWhereUniqueInput
  }

  export type SeatsInventoryCreateNestedOneWithoutEvent_bookingsInput = {
    create?: XOR<SeatsInventoryCreateWithoutEvent_bookingsInput, SeatsInventoryUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEvent_bookingsInput
    connect?: SeatsInventoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEvent_bookingsInput = {
    create?: XOR<UserCreateWithoutEvent_bookingsInput, UserUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvent_bookingsInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentTransactionCreateNestedManyWithoutEvent_bookingInput = {
    create?: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput> | PaymentTransactionCreateWithoutEvent_bookingInput[] | PaymentTransactionUncheckedCreateWithoutEvent_bookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutEvent_bookingInput | PaymentTransactionCreateOrConnectWithoutEvent_bookingInput[]
    createMany?: PaymentTransactionCreateManyEvent_bookingInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutEvent_bookingInput = {
    create?: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput> | PaymentTransactionCreateWithoutEvent_bookingInput[] | PaymentTransactionUncheckedCreateWithoutEvent_bookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutEvent_bookingInput | PaymentTransactionCreateOrConnectWithoutEvent_bookingInput[]
    createMany?: PaymentTransactionCreateManyEvent_bookingInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type EventUpdateOneRequiredWithoutEvent_bookingsNestedInput = {
    create?: XOR<EventCreateWithoutEvent_bookingsInput, EventUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: EventCreateOrConnectWithoutEvent_bookingsInput
    upsert?: EventUpsertWithoutEvent_bookingsInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutEvent_bookingsInput, EventUpdateWithoutEvent_bookingsInput>, EventUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type SeatsInventoryUpdateOneRequiredWithoutEvent_bookingsNestedInput = {
    create?: XOR<SeatsInventoryCreateWithoutEvent_bookingsInput, SeatsInventoryUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: SeatsInventoryCreateOrConnectWithoutEvent_bookingsInput
    upsert?: SeatsInventoryUpsertWithoutEvent_bookingsInput
    connect?: SeatsInventoryWhereUniqueInput
    update?: XOR<XOR<SeatsInventoryUpdateToOneWithWhereWithoutEvent_bookingsInput, SeatsInventoryUpdateWithoutEvent_bookingsInput>, SeatsInventoryUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type UserUpdateOneRequiredWithoutEvent_bookingsNestedInput = {
    create?: XOR<UserCreateWithoutEvent_bookingsInput, UserUncheckedCreateWithoutEvent_bookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEvent_bookingsInput
    upsert?: UserUpsertWithoutEvent_bookingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEvent_bookingsInput, UserUpdateWithoutEvent_bookingsInput>, UserUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type PaymentTransactionUpdateManyWithoutEvent_bookingNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput> | PaymentTransactionCreateWithoutEvent_bookingInput[] | PaymentTransactionUncheckedCreateWithoutEvent_bookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutEvent_bookingInput | PaymentTransactionCreateOrConnectWithoutEvent_bookingInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutEvent_bookingInput | PaymentTransactionUpsertWithWhereUniqueWithoutEvent_bookingInput[]
    createMany?: PaymentTransactionCreateManyEvent_bookingInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutEvent_bookingInput | PaymentTransactionUpdateWithWhereUniqueWithoutEvent_bookingInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutEvent_bookingInput | PaymentTransactionUpdateManyWithWhereWithoutEvent_bookingInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput> | PaymentTransactionCreateWithoutEvent_bookingInput[] | PaymentTransactionUncheckedCreateWithoutEvent_bookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutEvent_bookingInput | PaymentTransactionCreateOrConnectWithoutEvent_bookingInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutEvent_bookingInput | PaymentTransactionUpsertWithWhereUniqueWithoutEvent_bookingInput[]
    createMany?: PaymentTransactionCreateManyEvent_bookingInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutEvent_bookingInput | PaymentTransactionUpdateWithWhereUniqueWithoutEvent_bookingInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutEvent_bookingInput | PaymentTransactionUpdateManyWithWhereWithoutEvent_bookingInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutBooking_historiesInput = {
    create?: XOR<EventCreateWithoutBooking_historiesInput, EventUncheckedCreateWithoutBooking_historiesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBooking_historiesInput
    connect?: EventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBooking_historiesInput = {
    create?: XOR<UserCreateWithoutBooking_historiesInput, UserUncheckedCreateWithoutBooking_historiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooking_historiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTicketTypeFieldUpdateOperationsInput = {
    set?: $Enums.TicketType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventUpdateOneRequiredWithoutBooking_historiesNestedInput = {
    create?: XOR<EventCreateWithoutBooking_historiesInput, EventUncheckedCreateWithoutBooking_historiesInput>
    connectOrCreate?: EventCreateOrConnectWithoutBooking_historiesInput
    upsert?: EventUpsertWithoutBooking_historiesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutBooking_historiesInput, EventUpdateWithoutBooking_historiesInput>, EventUncheckedUpdateWithoutBooking_historiesInput>
  }

  export type UserUpdateOneRequiredWithoutBooking_historiesNestedInput = {
    create?: XOR<UserCreateWithoutBooking_historiesInput, UserUncheckedCreateWithoutBooking_historiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBooking_historiesInput
    upsert?: UserUpsertWithoutBooking_historiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBooking_historiesInput, UserUpdateWithoutBooking_historiesInput>, UserUncheckedUpdateWithoutBooking_historiesInput>
  }

  export type UserCreateNestedOneWithoutPayment_infoInput = {
    create?: XOR<UserCreateWithoutPayment_infoInput, UserUncheckedCreateWithoutPayment_infoInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_infoInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentTransactionCreateNestedManyWithoutPayment_infoInput = {
    create?: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput> | PaymentTransactionCreateWithoutPayment_infoInput[] | PaymentTransactionUncheckedCreateWithoutPayment_infoInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPayment_infoInput | PaymentTransactionCreateOrConnectWithoutPayment_infoInput[]
    createMany?: PaymentTransactionCreateManyPayment_infoInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutPayment_infoInput = {
    create?: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput> | PaymentTransactionCreateWithoutPayment_infoInput[] | PaymentTransactionUncheckedCreateWithoutPayment_infoInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPayment_infoInput | PaymentTransactionCreateOrConnectWithoutPayment_infoInput[]
    createMany?: PaymentTransactionCreateManyPayment_infoInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type UserUpdateOneRequiredWithoutPayment_infoNestedInput = {
    create?: XOR<UserCreateWithoutPayment_infoInput, UserUncheckedCreateWithoutPayment_infoInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_infoInput
    upsert?: UserUpsertWithoutPayment_infoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPayment_infoInput, UserUpdateWithoutPayment_infoInput>, UserUncheckedUpdateWithoutPayment_infoInput>
  }

  export type PaymentTransactionUpdateManyWithoutPayment_infoNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput> | PaymentTransactionCreateWithoutPayment_infoInput[] | PaymentTransactionUncheckedCreateWithoutPayment_infoInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPayment_infoInput | PaymentTransactionCreateOrConnectWithoutPayment_infoInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutPayment_infoInput | PaymentTransactionUpsertWithWhereUniqueWithoutPayment_infoInput[]
    createMany?: PaymentTransactionCreateManyPayment_infoInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutPayment_infoInput | PaymentTransactionUpdateWithWhereUniqueWithoutPayment_infoInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutPayment_infoInput | PaymentTransactionUpdateManyWithWhereWithoutPayment_infoInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutPayment_infoNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput> | PaymentTransactionCreateWithoutPayment_infoInput[] | PaymentTransactionUncheckedCreateWithoutPayment_infoInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutPayment_infoInput | PaymentTransactionCreateOrConnectWithoutPayment_infoInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutPayment_infoInput | PaymentTransactionUpsertWithWhereUniqueWithoutPayment_infoInput[]
    createMany?: PaymentTransactionCreateManyPayment_infoInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutPayment_infoInput | PaymentTransactionUpdateWithWhereUniqueWithoutPayment_infoInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutPayment_infoInput | PaymentTransactionUpdateManyWithWhereWithoutPayment_infoInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type EventBookingCreateNestedOneWithoutPayment_transactionInput = {
    create?: XOR<EventBookingCreateWithoutPayment_transactionInput, EventBookingUncheckedCreateWithoutPayment_transactionInput>
    connectOrCreate?: EventBookingCreateOrConnectWithoutPayment_transactionInput
    connect?: EventBookingWhereUniqueInput
  }

  export type PaymentInfoCreateNestedOneWithoutPayment_transactionsInput = {
    create?: XOR<PaymentInfoCreateWithoutPayment_transactionsInput, PaymentInfoUncheckedCreateWithoutPayment_transactionsInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutPayment_transactionsInput
    connect?: PaymentInfoWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPayment_transactionsInput = {
    create?: XOR<UserCreateWithoutPayment_transactionsInput, UserUncheckedCreateWithoutPayment_transactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_transactionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumTransactionStatusFieldUpdateOperationsInput = {
    set?: $Enums.TransactionStatus
  }

  export type EventBookingUpdateOneRequiredWithoutPayment_transactionNestedInput = {
    create?: XOR<EventBookingCreateWithoutPayment_transactionInput, EventBookingUncheckedCreateWithoutPayment_transactionInput>
    connectOrCreate?: EventBookingCreateOrConnectWithoutPayment_transactionInput
    upsert?: EventBookingUpsertWithoutPayment_transactionInput
    connect?: EventBookingWhereUniqueInput
    update?: XOR<XOR<EventBookingUpdateToOneWithWhereWithoutPayment_transactionInput, EventBookingUpdateWithoutPayment_transactionInput>, EventBookingUncheckedUpdateWithoutPayment_transactionInput>
  }

  export type PaymentInfoUpdateOneRequiredWithoutPayment_transactionsNestedInput = {
    create?: XOR<PaymentInfoCreateWithoutPayment_transactionsInput, PaymentInfoUncheckedCreateWithoutPayment_transactionsInput>
    connectOrCreate?: PaymentInfoCreateOrConnectWithoutPayment_transactionsInput
    upsert?: PaymentInfoUpsertWithoutPayment_transactionsInput
    connect?: PaymentInfoWhereUniqueInput
    update?: XOR<XOR<PaymentInfoUpdateToOneWithWhereWithoutPayment_transactionsInput, PaymentInfoUpdateWithoutPayment_transactionsInput>, PaymentInfoUncheckedUpdateWithoutPayment_transactionsInput>
  }

  export type UserUpdateOneRequiredWithoutPayment_transactionsNestedInput = {
    create?: XOR<UserCreateWithoutPayment_transactionsInput, UserUncheckedCreateWithoutPayment_transactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPayment_transactionsInput
    upsert?: UserUpsertWithoutPayment_transactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPayment_transactionsInput, UserUpdateWithoutPayment_transactionsInput>, UserUncheckedUpdateWithoutPayment_transactionsInput>
  }

  export type UserPreferencesCreateNestedManyWithoutPreferenceInput = {
    create?: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput> | UserPreferencesCreateWithoutPreferenceInput[] | UserPreferencesUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutPreferenceInput | UserPreferencesCreateOrConnectWithoutPreferenceInput[]
    createMany?: UserPreferencesCreateManyPreferenceInputEnvelope
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
  }

  export type UserPreferencesUncheckedCreateNestedManyWithoutPreferenceInput = {
    create?: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput> | UserPreferencesCreateWithoutPreferenceInput[] | UserPreferencesUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutPreferenceInput | UserPreferencesCreateOrConnectWithoutPreferenceInput[]
    createMany?: UserPreferencesCreateManyPreferenceInputEnvelope
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
  }

  export type UserPreferencesUpdateManyWithoutPreferenceNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput> | UserPreferencesCreateWithoutPreferenceInput[] | UserPreferencesUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutPreferenceInput | UserPreferencesCreateOrConnectWithoutPreferenceInput[]
    upsert?: UserPreferencesUpsertWithWhereUniqueWithoutPreferenceInput | UserPreferencesUpsertWithWhereUniqueWithoutPreferenceInput[]
    createMany?: UserPreferencesCreateManyPreferenceInputEnvelope
    set?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    disconnect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    delete?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    update?: UserPreferencesUpdateWithWhereUniqueWithoutPreferenceInput | UserPreferencesUpdateWithWhereUniqueWithoutPreferenceInput[]
    updateMany?: UserPreferencesUpdateManyWithWhereWithoutPreferenceInput | UserPreferencesUpdateManyWithWhereWithoutPreferenceInput[]
    deleteMany?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
  }

  export type UserPreferencesUncheckedUpdateManyWithoutPreferenceNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput> | UserPreferencesCreateWithoutPreferenceInput[] | UserPreferencesUncheckedCreateWithoutPreferenceInput[]
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutPreferenceInput | UserPreferencesCreateOrConnectWithoutPreferenceInput[]
    upsert?: UserPreferencesUpsertWithWhereUniqueWithoutPreferenceInput | UserPreferencesUpsertWithWhereUniqueWithoutPreferenceInput[]
    createMany?: UserPreferencesCreateManyPreferenceInputEnvelope
    set?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    disconnect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    delete?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    connect?: UserPreferencesWhereUniqueInput | UserPreferencesWhereUniqueInput[]
    update?: UserPreferencesUpdateWithWhereUniqueWithoutPreferenceInput | UserPreferencesUpdateWithWhereUniqueWithoutPreferenceInput[]
    updateMany?: UserPreferencesUpdateManyWithWhereWithoutPreferenceInput | UserPreferencesUpdateManyWithWhereWithoutPreferenceInput[]
    deleteMany?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
  }

  export type PreferencesCreateNestedOneWithoutUser_preferencesInput = {
    create?: XOR<PreferencesCreateWithoutUser_preferencesInput, PreferencesUncheckedCreateWithoutUser_preferencesInput>
    connectOrCreate?: PreferencesCreateOrConnectWithoutUser_preferencesInput
    connect?: PreferencesWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUser_preferencesInput = {
    create?: XOR<UserCreateWithoutUser_preferencesInput, UserUncheckedCreateWithoutUser_preferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_preferencesInput
    connect?: UserWhereUniqueInput
  }

  export type PreferencesUpdateOneRequiredWithoutUser_preferencesNestedInput = {
    create?: XOR<PreferencesCreateWithoutUser_preferencesInput, PreferencesUncheckedCreateWithoutUser_preferencesInput>
    connectOrCreate?: PreferencesCreateOrConnectWithoutUser_preferencesInput
    upsert?: PreferencesUpsertWithoutUser_preferencesInput
    connect?: PreferencesWhereUniqueInput
    update?: XOR<XOR<PreferencesUpdateToOneWithWhereWithoutUser_preferencesInput, PreferencesUpdateWithoutUser_preferencesInput>, PreferencesUncheckedUpdateWithoutUser_preferencesInput>
  }

  export type UserUpdateOneRequiredWithoutUser_preferencesNestedInput = {
    create?: XOR<UserCreateWithoutUser_preferencesInput, UserUncheckedCreateWithoutUser_preferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUser_preferencesInput
    upsert?: UserUpsertWithoutUser_preferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUser_preferencesInput, UserUpdateWithoutUser_preferencesInput>, UserUncheckedUpdateWithoutUser_preferencesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumAccountStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusFilter<$PrismaModel> | $Enums.AccountStatus
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountStatus | EnumAccountStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountStatus[] | ListEnumAccountStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountStatusWithAggregatesFilter<$PrismaModel> | $Enums.AccountStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountStatusFilter<$PrismaModel>
    _max?: NestedEnumAccountStatusFilter<$PrismaModel>
  }

  export type NestedEnumLegalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LegalStatus | EnumLegalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLegalStatusFilter<$PrismaModel> | $Enums.LegalStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumLegalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LegalStatus | EnumLegalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.LegalStatus[] | ListEnumLegalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumLegalStatusWithAggregatesFilter<$PrismaModel> | $Enums.LegalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLegalStatusFilter<$PrismaModel>
    _max?: NestedEnumLegalStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeFilter<$PrismaModel> | $Enums.EventType
  }

  export type NestedEnumEventStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusFilter<$PrismaModel> | $Enums.EventStatus
  }

  export type NestedEnumEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventType | EnumEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventType[] | ListEnumEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.EventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventTypeFilter<$PrismaModel>
    _max?: NestedEnumEventTypeFilter<$PrismaModel>
  }

  export type NestedEnumEventStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventStatus | EnumEventStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EventStatus[] | ListEnumEventStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEventStatusWithAggregatesFilter<$PrismaModel> | $Enums.EventStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventStatusFilter<$PrismaModel>
    _max?: NestedEnumEventStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumSeatTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatType | EnumSeatTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatTypeFilter<$PrismaModel> | $Enums.SeatType
  }

  export type NestedEnumSeatStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatStatus | EnumSeatStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatStatusFilter<$PrismaModel> | $Enums.SeatStatus
  }

  export type NestedEnumSeatTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatType | EnumSeatTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatType[] | ListEnumSeatTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatTypeWithAggregatesFilter<$PrismaModel> | $Enums.SeatType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeatTypeFilter<$PrismaModel>
    _max?: NestedEnumSeatTypeFilter<$PrismaModel>
  }

  export type NestedEnumSeatStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SeatStatus | EnumSeatStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SeatStatus[] | ListEnumSeatStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSeatStatusWithAggregatesFilter<$PrismaModel> | $Enums.SeatStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSeatStatusFilter<$PrismaModel>
    _max?: NestedEnumSeatStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumTicketTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketType | EnumTicketTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketTypeFilter<$PrismaModel> | $Enums.TicketType
  }

  export type NestedEnumTicketTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TicketType | EnumTicketTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TicketType[] | ListEnumTicketTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTicketTypeWithAggregatesFilter<$PrismaModel> | $Enums.TicketType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTicketTypeFilter<$PrismaModel>
    _max?: NestedEnumTicketTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusFilter<$PrismaModel> | $Enums.TransactionStatus
  }

  export type NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionStatus | EnumTransactionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionStatus[] | ListEnumTransactionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionStatusWithAggregatesFilter<$PrismaModel> | $Enums.TransactionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionStatusFilter<$PrismaModel>
    _max?: NestedEnumTransactionStatusFilter<$PrismaModel>
  }

  export type BookingHistoryCreateWithoutUserInput = {
    history_id?: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
    event: EventCreateNestedOneWithoutBooking_historiesInput
  }

  export type BookingHistoryUncheckedCreateWithoutUserInput = {
    history_id?: string
    event_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type BookingHistoryCreateOrConnectWithoutUserInput = {
    where: BookingHistoryWhereUniqueInput
    create: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput>
  }

  export type BookingHistoryCreateManyUserInputEnvelope = {
    data: BookingHistoryCreateManyUserInput | BookingHistoryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventBookingCreateWithoutUserInput = {
    event_booking_id?: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    event: EventCreateNestedOneWithoutEvent_bookingsInput
    seat: SeatsInventoryCreateNestedOneWithoutEvent_bookingsInput
    payment_transaction?: PaymentTransactionCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingUncheckedCreateWithoutUserInput = {
    event_booking_id?: string
    event_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingCreateOrConnectWithoutUserInput = {
    where: EventBookingWhereUniqueInput
    create: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput>
  }

  export type EventBookingCreateManyUserInputEnvelope = {
    data: EventBookingCreateManyUserInput | EventBookingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentInfoCreateWithoutUserInput = {
    payment_info_id?: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutPayment_infoInput
  }

  export type PaymentInfoUncheckedCreateWithoutUserInput = {
    payment_info_id?: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutPayment_infoInput
  }

  export type PaymentInfoCreateOrConnectWithoutUserInput = {
    where: PaymentInfoWhereUniqueInput
    create: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput>
  }

  export type PaymentInfoCreateManyUserInputEnvelope = {
    data: PaymentInfoCreateManyUserInput | PaymentInfoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PaymentTransactionCreateWithoutUserInput = {
    transaction_id?: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
    event_booking: EventBookingCreateNestedOneWithoutPayment_transactionInput
    payment_info: PaymentInfoCreateNestedOneWithoutPayment_transactionsInput
  }

  export type PaymentTransactionUncheckedCreateWithoutUserInput = {
    transaction_id?: string
    event_booking_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput>
  }

  export type PaymentTransactionCreateManyUserInputEnvelope = {
    data: PaymentTransactionCreateManyUserInput | PaymentTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferencesCreateWithoutUserInput = {
    user_preferences_id?: string
    preference: PreferencesCreateNestedOneWithoutUser_preferencesInput
  }

  export type UserPreferencesUncheckedCreateWithoutUserInput = {
    user_preferences_id?: string
    preferences_id: string
  }

  export type UserPreferencesCreateOrConnectWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type UserPreferencesCreateManyUserInputEnvelope = {
    data: UserPreferencesCreateManyUserInput | UserPreferencesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookingHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingHistoryWhereUniqueInput
    update: XOR<BookingHistoryUpdateWithoutUserInput, BookingHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<BookingHistoryCreateWithoutUserInput, BookingHistoryUncheckedCreateWithoutUserInput>
  }

  export type BookingHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingHistoryWhereUniqueInput
    data: XOR<BookingHistoryUpdateWithoutUserInput, BookingHistoryUncheckedUpdateWithoutUserInput>
  }

  export type BookingHistoryUpdateManyWithWhereWithoutUserInput = {
    where: BookingHistoryScalarWhereInput
    data: XOR<BookingHistoryUpdateManyMutationInput, BookingHistoryUncheckedUpdateManyWithoutUserInput>
  }

  export type BookingHistoryScalarWhereInput = {
    AND?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
    OR?: BookingHistoryScalarWhereInput[]
    NOT?: BookingHistoryScalarWhereInput | BookingHistoryScalarWhereInput[]
    history_id?: StringFilter<"BookingHistory"> | string
    user_id?: StringFilter<"BookingHistory"> | string
    event_id?: StringFilter<"BookingHistory"> | string
    booking_date?: DateTimeFilter<"BookingHistory"> | Date | string
    ticket_type?: EnumTicketTypeFilter<"BookingHistory"> | $Enums.TicketType
    payment_status?: EnumPaymentStatusFilter<"BookingHistory"> | $Enums.PaymentStatus
    ticket_quantity?: IntFilter<"BookingHistory"> | number
    amount_paid?: FloatFilter<"BookingHistory"> | number
    createdAt?: DateTimeFilter<"BookingHistory"> | Date | string
  }

  export type EventBookingUpsertWithWhereUniqueWithoutUserInput = {
    where: EventBookingWhereUniqueInput
    update: XOR<EventBookingUpdateWithoutUserInput, EventBookingUncheckedUpdateWithoutUserInput>
    create: XOR<EventBookingCreateWithoutUserInput, EventBookingUncheckedCreateWithoutUserInput>
  }

  export type EventBookingUpdateWithWhereUniqueWithoutUserInput = {
    where: EventBookingWhereUniqueInput
    data: XOR<EventBookingUpdateWithoutUserInput, EventBookingUncheckedUpdateWithoutUserInput>
  }

  export type EventBookingUpdateManyWithWhereWithoutUserInput = {
    where: EventBookingScalarWhereInput
    data: XOR<EventBookingUpdateManyMutationInput, EventBookingUncheckedUpdateManyWithoutUserInput>
  }

  export type EventBookingScalarWhereInput = {
    AND?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
    OR?: EventBookingScalarWhereInput[]
    NOT?: EventBookingScalarWhereInput | EventBookingScalarWhereInput[]
    event_booking_id?: StringFilter<"EventBooking"> | string
    event_id?: StringFilter<"EventBooking"> | string
    user_id?: StringFilter<"EventBooking"> | string
    seat_id?: StringFilter<"EventBooking"> | string
    booking_date?: DateTimeFilter<"EventBooking"> | Date | string
    amount_paid?: FloatFilter<"EventBooking"> | number
    cancellation_date?: DateTimeNullableFilter<"EventBooking"> | Date | string | null
    createdAt?: DateTimeFilter<"EventBooking"> | Date | string
    payment_status?: EnumPaymentStatusFilter<"EventBooking"> | $Enums.PaymentStatus
  }

  export type PaymentInfoUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentInfoWhereUniqueInput
    update: XOR<PaymentInfoUpdateWithoutUserInput, PaymentInfoUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentInfoCreateWithoutUserInput, PaymentInfoUncheckedCreateWithoutUserInput>
  }

  export type PaymentInfoUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentInfoWhereUniqueInput
    data: XOR<PaymentInfoUpdateWithoutUserInput, PaymentInfoUncheckedUpdateWithoutUserInput>
  }

  export type PaymentInfoUpdateManyWithWhereWithoutUserInput = {
    where: PaymentInfoScalarWhereInput
    data: XOR<PaymentInfoUpdateManyMutationInput, PaymentInfoUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentInfoScalarWhereInput = {
    AND?: PaymentInfoScalarWhereInput | PaymentInfoScalarWhereInput[]
    OR?: PaymentInfoScalarWhereInput[]
    NOT?: PaymentInfoScalarWhereInput | PaymentInfoScalarWhereInput[]
    payment_info_id?: StringFilter<"PaymentInfo"> | string
    user_id?: StringFilter<"PaymentInfo"> | string
    card_token?: StringFilter<"PaymentInfo"> | string
    expiry_date?: DateTimeFilter<"PaymentInfo"> | Date | string
    billing_address?: StringFilter<"PaymentInfo"> | string
    payment_type?: EnumPaymentTypeFilter<"PaymentInfo"> | $Enums.PaymentType
    createdAt?: DateTimeFilter<"PaymentInfo"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentInfo"> | Date | string
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutUserInput, PaymentTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentTransactionCreateWithoutUserInput, PaymentTransactionUncheckedCreateWithoutUserInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutUserInput, PaymentTransactionUncheckedUpdateWithoutUserInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutUserInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentTransactionScalarWhereInput = {
    AND?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    OR?: PaymentTransactionScalarWhereInput[]
    NOT?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    transaction_id?: StringFilter<"PaymentTransaction"> | string
    user_id?: StringFilter<"PaymentTransaction"> | string
    event_booking_id?: StringFilter<"PaymentTransaction"> | string
    payment_info_id?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    status?: EnumTransactionStatusFilter<"PaymentTransaction"> | $Enums.TransactionStatus
    transaction_date?: DateTimeFilter<"PaymentTransaction"> | Date | string
  }

  export type UserPreferencesUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    update: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type UserPreferencesUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    data: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUpdateManyWithWhereWithoutUserInput = {
    where: UserPreferencesScalarWhereInput
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPreferencesScalarWhereInput = {
    AND?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
    OR?: UserPreferencesScalarWhereInput[]
    NOT?: UserPreferencesScalarWhereInput | UserPreferencesScalarWhereInput[]
    user_preferences_id?: StringFilter<"UserPreferences"> | string
    user_id?: StringFilter<"UserPreferences"> | string
    preferences_id?: StringFilter<"UserPreferences"> | string
  }

  export type EventCreateWithoutOrganizerInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryCreateNestedManyWithoutEventInput
    location: LocationCreateNestedOneWithoutEventsInput
    event_bookings?: EventBookingCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutOrganizerInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutEventInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventCreateManyOrganizerInputEnvelope = {
    data: EventCreateManyOrganizerInput | EventCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
    create: XOR<EventCreateWithoutOrganizerInput, EventUncheckedCreateWithoutOrganizerInput>
  }

  export type EventUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutOrganizerInput, EventUncheckedUpdateWithoutOrganizerInput>
  }

  export type EventUpdateManyWithWhereWithoutOrganizerInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    event_id?: StringFilter<"Event"> | string
    organizer_id?: StringFilter<"Event"> | string
    event_name?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    event_type?: EnumEventTypeFilter<"Event"> | $Enums.EventType
    start_date?: DateTimeFilter<"Event"> | Date | string
    end_date?: DateTimeFilter<"Event"> | Date | string
    location_id?: StringFilter<"Event"> | string
    status?: EnumEventStatusFilter<"Event"> | $Enums.EventStatus
    createdAt?: DateTimeFilter<"Event"> | Date | string
    updatedAt?: DateTimeFilter<"Event"> | Date | string
    ticket_limit?: IntNullableFilter<"Event"> | number | null
  }

  export type EventCreateWithoutLocationInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryCreateNestedManyWithoutEventInput
    organizer: EventOrganizerCreateNestedOneWithoutEventsInput
    event_bookings?: EventBookingCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutLocationInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutEventInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutLocationInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput>
  }

  export type EventCreateManyLocationInputEnvelope = {
    data: EventCreateManyLocationInput | EventCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithWhereUniqueWithoutLocationInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutLocationInput, EventUncheckedUpdateWithoutLocationInput>
    create: XOR<EventCreateWithoutLocationInput, EventUncheckedCreateWithoutLocationInput>
  }

  export type EventUpdateWithWhereUniqueWithoutLocationInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutLocationInput, EventUncheckedUpdateWithoutLocationInput>
  }

  export type EventUpdateManyWithWhereWithoutLocationInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutLocationInput>
  }

  export type BookingHistoryCreateWithoutEventInput = {
    history_id?: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBooking_historiesInput
  }

  export type BookingHistoryUncheckedCreateWithoutEventInput = {
    history_id?: string
    user_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type BookingHistoryCreateOrConnectWithoutEventInput = {
    where: BookingHistoryWhereUniqueInput
    create: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput>
  }

  export type BookingHistoryCreateManyEventInputEnvelope = {
    data: BookingHistoryCreateManyEventInput | BookingHistoryCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type LocationCreateWithoutEventsInput = {
    location_id?: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationUncheckedCreateWithoutEventsInput = {
    location_id?: string
    address: string
    city: string
    state: string
    country: string
    zip_code: string
    timezone: string
    latitude: number
    longitude: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LocationCreateOrConnectWithoutEventsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
  }

  export type EventOrganizerCreateWithoutEventsInput = {
    organizer_id?: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
  }

  export type EventOrganizerUncheckedCreateWithoutEventsInput = {
    organizer_id?: string
    organizer_name: string
    organizer_email: string
    contact_number: string
    gst_number: string
    legal_status: $Enums.LegalStatus
    approval_date?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    password: string
  }

  export type EventOrganizerCreateOrConnectWithoutEventsInput = {
    where: EventOrganizerWhereUniqueInput
    create: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
  }

  export type EventBookingCreateWithoutEventInput = {
    event_booking_id?: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    seat: SeatsInventoryCreateNestedOneWithoutEvent_bookingsInput
    user: UserCreateNestedOneWithoutEvent_bookingsInput
    payment_transaction?: PaymentTransactionCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingUncheckedCreateWithoutEventInput = {
    event_booking_id?: string
    user_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingCreateOrConnectWithoutEventInput = {
    where: EventBookingWhereUniqueInput
    create: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput>
  }

  export type EventBookingCreateManyEventInputEnvelope = {
    data: EventBookingCreateManyEventInput | EventBookingCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type SeatsInventoryCreateWithoutEventInput = {
    seat_id?: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    event_bookings?: EventBookingCreateNestedManyWithoutSeatInput
  }

  export type SeatsInventoryUncheckedCreateWithoutEventInput = {
    seat_id?: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutSeatInput
  }

  export type SeatsInventoryCreateOrConnectWithoutEventInput = {
    where: SeatsInventoryWhereUniqueInput
    create: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput>
  }

  export type SeatsInventoryCreateManyEventInputEnvelope = {
    data: SeatsInventoryCreateManyEventInput | SeatsInventoryCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type BookingHistoryUpsertWithWhereUniqueWithoutEventInput = {
    where: BookingHistoryWhereUniqueInput
    update: XOR<BookingHistoryUpdateWithoutEventInput, BookingHistoryUncheckedUpdateWithoutEventInput>
    create: XOR<BookingHistoryCreateWithoutEventInput, BookingHistoryUncheckedCreateWithoutEventInput>
  }

  export type BookingHistoryUpdateWithWhereUniqueWithoutEventInput = {
    where: BookingHistoryWhereUniqueInput
    data: XOR<BookingHistoryUpdateWithoutEventInput, BookingHistoryUncheckedUpdateWithoutEventInput>
  }

  export type BookingHistoryUpdateManyWithWhereWithoutEventInput = {
    where: BookingHistoryScalarWhereInput
    data: XOR<BookingHistoryUpdateManyMutationInput, BookingHistoryUncheckedUpdateManyWithoutEventInput>
  }

  export type LocationUpsertWithoutEventsInput = {
    update: XOR<LocationUpdateWithoutEventsInput, LocationUncheckedUpdateWithoutEventsInput>
    create: XOR<LocationCreateWithoutEventsInput, LocationUncheckedCreateWithoutEventsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutEventsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutEventsInput, LocationUncheckedUpdateWithoutEventsInput>
  }

  export type LocationUpdateWithoutEventsInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LocationUncheckedUpdateWithoutEventsInput = {
    location_id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip_code?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventOrganizerUpsertWithoutEventsInput = {
    update: XOR<EventOrganizerUpdateWithoutEventsInput, EventOrganizerUncheckedUpdateWithoutEventsInput>
    create: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    where?: EventOrganizerWhereInput
  }

  export type EventOrganizerUpdateToOneWithWhereWithoutEventsInput = {
    where?: EventOrganizerWhereInput
    data: XOR<EventOrganizerUpdateWithoutEventsInput, EventOrganizerUncheckedUpdateWithoutEventsInput>
  }

  export type EventOrganizerUpdateWithoutEventsInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EventOrganizerUncheckedUpdateWithoutEventsInput = {
    organizer_id?: StringFieldUpdateOperationsInput | string
    organizer_name?: StringFieldUpdateOperationsInput | string
    organizer_email?: StringFieldUpdateOperationsInput | string
    contact_number?: StringFieldUpdateOperationsInput | string
    gst_number?: StringFieldUpdateOperationsInput | string
    legal_status?: EnumLegalStatusFieldUpdateOperationsInput | $Enums.LegalStatus
    approval_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type EventBookingUpsertWithWhereUniqueWithoutEventInput = {
    where: EventBookingWhereUniqueInput
    update: XOR<EventBookingUpdateWithoutEventInput, EventBookingUncheckedUpdateWithoutEventInput>
    create: XOR<EventBookingCreateWithoutEventInput, EventBookingUncheckedCreateWithoutEventInput>
  }

  export type EventBookingUpdateWithWhereUniqueWithoutEventInput = {
    where: EventBookingWhereUniqueInput
    data: XOR<EventBookingUpdateWithoutEventInput, EventBookingUncheckedUpdateWithoutEventInput>
  }

  export type EventBookingUpdateManyWithWhereWithoutEventInput = {
    where: EventBookingScalarWhereInput
    data: XOR<EventBookingUpdateManyMutationInput, EventBookingUncheckedUpdateManyWithoutEventInput>
  }

  export type SeatsInventoryUpsertWithWhereUniqueWithoutEventInput = {
    where: SeatsInventoryWhereUniqueInput
    update: XOR<SeatsInventoryUpdateWithoutEventInput, SeatsInventoryUncheckedUpdateWithoutEventInput>
    create: XOR<SeatsInventoryCreateWithoutEventInput, SeatsInventoryUncheckedCreateWithoutEventInput>
  }

  export type SeatsInventoryUpdateWithWhereUniqueWithoutEventInput = {
    where: SeatsInventoryWhereUniqueInput
    data: XOR<SeatsInventoryUpdateWithoutEventInput, SeatsInventoryUncheckedUpdateWithoutEventInput>
  }

  export type SeatsInventoryUpdateManyWithWhereWithoutEventInput = {
    where: SeatsInventoryScalarWhereInput
    data: XOR<SeatsInventoryUpdateManyMutationInput, SeatsInventoryUncheckedUpdateManyWithoutEventInput>
  }

  export type SeatsInventoryScalarWhereInput = {
    AND?: SeatsInventoryScalarWhereInput | SeatsInventoryScalarWhereInput[]
    OR?: SeatsInventoryScalarWhereInput[]
    NOT?: SeatsInventoryScalarWhereInput | SeatsInventoryScalarWhereInput[]
    seat_id?: StringFilter<"SeatsInventory"> | string
    event_id?: StringFilter<"SeatsInventory"> | string
    seat_number?: StringFilter<"SeatsInventory"> | string
    seat_type?: EnumSeatTypeFilter<"SeatsInventory"> | $Enums.SeatType
    price?: FloatFilter<"SeatsInventory"> | number
    seat_status?: EnumSeatStatusFilter<"SeatsInventory"> | $Enums.SeatStatus
  }

  export type EventBookingCreateWithoutSeatInput = {
    event_booking_id?: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    event: EventCreateNestedOneWithoutEvent_bookingsInput
    user: UserCreateNestedOneWithoutEvent_bookingsInput
    payment_transaction?: PaymentTransactionCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingUncheckedCreateWithoutSeatInput = {
    event_booking_id?: string
    event_id: string
    user_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedCreateNestedManyWithoutEvent_bookingInput
  }

  export type EventBookingCreateOrConnectWithoutSeatInput = {
    where: EventBookingWhereUniqueInput
    create: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput>
  }

  export type EventBookingCreateManySeatInputEnvelope = {
    data: EventBookingCreateManySeatInput | EventBookingCreateManySeatInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutSeats_inventoryInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryCreateNestedManyWithoutEventInput
    location: LocationCreateNestedOneWithoutEventsInput
    organizer: EventOrganizerCreateNestedOneWithoutEventsInput
    event_bookings?: EventBookingCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutSeats_inventoryInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutEventInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutSeats_inventoryInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutSeats_inventoryInput, EventUncheckedCreateWithoutSeats_inventoryInput>
  }

  export type EventBookingUpsertWithWhereUniqueWithoutSeatInput = {
    where: EventBookingWhereUniqueInput
    update: XOR<EventBookingUpdateWithoutSeatInput, EventBookingUncheckedUpdateWithoutSeatInput>
    create: XOR<EventBookingCreateWithoutSeatInput, EventBookingUncheckedCreateWithoutSeatInput>
  }

  export type EventBookingUpdateWithWhereUniqueWithoutSeatInput = {
    where: EventBookingWhereUniqueInput
    data: XOR<EventBookingUpdateWithoutSeatInput, EventBookingUncheckedUpdateWithoutSeatInput>
  }

  export type EventBookingUpdateManyWithWhereWithoutSeatInput = {
    where: EventBookingScalarWhereInput
    data: XOR<EventBookingUpdateManyMutationInput, EventBookingUncheckedUpdateManyWithoutSeatInput>
  }

  export type EventUpsertWithoutSeats_inventoryInput = {
    update: XOR<EventUpdateWithoutSeats_inventoryInput, EventUncheckedUpdateWithoutSeats_inventoryInput>
    create: XOR<EventCreateWithoutSeats_inventoryInput, EventUncheckedCreateWithoutSeats_inventoryInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutSeats_inventoryInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutSeats_inventoryInput, EventUncheckedUpdateWithoutSeats_inventoryInput>
  }

  export type EventUpdateWithoutSeats_inventoryInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUpdateManyWithoutEventNestedInput
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    organizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    event_bookings?: EventBookingUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutSeats_inventoryInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutEventNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateWithoutEvent_bookingsInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryCreateNestedManyWithoutEventInput
    location: LocationCreateNestedOneWithoutEventsInput
    organizer: EventOrganizerCreateNestedOneWithoutEventsInput
    seats_inventory?: SeatsInventoryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutEvent_bookingsInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutEvent_bookingsInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutEvent_bookingsInput, EventUncheckedCreateWithoutEvent_bookingsInput>
  }

  export type SeatsInventoryCreateWithoutEvent_bookingsInput = {
    seat_id?: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
    event: EventCreateNestedOneWithoutSeats_inventoryInput
  }

  export type SeatsInventoryUncheckedCreateWithoutEvent_bookingsInput = {
    seat_id?: string
    event_id: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
  }

  export type SeatsInventoryCreateOrConnectWithoutEvent_bookingsInput = {
    where: SeatsInventoryWhereUniqueInput
    create: XOR<SeatsInventoryCreateWithoutEvent_bookingsInput, SeatsInventoryUncheckedCreateWithoutEvent_bookingsInput>
  }

  export type UserCreateWithoutEvent_bookingsInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEvent_bookingsInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoUncheckedCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEvent_bookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEvent_bookingsInput, UserUncheckedCreateWithoutEvent_bookingsInput>
  }

  export type PaymentTransactionCreateWithoutEvent_bookingInput = {
    transaction_id?: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
    payment_info: PaymentInfoCreateNestedOneWithoutPayment_transactionsInput
    user: UserCreateNestedOneWithoutPayment_transactionsInput
  }

  export type PaymentTransactionUncheckedCreateWithoutEvent_bookingInput = {
    transaction_id?: string
    user_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutEvent_bookingInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput>
  }

  export type PaymentTransactionCreateManyEvent_bookingInputEnvelope = {
    data: PaymentTransactionCreateManyEvent_bookingInput | PaymentTransactionCreateManyEvent_bookingInput[]
    skipDuplicates?: boolean
  }

  export type EventUpsertWithoutEvent_bookingsInput = {
    update: XOR<EventUpdateWithoutEvent_bookingsInput, EventUncheckedUpdateWithoutEvent_bookingsInput>
    create: XOR<EventCreateWithoutEvent_bookingsInput, EventUncheckedCreateWithoutEvent_bookingsInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutEvent_bookingsInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutEvent_bookingsInput, EventUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type EventUpdateWithoutEvent_bookingsInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUpdateManyWithoutEventNestedInput
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    organizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    seats_inventory?: SeatsInventoryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutEvent_bookingsInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type SeatsInventoryUpsertWithoutEvent_bookingsInput = {
    update: XOR<SeatsInventoryUpdateWithoutEvent_bookingsInput, SeatsInventoryUncheckedUpdateWithoutEvent_bookingsInput>
    create: XOR<SeatsInventoryCreateWithoutEvent_bookingsInput, SeatsInventoryUncheckedCreateWithoutEvent_bookingsInput>
    where?: SeatsInventoryWhereInput
  }

  export type SeatsInventoryUpdateToOneWithWhereWithoutEvent_bookingsInput = {
    where?: SeatsInventoryWhereInput
    data: XOR<SeatsInventoryUpdateWithoutEvent_bookingsInput, SeatsInventoryUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type SeatsInventoryUpdateWithoutEvent_bookingsInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
    event?: EventUpdateOneRequiredWithoutSeats_inventoryNestedInput
  }

  export type SeatsInventoryUncheckedUpdateWithoutEvent_bookingsInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
  }

  export type UserUpsertWithoutEvent_bookingsInput = {
    update: XOR<UserUpdateWithoutEvent_bookingsInput, UserUncheckedUpdateWithoutEvent_bookingsInput>
    create: XOR<UserCreateWithoutEvent_bookingsInput, UserUncheckedCreateWithoutEvent_bookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEvent_bookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEvent_bookingsInput, UserUncheckedUpdateWithoutEvent_bookingsInput>
  }

  export type UserUpdateWithoutEvent_bookingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEvent_bookingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUncheckedUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutEvent_bookingInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutEvent_bookingInput, PaymentTransactionUncheckedUpdateWithoutEvent_bookingInput>
    create: XOR<PaymentTransactionCreateWithoutEvent_bookingInput, PaymentTransactionUncheckedCreateWithoutEvent_bookingInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutEvent_bookingInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutEvent_bookingInput, PaymentTransactionUncheckedUpdateWithoutEvent_bookingInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutEvent_bookingInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingInput>
  }

  export type EventCreateWithoutBooking_historiesInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    location: LocationCreateNestedOneWithoutEventsInput
    organizer: EventOrganizerCreateNestedOneWithoutEventsInput
    event_bookings?: EventBookingCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateWithoutBooking_historiesInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutEventInput
    seats_inventory?: SeatsInventoryUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventCreateOrConnectWithoutBooking_historiesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutBooking_historiesInput, EventUncheckedCreateWithoutBooking_historiesInput>
  }

  export type UserCreateWithoutBooking_historiesInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    event_bookings?: EventBookingCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBooking_historiesInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoUncheckedCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBooking_historiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBooking_historiesInput, UserUncheckedCreateWithoutBooking_historiesInput>
  }

  export type EventUpsertWithoutBooking_historiesInput = {
    update: XOR<EventUpdateWithoutBooking_historiesInput, EventUncheckedUpdateWithoutBooking_historiesInput>
    create: XOR<EventCreateWithoutBooking_historiesInput, EventUncheckedCreateWithoutBooking_historiesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutBooking_historiesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutBooking_historiesInput, EventUncheckedUpdateWithoutBooking_historiesInput>
  }

  export type EventUpdateWithoutBooking_historiesInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    organizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    event_bookings?: EventBookingUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutBooking_historiesInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    event_bookings?: EventBookingUncheckedUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type UserUpsertWithoutBooking_historiesInput = {
    update: XOR<UserUpdateWithoutBooking_historiesInput, UserUncheckedUpdateWithoutBooking_historiesInput>
    create: XOR<UserCreateWithoutBooking_historiesInput, UserUncheckedCreateWithoutBooking_historiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBooking_historiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBooking_historiesInput, UserUncheckedUpdateWithoutBooking_historiesInput>
  }

  export type UserUpdateWithoutBooking_historiesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    event_bookings?: EventBookingUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBooking_historiesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    event_bookings?: EventBookingUncheckedUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUncheckedUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPayment_infoInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPayment_infoInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPayment_infoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPayment_infoInput, UserUncheckedCreateWithoutPayment_infoInput>
  }

  export type PaymentTransactionCreateWithoutPayment_infoInput = {
    transaction_id?: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
    event_booking: EventBookingCreateNestedOneWithoutPayment_transactionInput
    user: UserCreateNestedOneWithoutPayment_transactionsInput
  }

  export type PaymentTransactionUncheckedCreateWithoutPayment_infoInput = {
    transaction_id?: string
    user_id: string
    event_booking_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutPayment_infoInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput>
  }

  export type PaymentTransactionCreateManyPayment_infoInputEnvelope = {
    data: PaymentTransactionCreateManyPayment_infoInput | PaymentTransactionCreateManyPayment_infoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPayment_infoInput = {
    update: XOR<UserUpdateWithoutPayment_infoInput, UserUncheckedUpdateWithoutPayment_infoInput>
    create: XOR<UserCreateWithoutPayment_infoInput, UserUncheckedCreateWithoutPayment_infoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPayment_infoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPayment_infoInput, UserUncheckedUpdateWithoutPayment_infoInput>
  }

  export type UserUpdateWithoutPayment_infoInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPayment_infoInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutPayment_infoInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutPayment_infoInput, PaymentTransactionUncheckedUpdateWithoutPayment_infoInput>
    create: XOR<PaymentTransactionCreateWithoutPayment_infoInput, PaymentTransactionUncheckedCreateWithoutPayment_infoInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutPayment_infoInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutPayment_infoInput, PaymentTransactionUncheckedUpdateWithoutPayment_infoInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutPayment_infoInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutPayment_infoInput>
  }

  export type EventBookingCreateWithoutPayment_transactionInput = {
    event_booking_id?: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
    event: EventCreateNestedOneWithoutEvent_bookingsInput
    seat: SeatsInventoryCreateNestedOneWithoutEvent_bookingsInput
    user: UserCreateNestedOneWithoutEvent_bookingsInput
  }

  export type EventBookingUncheckedCreateWithoutPayment_transactionInput = {
    event_booking_id?: string
    event_id: string
    user_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
  }

  export type EventBookingCreateOrConnectWithoutPayment_transactionInput = {
    where: EventBookingWhereUniqueInput
    create: XOR<EventBookingCreateWithoutPayment_transactionInput, EventBookingUncheckedCreateWithoutPayment_transactionInput>
  }

  export type PaymentInfoCreateWithoutPayment_transactionsInput = {
    payment_info_id?: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPayment_infoInput
  }

  export type PaymentInfoUncheckedCreateWithoutPayment_transactionsInput = {
    payment_info_id?: string
    user_id: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentInfoCreateOrConnectWithoutPayment_transactionsInput = {
    where: PaymentInfoWhereUniqueInput
    create: XOR<PaymentInfoCreateWithoutPayment_transactionsInput, PaymentInfoUncheckedCreateWithoutPayment_transactionsInput>
  }

  export type UserCreateWithoutPayment_transactionsInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPayment_transactionsInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoUncheckedCreateNestedManyWithoutUserInput
    user_preferences?: UserPreferencesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPayment_transactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPayment_transactionsInput, UserUncheckedCreateWithoutPayment_transactionsInput>
  }

  export type EventBookingUpsertWithoutPayment_transactionInput = {
    update: XOR<EventBookingUpdateWithoutPayment_transactionInput, EventBookingUncheckedUpdateWithoutPayment_transactionInput>
    create: XOR<EventBookingCreateWithoutPayment_transactionInput, EventBookingUncheckedCreateWithoutPayment_transactionInput>
    where?: EventBookingWhereInput
  }

  export type EventBookingUpdateToOneWithWhereWithoutPayment_transactionInput = {
    where?: EventBookingWhereInput
    data: XOR<EventBookingUpdateWithoutPayment_transactionInput, EventBookingUncheckedUpdateWithoutPayment_transactionInput>
  }

  export type EventBookingUpdateWithoutPayment_transactionInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    event?: EventUpdateOneRequiredWithoutEvent_bookingsNestedInput
    seat?: SeatsInventoryUpdateOneRequiredWithoutEvent_bookingsNestedInput
    user?: UserUpdateOneRequiredWithoutEvent_bookingsNestedInput
  }

  export type EventBookingUncheckedUpdateWithoutPayment_transactionInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentInfoUpsertWithoutPayment_transactionsInput = {
    update: XOR<PaymentInfoUpdateWithoutPayment_transactionsInput, PaymentInfoUncheckedUpdateWithoutPayment_transactionsInput>
    create: XOR<PaymentInfoCreateWithoutPayment_transactionsInput, PaymentInfoUncheckedCreateWithoutPayment_transactionsInput>
    where?: PaymentInfoWhereInput
  }

  export type PaymentInfoUpdateToOneWithWhereWithoutPayment_transactionsInput = {
    where?: PaymentInfoWhereInput
    data: XOR<PaymentInfoUpdateWithoutPayment_transactionsInput, PaymentInfoUncheckedUpdateWithoutPayment_transactionsInput>
  }

  export type PaymentInfoUpdateWithoutPayment_transactionsInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPayment_infoNestedInput
  }

  export type PaymentInfoUncheckedUpdateWithoutPayment_transactionsInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPayment_transactionsInput = {
    update: XOR<UserUpdateWithoutPayment_transactionsInput, UserUncheckedUpdateWithoutPayment_transactionsInput>
    create: XOR<UserCreateWithoutPayment_transactionsInput, UserUncheckedCreateWithoutPayment_transactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPayment_transactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPayment_transactionsInput, UserUncheckedUpdateWithoutPayment_transactionsInput>
  }

  export type UserUpdateWithoutPayment_transactionsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPayment_transactionsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUncheckedUpdateManyWithoutUserNestedInput
    user_preferences?: UserPreferencesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserPreferencesCreateWithoutPreferenceInput = {
    user_preferences_id?: string
    user: UserCreateNestedOneWithoutUser_preferencesInput
  }

  export type UserPreferencesUncheckedCreateWithoutPreferenceInput = {
    user_preferences_id?: string
    user_id: string
  }

  export type UserPreferencesCreateOrConnectWithoutPreferenceInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput>
  }

  export type UserPreferencesCreateManyPreferenceInputEnvelope = {
    data: UserPreferencesCreateManyPreferenceInput | UserPreferencesCreateManyPreferenceInput[]
    skipDuplicates?: boolean
  }

  export type UserPreferencesUpsertWithWhereUniqueWithoutPreferenceInput = {
    where: UserPreferencesWhereUniqueInput
    update: XOR<UserPreferencesUpdateWithoutPreferenceInput, UserPreferencesUncheckedUpdateWithoutPreferenceInput>
    create: XOR<UserPreferencesCreateWithoutPreferenceInput, UserPreferencesUncheckedCreateWithoutPreferenceInput>
  }

  export type UserPreferencesUpdateWithWhereUniqueWithoutPreferenceInput = {
    where: UserPreferencesWhereUniqueInput
    data: XOR<UserPreferencesUpdateWithoutPreferenceInput, UserPreferencesUncheckedUpdateWithoutPreferenceInput>
  }

  export type UserPreferencesUpdateManyWithWhereWithoutPreferenceInput = {
    where: UserPreferencesScalarWhereInput
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyWithoutPreferenceInput>
  }

  export type PreferencesCreateWithoutUser_preferencesInput = {
    preferences_id?: string
    preference_name: string
    description: string
  }

  export type PreferencesUncheckedCreateWithoutUser_preferencesInput = {
    preferences_id?: string
    preference_name: string
    description: string
  }

  export type PreferencesCreateOrConnectWithoutUser_preferencesInput = {
    where: PreferencesWhereUniqueInput
    create: XOR<PreferencesCreateWithoutUser_preferencesInput, PreferencesUncheckedCreateWithoutUser_preferencesInput>
  }

  export type UserCreateWithoutUser_preferencesInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUser_preferencesInput = {
    user_id?: string
    first_name: string
    last_name: string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account_status: $Enums.AccountStatus
    password: string
    booking_histories?: BookingHistoryUncheckedCreateNestedManyWithoutUserInput
    event_bookings?: EventBookingUncheckedCreateNestedManyWithoutUserInput
    payment_info?: PaymentInfoUncheckedCreateNestedManyWithoutUserInput
    payment_transactions?: PaymentTransactionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUser_preferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUser_preferencesInput, UserUncheckedCreateWithoutUser_preferencesInput>
  }

  export type PreferencesUpsertWithoutUser_preferencesInput = {
    update: XOR<PreferencesUpdateWithoutUser_preferencesInput, PreferencesUncheckedUpdateWithoutUser_preferencesInput>
    create: XOR<PreferencesCreateWithoutUser_preferencesInput, PreferencesUncheckedCreateWithoutUser_preferencesInput>
    where?: PreferencesWhereInput
  }

  export type PreferencesUpdateToOneWithWhereWithoutUser_preferencesInput = {
    where?: PreferencesWhereInput
    data: XOR<PreferencesUpdateWithoutUser_preferencesInput, PreferencesUncheckedUpdateWithoutUser_preferencesInput>
  }

  export type PreferencesUpdateWithoutUser_preferencesInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PreferencesUncheckedUpdateWithoutUser_preferencesInput = {
    preferences_id?: StringFieldUpdateOperationsInput | string
    preference_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutUser_preferencesInput = {
    update: XOR<UserUpdateWithoutUser_preferencesInput, UserUncheckedUpdateWithoutUser_preferencesInput>
    create: XOR<UserCreateWithoutUser_preferencesInput, UserUncheckedCreateWithoutUser_preferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUser_preferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUser_preferencesInput, UserUncheckedUpdateWithoutUser_preferencesInput>
  }

  export type UserUpdateWithoutUser_preferencesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUser_preferencesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account_status?: EnumAccountStatusFieldUpdateOperationsInput | $Enums.AccountStatus
    password?: StringFieldUpdateOperationsInput | string
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutUserNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutUserNestedInput
    payment_info?: PaymentInfoUncheckedUpdateManyWithoutUserNestedInput
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingHistoryCreateManyUserInput = {
    history_id?: string
    event_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type EventBookingCreateManyUserInput = {
    event_booking_id?: string
    event_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
  }

  export type PaymentInfoCreateManyUserInput = {
    payment_info_id?: string
    card_token: string
    expiry_date: Date | string
    billing_address: string
    payment_type: $Enums.PaymentType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateManyUserInput = {
    transaction_id?: string
    event_booking_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type UserPreferencesCreateManyUserInput = {
    user_preferences_id?: string
    preferences_id: string
  }

  export type BookingHistoryUpdateWithoutUserInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    event?: EventUpdateOneRequiredWithoutBooking_historiesNestedInput
  }

  export type BookingHistoryUncheckedUpdateWithoutUserInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingHistoryUncheckedUpdateManyWithoutUserInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventBookingUpdateWithoutUserInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    event?: EventUpdateOneRequiredWithoutEvent_bookingsNestedInput
    seat?: SeatsInventoryUpdateOneRequiredWithoutEvent_bookingsNestedInput
    payment_transaction?: PaymentTransactionUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateWithoutUserInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateManyWithoutUserInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentInfoUpdateWithoutUserInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_transactions?: PaymentTransactionUpdateManyWithoutPayment_infoNestedInput
  }

  export type PaymentInfoUncheckedUpdateWithoutUserInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_transactions?: PaymentTransactionUncheckedUpdateManyWithoutPayment_infoNestedInput
  }

  export type PaymentInfoUncheckedUpdateManyWithoutUserInput = {
    payment_info_id?: StringFieldUpdateOperationsInput | string
    card_token?: StringFieldUpdateOperationsInput | string
    expiry_date?: DateTimeFieldUpdateOperationsInput | Date | string
    billing_address?: StringFieldUpdateOperationsInput | string
    payment_type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUpdateWithoutUserInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_booking?: EventBookingUpdateOneRequiredWithoutPayment_transactionNestedInput
    payment_info?: PaymentInfoUpdateOneRequiredWithoutPayment_transactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateWithoutUserInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutUserInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesUpdateWithoutUserInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    preference?: PreferencesUpdateOneRequiredWithoutUser_preferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateWithoutUserInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    preferences_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferencesUncheckedUpdateManyWithoutUserInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    preferences_id?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyOrganizerInput = {
    event_id?: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    location_id: string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
  }

  export type EventUpdateWithoutOrganizerInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUpdateManyWithoutEventNestedInput
    location?: LocationUpdateOneRequiredWithoutEventsNestedInput
    event_bookings?: EventBookingUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutOrganizerInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutEventNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutOrganizerInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    location_id?: StringFieldUpdateOperationsInput | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EventCreateManyLocationInput = {
    event_id?: string
    organizer_id: string
    event_name: string
    description: string
    event_type: $Enums.EventType
    start_date: Date | string
    end_date: Date | string
    status: $Enums.EventStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    ticket_limit?: number | null
  }

  export type EventUpdateWithoutLocationInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUpdateManyWithoutEventNestedInput
    organizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    event_bookings?: EventBookingUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateWithoutLocationInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
    booking_histories?: BookingHistoryUncheckedUpdateManyWithoutEventNestedInput
    event_bookings?: EventBookingUncheckedUpdateManyWithoutEventNestedInput
    seats_inventory?: SeatsInventoryUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateManyWithoutLocationInput = {
    event_id?: StringFieldUpdateOperationsInput | string
    organizer_id?: StringFieldUpdateOperationsInput | string
    event_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    event_type?: EnumEventTypeFieldUpdateOperationsInput | $Enums.EventType
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEventStatusFieldUpdateOperationsInput | $Enums.EventStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_limit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type BookingHistoryCreateManyEventInput = {
    history_id?: string
    user_id: string
    booking_date: Date | string
    ticket_type: $Enums.TicketType
    payment_status: $Enums.PaymentStatus
    ticket_quantity: number
    amount_paid: number
    createdAt?: Date | string
  }

  export type EventBookingCreateManyEventInput = {
    event_booking_id?: string
    user_id: string
    seat_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
  }

  export type SeatsInventoryCreateManyEventInput = {
    seat_id?: string
    seat_number: string
    seat_type: $Enums.SeatType
    price: number
    seat_status: $Enums.SeatStatus
  }

  export type BookingHistoryUpdateWithoutEventInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBooking_historiesNestedInput
  }

  export type BookingHistoryUncheckedUpdateWithoutEventInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingHistoryUncheckedUpdateManyWithoutEventInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    ticket_type?: EnumTicketTypeFieldUpdateOperationsInput | $Enums.TicketType
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    ticket_quantity?: IntFieldUpdateOperationsInput | number
    amount_paid?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventBookingUpdateWithoutEventInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    seat?: SeatsInventoryUpdateOneRequiredWithoutEvent_bookingsNestedInput
    user?: UserUpdateOneRequiredWithoutEvent_bookingsNestedInput
    payment_transaction?: PaymentTransactionUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateWithoutEventInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateManyWithoutEventInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    seat_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type SeatsInventoryUpdateWithoutEventInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
    event_bookings?: EventBookingUpdateManyWithoutSeatNestedInput
  }

  export type SeatsInventoryUncheckedUpdateWithoutEventInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
    event_bookings?: EventBookingUncheckedUpdateManyWithoutSeatNestedInput
  }

  export type SeatsInventoryUncheckedUpdateManyWithoutEventInput = {
    seat_id?: StringFieldUpdateOperationsInput | string
    seat_number?: StringFieldUpdateOperationsInput | string
    seat_type?: EnumSeatTypeFieldUpdateOperationsInput | $Enums.SeatType
    price?: FloatFieldUpdateOperationsInput | number
    seat_status?: EnumSeatStatusFieldUpdateOperationsInput | $Enums.SeatStatus
  }

  export type EventBookingCreateManySeatInput = {
    event_booking_id?: string
    event_id: string
    user_id: string
    booking_date: Date | string
    amount_paid: number
    cancellation_date?: Date | string | null
    createdAt?: Date | string
    payment_status: $Enums.PaymentStatus
  }

  export type EventBookingUpdateWithoutSeatInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    event?: EventUpdateOneRequiredWithoutEvent_bookingsNestedInput
    user?: UserUpdateOneRequiredWithoutEvent_bookingsNestedInput
    payment_transaction?: PaymentTransactionUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateWithoutSeatInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    payment_transaction?: PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingNestedInput
  }

  export type EventBookingUncheckedUpdateManyWithoutSeatInput = {
    event_booking_id?: StringFieldUpdateOperationsInput | string
    event_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    booking_date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount_paid?: FloatFieldUpdateOperationsInput | number
    cancellation_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
  }

  export type PaymentTransactionCreateManyEvent_bookingInput = {
    transaction_id?: string
    user_id: string
    payment_info_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionUpdateWithoutEvent_bookingInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_info?: PaymentInfoUpdateOneRequiredWithoutPayment_transactionsNestedInput
    user?: UserUpdateOneRequiredWithoutPayment_transactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateWithoutEvent_bookingInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutEvent_bookingInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    payment_info_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateManyPayment_infoInput = {
    transaction_id?: string
    user_id: string
    event_booking_id: string
    amount: number
    status: $Enums.TransactionStatus
    transaction_date: Date | string
  }

  export type PaymentTransactionUpdateWithoutPayment_infoInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    event_booking?: EventBookingUpdateOneRequiredWithoutPayment_transactionNestedInput
    user?: UserUpdateOneRequiredWithoutPayment_transactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateWithoutPayment_infoInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutPayment_infoInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    event_booking_id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumTransactionStatusFieldUpdateOperationsInput | $Enums.TransactionStatus
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateManyPreferenceInput = {
    user_preferences_id?: string
    user_id: string
  }

  export type UserPreferencesUpdateWithoutPreferenceInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutUser_preferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateWithoutPreferenceInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }

  export type UserPreferencesUncheckedUpdateManyWithoutPreferenceInput = {
    user_preferences_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventOrganizerCountOutputTypeDefaultArgs instead
     */
    export type EventOrganizerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventOrganizerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeatsInventoryCountOutputTypeDefaultArgs instead
     */
    export type SeatsInventoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeatsInventoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventBookingCountOutputTypeDefaultArgs instead
     */
    export type EventBookingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventBookingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentInfoCountOutputTypeDefaultArgs instead
     */
    export type PaymentInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PreferencesCountOutputTypeDefaultArgs instead
     */
    export type PreferencesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PreferencesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventOrganizerDefaultArgs instead
     */
    export type EventOrganizerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventOrganizerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeatsInventoryDefaultArgs instead
     */
    export type SeatsInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeatsInventoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventBookingDefaultArgs instead
     */
    export type EventBookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventBookingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookingHistoryDefaultArgs instead
     */
    export type BookingHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookingHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentInfoDefaultArgs instead
     */
    export type PaymentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentTransactionDefaultArgs instead
     */
    export type PaymentTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PreferencesDefaultArgs instead
     */
    export type PreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PreferencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferencesDefaultArgs instead
     */
    export type UserPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferencesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}