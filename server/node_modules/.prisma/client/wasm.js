
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  account_Status: 'account_Status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  location_id: 'location_id'
};

exports.Prisma.PaymentInfoScalarFieldEnum = {
  payment_info_id: 'payment_info_id',
  user_id: 'user_id',
  card_token: 'card_token',
  expiry_date: 'expiry_date',
  billing_address: 'billing_address',
  payment_type: 'payment_type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  location_id: 'location_id',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  zip_code: 'zip_code',
  timezone: 'timezone',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PreferencesScalarFieldEnum = {
  preferences_id: 'preferences_id',
  preference_name: 'preference_name',
  description: 'description'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  user_preferences_id: 'user_preferences_id',
  user_id: 'user_id',
  preferences_id: 'preferences_id'
};

exports.Prisma.EventScalarFieldEnum = {
  event_id: 'event_id',
  organizer_id: 'organizer_id',
  event_name: 'event_name',
  description: 'description',
  event_type: 'event_type',
  start_date: 'start_date',
  end_date: 'end_date',
  location_id: 'location_id',
  status: 'status',
  ticketlimit: 'ticketlimit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventBookingScalarFieldEnum = {
  event_booking_id: 'event_booking_id',
  event_id: 'event_id',
  user_id: 'user_id',
  seat_id: 'seat_id',
  booking_date: 'booking_date',
  paymentStatus: 'paymentStatus',
  amount_paid: 'amount_paid',
  cancellation_date: 'cancellation_date',
  createdAt: 'createdAt'
};

exports.Prisma.SeatsInventoryScalarFieldEnum = {
  seat_id: 'seat_id',
  event_id: 'event_id',
  seat_number: 'seat_number',
  seat_type: 'seat_type',
  price: 'price',
  seat_status: 'seat_status'
};

exports.Prisma.BookingHistoryScalarFieldEnum = {
  history_id: 'history_id',
  user_id: 'user_id',
  event_id: 'event_id',
  booking_date: 'booking_date',
  ticket_type: 'ticket_type',
  payment_status: 'payment_status',
  ticket_quantity: 'ticket_quantity',
  amount_paid: 'amount_paid',
  createdAt: 'createdAt'
};

exports.Prisma.EventOrganizerScalarFieldEnum = {
  organizer_id: 'organizer_id',
  organizer_name: 'organizer_name',
  organizer_email: 'organizer_email',
  contact_number: 'contact_number',
  gst_number: 'gst_number',
  legal_status: 'legal_status',
  approval_date: 'approval_date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  transaction_id: 'transaction_id',
  user_id: 'user_id',
  event_booking_id: 'event_booking_id',
  payment_info_id: 'payment_info_id',
  amount: 'amount',
  status: 'status',
  transaction_date: 'transaction_date'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AccountStatus = exports.$Enums.AccountStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  credit: 'credit',
  debit: 'debit',
  paypal: 'paypal',
  cash: 'cash',
  stripe: 'stripe'
};

exports.EventType = exports.$Enums.EventType = {
  Workshop: 'Workshop',
  Conference: 'Conference',
  Seminar: 'Seminar',
  Concert: 'Concert',
  Exhibition: 'Exhibition'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  Completed: 'Completed',
  Upcoming: 'Upcoming',
  Cancelled: 'Cancelled',
  PendingApproval: 'PendingApproval'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  Pending: 'Pending',
  Failed: 'Failed',
  Success: 'Success'
};

exports.SeatType = exports.$Enums.SeatType = {
  VIP: 'VIP',
  General: 'General',
  Student: 'Student'
};

exports.SeatStatus = exports.$Enums.SeatStatus = {
  available: 'available',
  booked: 'booked'
};

exports.TicketType = exports.$Enums.TicketType = {
  VIP: 'VIP',
  General: 'General',
  Student: 'Student',
  EalyBird: 'EalyBird'
};

exports.LegalStatus = exports.$Enums.LegalStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Suspended: 'Suspended'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  Completed: 'Completed',
  Failed: 'Failed',
  Pending: 'Pending'
};

exports.Prisma.ModelName = {
  User: 'User',
  PaymentInfo: 'PaymentInfo',
  Location: 'Location',
  Preferences: 'Preferences',
  UserPreferences: 'UserPreferences',
  Event: 'Event',
  EventBooking: 'EventBooking',
  SeatsInventory: 'SeatsInventory',
  BookingHistory: 'BookingHistory',
  EventOrganizer: 'EventOrganizer',
  PaymentTransaction: 'PaymentTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
